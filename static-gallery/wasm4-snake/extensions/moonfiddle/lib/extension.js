"use strict";var module=module||{};module.exports=(()=>{var LA=Object.create;var u=Object.defineProperty;var WA=Object.getOwnPropertyDescriptor;var sA=Object.getOwnPropertyNames;var xA=Object.getPrototypeOf,iA=Object.prototype.hasOwnProperty;var mA=(I,A,B)=>A in I?u(I,A,{enumerable:!0,configurable:!0,writable:!0,value:B}):I[A]=B;var T=(I=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(I,{get:(A,B)=>(typeof require<"u"?require:A)[B]}):I)(function(I){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+I+'" is not supported')});var SA=(I,A)=>{for(var B in A)u(I,B,{get:A[B],enumerable:!0})},j=(I,A,B,Q)=>{if(A&&typeof A=="object"||typeof A=="function")for(let C of sA(A))!iA.call(I,C)&&C!==B&&u(I,C,{get:()=>A[C],enumerable:!(Q=WA(A,C))||Q.enumerable});return I};var O=(I,A,B)=>(B=I!=null?LA(xA(I)):{},j(A||!I||!I.__esModule?u(B,"default",{value:I,enumerable:!0}):B,I)),NA=I=>j(u({},"__esModule",{value:!0}),I);var Z=(I,A,B)=>(mA(I,typeof A!="symbol"?A+"":A,B),B);var LI={};SA(LI,{activate:()=>EI});var l=O(T("vscode"));var F=T("vscode");var g=O(T("vscode"));function P(I){I.createDirectory(g.default.Uri.parse("memfs:/app/main")),I.createDirectory(g.default.Uri.parse("memfs:/app/target")),I.createDirectory(g.default.Uri.parse("memfs:/app/.mooncakes")),I.createDirectory(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang")),I.createDirectory(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release")),I.createDirectory(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/lib")),I.createDirectory(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/.github")),I.createDirectory(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/.github/workflows")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/check")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/build")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/check/main")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/build/main")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/build/.mooncakes")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/build/.mooncakes/moonbitlang")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/build/.mooncakes/moonbitlang/wasm4")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/build/.mooncakes/moonbitlang/wasm4/lib")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/check/.mooncakes")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/check/.mooncakes/moonbitlang")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/check/.mooncakes/moonbitlang/wasm4")),I.createDirectory(g.default.Uri.parse("memfs:/app/target/wasm/release/check/.mooncakes/moonbitlang/wasm4/lib")),I.writeFile(g.default.Uri.parse("memfs:/app/.DS_Store"),Uint8Array.from(atob("AAAAAUJ1ZDEAABAAAAAIAAAAEAAAAAAlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAggLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAACAAAAABAAAAQAAAAAEAAACAAAAAAQAAAQAAAAABAAACAAAAAAEAAAQAAAAAAAAAAAEAABAAAAAAAQAAIAAAAAABAABAAAAAAAEAAIAAAAAAAQABAAAAAAABAAIAAAAAAAEABAAAAAAAAQAIAAAAAAABABAAAAAAAAEAIAAAAAAAAQBAAAAAAAABAIAAAAAAAAEBAAAAAAAAAQIAAAAAAAABBAAAAAAAAAEIAAAAAAAAARAAAAAAAAABIAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAEAsgAAAAAEAAAEAAAAAAQAAAgAAAAABAAAEAAAAAAIAAAgAAAAYAAAAAAAAAAABAAAgAAAAAAEAAEAAAAAAAQAAgAAAAAABAAEAAAAAAAEAAgAAAAAAAQAEAAAAAAABAAgAAAAAAAEAEAAAAAAAAQAgAAAAAAABAEAAAAAAAAEAgAAAAAAAAQEAAAAAAAABAgAAAAAAAAEEAAAAAAAAAQgAAAAAAAABEAAAAAAAAAEgAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.gitkeep"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.moonbit-lsp.json"),Uint8Array.from(atob("ewogICJiYWNrZW5kIjogIndhc20iCn0K"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/index.html"),Uint8Array.from(atob("PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgbWluaW11bS1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEsIHVzZXItc2NhbGFibGU9bm8iPgogIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iaHR0cHM6Ly93YXNtNC5vcmcvaW1nL2Zhdmljb24uaWNvIj4KICA8dGl0bGU+V0FTTS00IENhcnQ8L3RpdGxlPgogIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0id2FzbTQuY3NzIj4KPC9oZWFkPgo8Ym9keT4KICA8c2NyaXB0PgogICAgZ2xvYmFsVGhpcy5XQVNNNF9DQVJUX1VSTCA9ICJ0YXJnZXQvd2FzbS9kZWJ1Zy9idWlsZC9tYWluL21haW4ud2FzbSI7CiAgPC9zY3JpcHQ+CiAgPGRpdiBpZD0iZGV2dG9vbHMiPjwvZGl2PgogIDxzY3JpcHQgc3JjPSJ3YXNtNC5qcyI+PC9zY3JpcHQ+CiAgPHdhc200LWFwcD48L3dhc200LWFwcD4KPC9ib2R5Pgo8L2h0bWw+Cg=="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/moon.mod.json"),Uint8Array.from(atob("ewogICJuYW1lIjogInNuYWtlIiwKICAiZGVwcyI6IHsKICAgICJtb29uYml0bGFuZy93YXNtNCI6ICIwLjEuMSIKICB9LAogICJsaWNlbnNlIjogIklTQyIKfQ=="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/wasm4.css"),Uint8Array.from(atob("aHRtbCxib2R5e2hlaWdodDoxMDAlO21hcmdpbjowfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6d2FzbTQtZm9udDtzcmM6dXJsKGRhdGE6Zm9udC93b2ZmMjtiYXNlNjQsZDA5R01nQUJBQUFBQUFlZ0FBMEFBQUFBS0h3QUFBZE9BQUVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUdoWUdZQUEwQ0FRUkNBckdITGxSQzRGQ0FBRTJBaVFEZ1VJRUlBV0RKZ2NnRzRnZ1VWUlFoa1FSYkJ5bEFXQ1IvZUdBbXpCZ2NiVlNFUVYxTUZSczhUcy9UVmlyamRjbXpadW0rZm9acVlHcTRUZEEyRmJ6U0R4OGY1K2VlN05zNzRmaW0vQldvRTRBUDFXd2M2bGFrQTIwVk81NFJNclIyZ3Bmc0Y5N3MvUDN4S01EOFVJa0JaTkZrMm9uZFB6L245djlHNFJPdkdjSjllamFKdzhSSzRrWVVPdDh6TzRLZ1VEZ29mQlFHRHdNQ2pzZjJGQUhLTXVTeGZRS0dJQ0tUcXB3OFRBWWZIeXdGTnMwMnpiYkpEQWdVQUQrejdsNGJ5QURqY1NKalhoQWtYK1YxNXo1UEEwSGZtRUhkSHFXNU9mWFQxUHNWTGxWNUFrUGdtMTRFUFcvMWRzMG5XdWhSa0hobWIvN0pCZmRaYXpUcGJUR01yeHluSFBzOVhPNjM0ZkY3TEhHR1l2S3JsZDd4U3NncFR5ZkpxQUJKSkdpTkVQMEpYWHlQeS9nVWQrT3EwUWNrSEtBRW9jWG5lL0tEdjdvT3dTRzBNTXJERFJnUTBIQ0FGWjBBcjdMRmhnaSt0MzkvMkx6di8rZkZMRExEL0cvRXVnQkgrQ0Jiait3WEEvZ2l2Nm9ma20zWkFxaU5oclhsZ2tkNEFJUXdKZzE4L0VTMFFFS0laWGVkTkRwYkg5Rm1EekxEM0Q5N3EycnpUM1RSWGRuZ1BLTVJhelZZWFdpVXRscFZuWlRwcld0NEo2d2JRaUxLN28vdSt2aFpyOTFPV0hjMi9nSCtReXE1MDVOR1dCN3VpMURXa2w5NFZXTFBzem5hZjFTb2NsKyszMlgwQjFmTEFTYnlMWWk2VEFPNkxsSm9Qd1hnNVlBSURRWjJHeFhkN3lhTHpLZFROckFqa0liRDFTY2E0ZlVyV21OcitJVVZpVUpWYnV1dTY2S0RaWG1uSDRmTUNRNXVrUENSSkRkZ2l0NTJiNEV0NVJ1Q0syWmp1QlhXdTZLNnpKa1c0cUF4QTZZMEJXSnBTOVVnWlBMUTNpU3VRV0FvZEtyRDFWSzQ0YmhnQXB6S0dlbHk5cHlCUzQ1cVdzR0F4N0VMckdSTmtxWlgycnBHMW5vM0tnckY5enYyOUhYZGNBbUVZcFRlcVhRdW5tY00xS05McmkxbDNFVEtoci9qa3VacFlRV0N0TVVrQU9BK0czMUV6YzhUbFFDY1gwQUZpSk04QS9KYTVBTk5GM3MrQWoxSGFSOTFQUFp3Q3NsYkVCSDgxQnRhN0tCR2poQWRwdGVxeElIeEtyVnJnbHhoYllHMHFScnhQd1lkK1JBM0x0cHZmRFpocVFLS0V4ZE9JNFNTQ3I4aGJvUENDZFV4dVljc0xRMlRXdzhYTytXOFM4a2cyOHRUc0doR0xnQUdSd3E3cXBTZDVYaUpuOCswbTdrbThCQnBBaFE1cnFkdHBRNThuc2s2VVZJQTFEYkZtWCtrbG04TkZJK21rK0xsNUJYREFZMVpzR1JOZURHSVVpTG5JSVN4OHUxbisra1BseDVLYkpMSk9TaUlEUDFkZlk0ZHJoS2xQRTdvVHdjOWdFSTV2QkZEcFEyaWgvUUNCNFYrR3JGZUFNYmRGbHRCU3BTcVptOWpUdVZWTTFDVlR5RytIYWoxdVpoTk9YSVUweGRhK1djY1BJVjB2QXl5MTNBWEhTN29kS3FYNmxQbk5RVzI5dXB0RkY3aGp1ZCtiZWkxb2JHUTNtbXB2RTdZSSsyMU5sdDdpcSt0VmIzWFRjVUZHNXEzMXUydVZJMXF2azk3MXlaKy9OdnpwWlYxZE5hN1dyZW1zK3ZYWjdHMGJqWXJCTWRNNDR4dnJkZnl0eHlvdW9BbVBNSVVuYzBIMW5qekZmcmdWZEFSWjJWbldYVncrMHF2L2ZYOGlZajY5OHp6clNUT2xvcmJwWUY3ZHNNSkZFN3lXNWtWL05WL3d3Si82VlcrUzN2azZ1N3MvZnJRUjRrcGk3SlNRVWtzeUpobDBCU05QUzY1ZVVtRCtpOFVHRVlIaGQ1em1RQTBvVTV4TitxczhmZHdmSlpBUWFxTkRGVGdTb3dPQVNBVlRpNG5OUkQ1Q3dKVnlGSzEzY0h4REVlV1ZRRHZaVTNDZnNnWHV3aElHeHhBR0Uzc3hNMVFOQ0w1b1RScEF0VmVjMC9wSlhOZmVMUUxPKzk3M3F1UXplWUJoSzdHTUZ4MTgrNER0RTFBWDkwbEZlYWF3Y2ZQd0tiaDlDWm5jV0dSaWc1MTRDYTZyNWFJY01rMXU3UjdPeVJmSWpWbGRwa3YvOFFUaWc4eE1mRG9OcVhNbVBxNnJXcW9LTVd2bVhOSWhOY0xJMVRva0loUUxOd09HVGZaeFhXdEJ0TkpGT3dTUU5sKzNER1Z3aUJWVTQrT3EwRmVKaTVFOFZURTFBQkQwNVI2MFpXVGM0OURTNE0xbk1DQ3ptWlNtN004VVdEU29pR3ZaUHJXckdZZDRiS3ZiaDhvWHUxUG52MnZyZkt1ZDBiejV0MmtUN1RpOEZOUDRMOUlKeS9QZEFVTHRLWkFseHoyRmFod1VadmNJNmFabTYxVUk0cUVKM1hVcEhiM05aY0lCczdIWXJiSGY3R2dGWXZDdjRKVE1sVks1bzllMTB6bXdWcEVvVWJoRDhwV3hWYkNYNnhkS000UkdUaVovMlBhWUVaTWg3dUFIaTF2VFR3TmFlZXFzbVdlb1grZkVSQVk4RGxxOElsWlVWVHJ6aTM1RDdBTmtOOGxpcTZVQ29uQWtoMm1CVUNBK2pOWjRjbnVYdkpEdUZHdkVVbGFXZnpUNU1qR29uc2xrTllSalh0bXdKRVFnYnJtMXhDcjQvQVpNV2JWUEdaM1N2T0g5cS9BYVhxWE5HUmhQK1Z1TDJtdm11OC96djlCbkI1bDE0Y011MU1CU0owNCsrNlFEblR2MWJQcDZvWm5SdWwxT1JURlZrTVVsUzFMc1NoMmgyTDQxVlc0NHdXWGN2UmhKWXdvTGZuN3BDblg3ckIzWnM0b3RPd0M1Njh0YlFzL2VndzhrZmJqdmhwTTA2bk9jL3JXcWJnN0VpY25BeWRtWTdPNG5vbXhOSEp3czRXeFlYRkpGR2w1NTcxNkdoR1JxcWpLSTlrcDN4MCthaVBRcXp0aGFTRktpUjZMbVpBekZ5c0xYZEdiM3JaZklpNlRFVTdqZ2N5MmdlSU50TldRcGFCQ25ZV1RteHFXRHcwd3pnZnJKdnpwaFBob0lzdGN2R0l6dVpPNFVOMXJlcXVQYkYxSFdocUx0Z1BmM1lpd25UQS94SWdLQUE9KX0K"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/wasm4.js"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/wasm4.js.map"),Uint8Array.from(atob("eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FzbTQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl0K3JlYWN0aXZlLWVsZW1lbnRAMi4wLjQvbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9jc3MtdGFnLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXQrcmVhY3RpdmUtZWxlbWVudEAyLjAuNC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbGl0LWh0bWxAMy4xLjQvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpdC1odG1sLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xpdC1lbGVtZW50QDQuMC42L25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saXQtZWxlbWVudC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl0K3JlYWN0aXZlLWVsZW1lbnRAMi4wLjQvbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL2N1c3RvbS1lbGVtZW50LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXQrcmVhY3RpdmUtZWxlbWVudEAyLjAuNC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpdCtyZWFjdGl2ZS1lbGVtZW50QDIuMC40L25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9zdGF0ZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGl0K3JlYWN0aXZlLWVsZW1lbnRAMi4wLjQvbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaXQrcmVhY3RpdmUtZWxlbWVudEAyLjAuNC9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvYmFzZS5qcyIsIi4uLy4uL3NyYy9jb25zdGFudHMudHMiLCIuLi8uLi9zcmMvZGV2a2l0LnRzIiwiLi4vLi4vc3JjL3VpL3V0aWxzLnRzIiwiLi4vLi4vc3JjL3o4NS50cyIsIi4uLy4uL3NyYy9zdGF0ZS50cyIsIi4uLy4uL3NyYy9uZXRwbGF5L3JvbGxiYWNrLW1hbmFnZXIudHMiLCIuLi8uLi9zcmMvbmV0cGxheS9wZWVyLW1hbmFnZXIudHMiLCIuLi8uLi9zcmMvbmV0cGxheS9jaHVua3MudHMiLCIuLi8uLi9zcmMvbmV0cGxheS9iaXRzLnRzIiwiLi4vLi4vc3JjL25ldHBsYXkvbW92aW5nLWF2ZXJhZ2UudHMiLCIuLi8uLi9zcmMvbmV0cGxheS9pbmRleC50cyIsIi4uLy4uL3NyYy9hcHUtd29ya2xldC5taW4uZ2VuZXJhdGVkLmpzP3JhdyIsIi4uLy4uL3NyYy9hcHUudHMiLCIuLi8uLi9zcmMvZnJhbWVidWZmZXIudHMiLCIuLi8uLi9zcmMvd2ViZ2wtY29uc3RhbnRzLnRzIiwiLi4vLi4vc3JjL2NvbXBvc2l0b3IudHMiLCIuLi8uLi9zcmMvcnVudGltZS50cyIsIi4uLy4uL3NyYy91aS9hcHAudHMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbGl0LWh0bWxAMy4xLjQvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvbWFwLmpzIiwiLi4vLi4vc3JjL3VpL21lbnUtb3ZlcmxheS50cyIsIi4uLy4uL3NyYy91aS92aXJ0dWFsLWdhbWVwYWQudHMiLCIuLi8uLi9zcmMvdWkvbm90aWZpY2F0aW9ucy50cyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9saXQtaHRtbEAzLjEuNC9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xpdC1odG1sQDMuMS40L25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL2NsYXNzLW1hcC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9saXQtaHRtbEAzLjEuNC9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlLWhlbHBlcnMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbGl0LWh0bWxAMy4xLjQvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvcmVwZWF0LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xpdC1odG1sQDMuMS40L25vZGVfbW9kdWxlcy9saXQtaHRtbC9hc3luYy1kaXJlY3RpdmUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbGl0LWh0bWxAMy4xLjQvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvcmVmLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX29iamVjdFRvU3RyaW5nLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1N5bWJvbC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL190cmltbWVkRW5kSW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRyaW0uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvTnVtYmVyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbm93LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZGVib3VuY2UuanMiLCIuLi8uLi8uLi8uLi9kZXZ0b29scy93ZWIvZGlzdC93ZWItZGV2dG9vbHMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90aHJvdHRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9Z2xvYmFsVGhpcyxlPXQuU2hhZG93Um9vdCYmKHZvaWQgMD09PXQuU2hhZHlDU1N8fHQuU2hhZHlDU1MubmF0aXZlU2hhZG93KSYmXCJhZG9wdGVkU3R5bGVTaGVldHNcImluIERvY3VtZW50LnByb3RvdHlwZSYmXCJyZXBsYWNlXCJpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZSxzPVN5bWJvbCgpLG89bmV3IFdlYWtNYXA7Y2xhc3Mgbntjb25zdHJ1Y3Rvcih0LGUsbyl7aWYodGhpcy5fJGNzc1Jlc3VsdCQ9ITAsbyE9PXMpdGhyb3cgRXJyb3IoXCJDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLlwiKTt0aGlzLmNzc1RleHQ9dCx0aGlzLnQ9ZX1nZXQgc3R5bGVTaGVldCgpe2xldCB0PXRoaXMubztjb25zdCBzPXRoaXMudDtpZihlJiZ2b2lkIDA9PT10KXtjb25zdCBlPXZvaWQgMCE9PXMmJjE9PT1zLmxlbmd0aDtlJiYodD1vLmdldChzKSksdm9pZCAwPT09dCYmKCh0aGlzLm89dD1uZXcgQ1NTU3R5bGVTaGVldCkucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KSxlJiZvLnNldChzLHQpKX1yZXR1cm4gdH10b1N0cmluZygpe3JldHVybiB0aGlzLmNzc1RleHR9fWNvbnN0IHI9dD0+bmV3IG4oXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDp0K1wiXCIsdm9pZCAwLHMpLGk9KHQsLi4uZSk9Pntjb25zdCBvPTE9PT10Lmxlbmd0aD90WzBdOmUucmVkdWNlKCgoZSxzLG8pPT5lKyh0PT57aWYoITA9PT10Ll8kY3NzUmVzdWx0JClyZXR1cm4gdC5jc3NUZXh0O2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0O3Rocm93IEVycm9yKFwiVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6IFwiK3QrXCIuIFVzZSAndW5zYWZlQ1NTJyB0byBwYXNzIG5vbi1saXRlcmFsIHZhbHVlcywgYnV0IHRha2UgY2FyZSB0byBlbnN1cmUgcGFnZSBzZWN1cml0eS5cIil9KShzKSt0W28rMV0pLHRbMF0pO3JldHVybiBuZXcgbihvLHQscyl9LFM9KHMsbyk9PntpZihlKXMuYWRvcHRlZFN0eWxlU2hlZXRzPW8ubWFwKCh0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD90OnQuc3R5bGVTaGVldCkpO2Vsc2UgZm9yKGNvbnN0IGUgb2Ygbyl7Y29uc3Qgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksbj10LmxpdE5vbmNlO3ZvaWQgMCE9PW4mJm8uc2V0QXR0cmlidXRlKFwibm9uY2VcIixuKSxvLnRleHRDb250ZW50PWUuY3NzVGV4dCxzLmFwcGVuZENoaWxkKG8pfX0sYz1lP3Q9PnQ6dD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/KHQ9PntsZXQgZT1cIlwiO2Zvcihjb25zdCBzIG9mIHQuY3NzUnVsZXMpZSs9cy5jc3NUZXh0O3JldHVybiByKGUpfSkodCk6dDtleHBvcnR7biBhcyBDU1NSZXN1bHQsUyBhcyBhZG9wdFN0eWxlcyxpIGFzIGNzcyxjIGFzIGdldENvbXBhdGlibGVTdHlsZSxlIGFzIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyxyIGFzIHVuc2FmZUNTU307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MtdGFnLmpzLm1hcFxuIiwiaW1wb3J0e2dldENvbXBhdGlibGVTdHlsZSBhcyB0LGFkb3B0U3R5bGVzIGFzIHN9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7ZXhwb3J0e0NTU1Jlc3VsdCxhZG9wdFN0eWxlcyxjc3MsZ2V0Q29tcGF0aWJsZVN0eWxlLHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyx1bnNhZmVDU1N9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdHtpczppLGRlZmluZVByb3BlcnR5OmUsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOnIsZ2V0T3duUHJvcGVydHlOYW1lczpoLGdldE93blByb3BlcnR5U3ltYm9sczpvLGdldFByb3RvdHlwZU9mOm59PU9iamVjdCxhPWdsb2JhbFRoaXMsYz1hLnRydXN0ZWRUeXBlcyxsPWM/Yy5lbXB0eVNjcmlwdDpcIlwiLHA9YS5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsZD0odCxzKT0+dCx1PXt0b0F0dHJpYnV0ZSh0LHMpe3N3aXRjaChzKXtjYXNlIEJvb2xlYW46dD10P2w6bnVsbDticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnQ9bnVsbD09dD90OkpTT04uc3RyaW5naWZ5KHQpfXJldHVybiB0fSxmcm9tQXR0cmlidXRlKHQscyl7bGV0IGk9dDtzd2l0Y2gocyl7Y2FzZSBCb29sZWFuOmk9bnVsbCE9PXQ7YnJlYWs7Y2FzZSBOdW1iZXI6aT1udWxsPT09dD9udWxsOk51bWJlcih0KTticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnRyeXtpPUpTT04ucGFyc2UodCl9Y2F0Y2godCl7aT1udWxsfX1yZXR1cm4gaX19LGY9KHQscyk9PiFpKHQscykseT17YXR0cmlidXRlOiEwLHR5cGU6U3RyaW5nLGNvbnZlcnRlcjp1LHJlZmxlY3Q6ITEsaGFzQ2hhbmdlZDpmfTtTeW1ib2wubWV0YWRhdGE/Pz1TeW1ib2woXCJtZXRhZGF0YVwiKSxhLmxpdFByb3BlcnR5TWV0YWRhdGE/Pz1uZXcgV2Vha01hcDtjbGFzcyBiIGV4dGVuZHMgSFRNTEVsZW1lbnR7c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3RoaXMuXyRFaSgpLCh0aGlzLmw/Pz1bXSkucHVzaCh0KX1zdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpe3JldHVybiB0aGlzLmZpbmFsaXplKCksdGhpcy5fJEVoJiZbLi4udGhpcy5fJEVoLmtleXMoKV19c3RhdGljIGNyZWF0ZVByb3BlcnR5KHQscz15KXtpZihzLnN0YXRlJiYocy5hdHRyaWJ1dGU9ITEpLHRoaXMuXyRFaSgpLHRoaXMuZWxlbWVudFByb3BlcnRpZXMuc2V0KHQscyksIXMubm9BY2Nlc3Nvcil7Y29uc3QgaT1TeW1ib2woKSxyPXRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQsaSxzKTt2b2lkIDAhPT1yJiZlKHRoaXMucHJvdG90eXBlLHQscil9fXN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxzLGkpe2NvbnN0e2dldDplLHNldDpofT1yKHRoaXMucHJvdG90eXBlLHQpPz97Z2V0KCl7cmV0dXJuIHRoaXNbc119LHNldCh0KXt0aGlzW3NdPXR9fTtyZXR1cm57Z2V0KCl7cmV0dXJuIGU/LmNhbGwodGhpcyl9LHNldChzKXtjb25zdCByPWU/LmNhbGwodGhpcyk7aC5jYWxsKHRoaXMscyksdGhpcy5yZXF1ZXN0VXBkYXRlKHQscixpKX0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9fXN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnModCl7cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZ2V0KHQpPz95fXN0YXRpYyBfJEVpKCl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShkKFwiZWxlbWVudFByb3BlcnRpZXNcIikpKXJldHVybjtjb25zdCB0PW4odGhpcyk7dC5maW5hbGl6ZSgpLHZvaWQgMCE9PXQubCYmKHRoaXMubD1bLi4udC5sXSksdGhpcy5lbGVtZW50UHJvcGVydGllcz1uZXcgTWFwKHQuZWxlbWVudFByb3BlcnRpZXMpfXN0YXRpYyBmaW5hbGl6ZSgpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoZChcImZpbmFsaXplZFwiKSkpcmV0dXJuO2lmKHRoaXMuZmluYWxpemVkPSEwLHRoaXMuXyRFaSgpLHRoaXMuaGFzT3duUHJvcGVydHkoZChcInByb3BlcnRpZXNcIikpKXtjb25zdCB0PXRoaXMucHJvcGVydGllcyxzPVsuLi5oKHQpLC4uLm8odCldO2Zvcihjb25zdCBpIG9mIHMpdGhpcy5jcmVhdGVQcm9wZXJ0eShpLHRbaV0pfWNvbnN0IHQ9dGhpc1tTeW1ib2wubWV0YWRhdGFdO2lmKG51bGwhPT10KXtjb25zdCBzPWxpdFByb3BlcnR5TWV0YWRhdGEuZ2V0KHQpO2lmKHZvaWQgMCE9PXMpZm9yKGNvbnN0W3QsaV1vZiBzKXRoaXMuZWxlbWVudFByb3BlcnRpZXMuc2V0KHQsaSl9dGhpcy5fJEVoPW5ldyBNYXA7Zm9yKGNvbnN0W3Qsc11vZiB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzKXtjb25zdCBpPXRoaXMuXyRFdSh0LHMpO3ZvaWQgMCE9PWkmJnRoaXMuXyRFaC5zZXQoaSx0KX10aGlzLmVsZW1lbnRTdHlsZXM9dGhpcy5maW5hbGl6ZVN0eWxlcyh0aGlzLnN0eWxlcyl9c3RhdGljIGZpbmFsaXplU3R5bGVzKHMpe2NvbnN0IGk9W107aWYoQXJyYXkuaXNBcnJheShzKSl7Y29uc3QgZT1uZXcgU2V0KHMuZmxhdCgxLzApLnJldmVyc2UoKSk7Zm9yKGNvbnN0IHMgb2YgZSlpLnVuc2hpZnQodChzKSl9ZWxzZSB2b2lkIDAhPT1zJiZpLnB1c2godChzKSk7cmV0dXJuIGl9c3RhdGljIF8kRXUodCxzKXtjb25zdCBpPXMuYXR0cmlidXRlO3JldHVybiExPT09aT92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIGk/aTpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfWNvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRXA9dm9pZCAwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExLHRoaXMuaGFzVXBkYXRlZD0hMSx0aGlzLl8kRW09bnVsbCx0aGlzLl8kRXYoKX1fJEV2KCl7dGhpcy5fJEVTPW5ldyBQcm9taXNlKCh0PT50aGlzLmVuYWJsZVVwZGF0aW5nPXQpKSx0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLl8kRV8oKSx0aGlzLnJlcXVlc3RVcGRhdGUoKSx0aGlzLmNvbnN0cnVjdG9yLmw/LmZvckVhY2goKHQ9PnQodGhpcykpKX1hZGRDb250cm9sbGVyKHQpeyh0aGlzLl8kRU8/Pz1uZXcgU2V0KS5hZGQodCksdm9pZCAwIT09dGhpcy5yZW5kZXJSb290JiZ0aGlzLmlzQ29ubmVjdGVkJiZ0Lmhvc3RDb25uZWN0ZWQ/LigpfXJlbW92ZUNvbnRyb2xsZXIodCl7dGhpcy5fJEVPPy5kZWxldGUodCl9XyRFXygpe2NvbnN0IHQ9bmV3IE1hcCxzPXRoaXMuY29uc3RydWN0b3IuZWxlbWVudFByb3BlcnRpZXM7Zm9yKGNvbnN0IGkgb2Ygcy5rZXlzKCkpdGhpcy5oYXNPd25Qcm9wZXJ0eShpKSYmKHQuc2V0KGksdGhpc1tpXSksZGVsZXRlIHRoaXNbaV0pO3Quc2l6ZT4wJiYodGhpcy5fJEVwPXQpfWNyZWF0ZVJlbmRlclJvb3QoKXtjb25zdCB0PXRoaXMuc2hhZG93Um9vdD8/dGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7cmV0dXJuIHModCx0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRTdHlsZXMpLHR9Y29ubmVjdGVkQ2FsbGJhY2soKXt0aGlzLnJlbmRlclJvb3Q/Pz10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSx0aGlzLmVuYWJsZVVwZGF0aW5nKCEwKSx0aGlzLl8kRU8/LmZvckVhY2goKHQ9PnQuaG9zdENvbm5lY3RlZD8uKCkpKX1lbmFibGVVcGRhdGluZyh0KXt9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt0aGlzLl8kRU8/LmZvckVhY2goKHQ9PnQuaG9zdERpc2Nvbm5lY3RlZD8uKCkpKX1hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodCxzLGkpe3RoaXMuXyRBSyh0LGkpfV8kRUModCxzKXtjb25zdCBpPXRoaXMuY29uc3RydWN0b3IuZWxlbWVudFByb3BlcnRpZXMuZ2V0KHQpLGU9dGhpcy5jb25zdHJ1Y3Rvci5fJEV1KHQsaSk7aWYodm9pZCAwIT09ZSYmITA9PT1pLnJlZmxlY3Qpe2NvbnN0IHI9KHZvaWQgMCE9PWkuY29udmVydGVyPy50b0F0dHJpYnV0ZT9pLmNvbnZlcnRlcjp1KS50b0F0dHJpYnV0ZShzLGkudHlwZSk7dGhpcy5fJEVtPXQsbnVsbD09cj90aGlzLnJlbW92ZUF0dHJpYnV0ZShlKTp0aGlzLnNldEF0dHJpYnV0ZShlLHIpLHRoaXMuXyRFbT1udWxsfX1fJEFLKHQscyl7Y29uc3QgaT10aGlzLmNvbnN0cnVjdG9yLGU9aS5fJEVoLmdldCh0KTtpZih2b2lkIDAhPT1lJiZ0aGlzLl8kRW0hPT1lKXtjb25zdCB0PWkuZ2V0UHJvcGVydHlPcHRpb25zKGUpLHI9XCJmdW5jdGlvblwiPT10eXBlb2YgdC5jb252ZXJ0ZXI/e2Zyb21BdHRyaWJ1dGU6dC5jb252ZXJ0ZXJ9OnZvaWQgMCE9PXQuY29udmVydGVyPy5mcm9tQXR0cmlidXRlP3QuY29udmVydGVyOnU7dGhpcy5fJEVtPWUsdGhpc1tlXT1yLmZyb21BdHRyaWJ1dGUocyx0LnR5cGUpLHRoaXMuXyRFbT1udWxsfX1yZXF1ZXN0VXBkYXRlKHQscyxpKXtpZih2b2lkIDAhPT10KXtpZihpPz89dGhpcy5jb25zdHJ1Y3Rvci5nZXRQcm9wZXJ0eU9wdGlvbnModCksIShpLmhhc0NoYW5nZWQ/P2YpKHRoaXNbdF0scykpcmV0dXJuO3RoaXMuUCh0LHMsaSl9ITE9PT10aGlzLmlzVXBkYXRlUGVuZGluZyYmKHRoaXMuXyRFUz10aGlzLl8kRVQoKSl9UCh0LHMsaSl7dGhpcy5fJEFMLmhhcyh0KXx8dGhpcy5fJEFMLnNldCh0LHMpLCEwPT09aS5yZWZsZWN0JiZ0aGlzLl8kRW0hPT10JiYodGhpcy5fJEVqPz89bmV3IFNldCkuYWRkKHQpfWFzeW5jIF8kRVQoKXt0aGlzLmlzVXBkYXRlUGVuZGluZz0hMDt0cnl7YXdhaXQgdGhpcy5fJEVTfWNhdGNoKHQpe1Byb21pc2UucmVqZWN0KHQpfWNvbnN0IHQ9dGhpcy5zY2hlZHVsZVVwZGF0ZSgpO3JldHVybiBudWxsIT10JiZhd2FpdCB0LCF0aGlzLmlzVXBkYXRlUGVuZGluZ31zY2hlZHVsZVVwZGF0ZSgpe3JldHVybiB0aGlzLnBlcmZvcm1VcGRhdGUoKX1wZXJmb3JtVXBkYXRlKCl7aWYoIXRoaXMuaXNVcGRhdGVQZW5kaW5nKXJldHVybjtpZighdGhpcy5oYXNVcGRhdGVkKXtpZih0aGlzLnJlbmRlclJvb3Q/Pz10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSx0aGlzLl8kRXApe2Zvcihjb25zdFt0LHNdb2YgdGhpcy5fJEVwKXRoaXNbdF09czt0aGlzLl8kRXA9dm9pZCAwfWNvbnN0IHQ9dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcztpZih0LnNpemU+MClmb3IoY29uc3RbcyxpXW9mIHQpITAhPT1pLndyYXBwZWR8fHRoaXMuXyRBTC5oYXMocyl8fHZvaWQgMD09PXRoaXNbc118fHRoaXMuUChzLHRoaXNbc10saSl9bGV0IHQ9ITE7Y29uc3Qgcz10aGlzLl8kQUw7dHJ5e3Q9dGhpcy5zaG91bGRVcGRhdGUocyksdD8odGhpcy53aWxsVXBkYXRlKHMpLHRoaXMuXyRFTz8uZm9yRWFjaCgodD0+dC5ob3N0VXBkYXRlPy4oKSkpLHRoaXMudXBkYXRlKHMpKTp0aGlzLl8kRVUoKX1jYXRjaChzKXt0aHJvdyB0PSExLHRoaXMuXyRFVSgpLHN9dCYmdGhpcy5fJEFFKHMpfXdpbGxVcGRhdGUodCl7fV8kQUUodCl7dGhpcy5fJEVPPy5mb3JFYWNoKCh0PT50Lmhvc3RVcGRhdGVkPy4oKSkpLHRoaXMuaGFzVXBkYXRlZHx8KHRoaXMuaGFzVXBkYXRlZD0hMCx0aGlzLmZpcnN0VXBkYXRlZCh0KSksdGhpcy51cGRhdGVkKHQpfV8kRVUoKXt0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMX1nZXQgdXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5nZXRVcGRhdGVDb21wbGV0ZSgpfWdldFVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuXyRFU31zaG91bGRVcGRhdGUodCl7cmV0dXJuITB9dXBkYXRlKHQpe3RoaXMuXyRFaiYmPXRoaXMuXyRFai5mb3JFYWNoKCh0PT50aGlzLl8kRUModCx0aGlzW3RdKSkpLHRoaXMuXyRFVSgpfXVwZGF0ZWQodCl7fWZpcnN0VXBkYXRlZCh0KXt9fWIuZWxlbWVudFN0eWxlcz1bXSxiLnNoYWRvd1Jvb3RPcHRpb25zPXttb2RlOlwib3BlblwifSxiW2QoXCJlbGVtZW50UHJvcGVydGllc1wiKV09bmV3IE1hcCxiW2QoXCJmaW5hbGl6ZWRcIildPW5ldyBNYXAscD8uKHtSZWFjdGl2ZUVsZW1lbnQ6Yn0pLChhLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zPz89W10pLnB1c2goXCIyLjAuNFwiKTtleHBvcnR7YiBhcyBSZWFjdGl2ZUVsZW1lbnQsdSBhcyBkZWZhdWx0Q29udmVydGVyLGYgYXMgbm90RXF1YWx9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RpdmUtZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD1nbG9iYWxUaGlzLGk9dC50cnVzdGVkVHlwZXMscz1pP2kuY3JlYXRlUG9saWN5KFwibGl0LWh0bWxcIix7Y3JlYXRlSFRNTDp0PT50fSk6dm9pZCAwLGU9XCIkbGl0JFwiLGg9YGxpdCQke01hdGgucmFuZG9tKCkudG9GaXhlZCg5KS5zbGljZSgyKX0kYCxvPVwiP1wiK2gsbj1gPCR7b30+YCxyPWRvY3VtZW50LGw9KCk9PnIuY3JlYXRlQ29tbWVudChcIlwiKSxjPXQ9Pm51bGw9PT10fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCxhPUFycmF5LmlzQXJyYXksdT10PT5hKHQpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Py5bU3ltYm9sLml0ZXJhdG9yXSxkPVwiWyBcXHRcXG5cXGZcXHJdXCIsZj0vPCg/OighLS18XFwvW15hLXpBLVpdKXwoXFwvP1thLXpBLVpdW14+XFxzXSopfChcXC8/JCkpL2csdj0vLS0+L2csXz0vPi9nLG09UmVnRXhwKGA+fCR7ZH0oPzooW15cXFxcc1wiJz49L10rKSgke2R9Kj0ke2R9Kig/OlteIFxcdFxcblxcZlxcclwiJ1xcYDw+PV18KFwifCcpfCkpfCQpYCxcImdcIikscD0vJy9nLGc9L1wiL2csJD0vXig/OnNjcmlwdHxzdHlsZXx0ZXh0YXJlYXx0aXRsZSkkL2kseT10PT4oaSwuLi5zKT0+KHtfJGxpdFR5cGUkOnQsc3RyaW5nczppLHZhbHVlczpzfSkseD15KDEpLGI9eSgyKSx3PVN5bWJvbC5mb3IoXCJsaXQtbm9DaGFuZ2VcIiksVD1TeW1ib2wuZm9yKFwibGl0LW5vdGhpbmdcIiksQT1uZXcgV2Vha01hcCxFPXIuY3JlYXRlVHJlZVdhbGtlcihyLDEyOSk7ZnVuY3Rpb24gQyh0LGkpe2lmKCFBcnJheS5pc0FycmF5KHQpfHwhdC5oYXNPd25Qcm9wZXJ0eShcInJhd1wiKSl0aHJvdyBFcnJvcihcImludmFsaWQgdGVtcGxhdGUgc3RyaW5ncyBhcnJheVwiKTtyZXR1cm4gdm9pZCAwIT09cz9zLmNyZWF0ZUhUTUwoaSk6aX1jb25zdCBQPSh0LGkpPT57Y29uc3Qgcz10Lmxlbmd0aC0xLG89W107bGV0IHIsbD0yPT09aT9cIjxzdmc+XCI6XCJcIixjPWY7Zm9yKGxldCBpPTA7aTxzO2krKyl7Y29uc3Qgcz10W2ldO2xldCBhLHUsZD0tMSx5PTA7Zm9yKDt5PHMubGVuZ3RoJiYoYy5sYXN0SW5kZXg9eSx1PWMuZXhlYyhzKSxudWxsIT09dSk7KXk9Yy5sYXN0SW5kZXgsYz09PWY/XCIhLS1cIj09PXVbMV0/Yz12OnZvaWQgMCE9PXVbMV0/Yz1fOnZvaWQgMCE9PXVbMl0/KCQudGVzdCh1WzJdKSYmKHI9UmVnRXhwKFwiPC9cIit1WzJdLFwiZ1wiKSksYz1tKTp2b2lkIDAhPT11WzNdJiYoYz1tKTpjPT09bT9cIj5cIj09PXVbMF0/KGM9cj8/ZixkPS0xKTp2b2lkIDA9PT11WzFdP2Q9LTI6KGQ9Yy5sYXN0SW5kZXgtdVsyXS5sZW5ndGgsYT11WzFdLGM9dm9pZCAwPT09dVszXT9tOidcIic9PT11WzNdP2c6cCk6Yz09PWd8fGM9PT1wP2M9bTpjPT09dnx8Yz09PV8/Yz1mOihjPW0scj12b2lkIDApO2NvbnN0IHg9Yz09PW0mJnRbaSsxXS5zdGFydHNXaXRoKFwiLz5cIik/XCIgXCI6XCJcIjtsKz1jPT09Zj9zK246ZD49MD8oby5wdXNoKGEpLHMuc2xpY2UoMCxkKStlK3Muc2xpY2UoZCkraCt4KTpzK2grKC0yPT09ZD9pOngpfXJldHVybltDKHQsbCsodFtzXXx8XCI8Pz5cIikrKDI9PT1pP1wiPC9zdmc+XCI6XCJcIikpLG9dfTtjbGFzcyBWe2NvbnN0cnVjdG9yKHtzdHJpbmdzOnQsXyRsaXRUeXBlJDpzfSxuKXtsZXQgcjt0aGlzLnBhcnRzPVtdO2xldCBjPTAsYT0wO2NvbnN0IHU9dC5sZW5ndGgtMSxkPXRoaXMucGFydHMsW2Ysdl09UCh0LHMpO2lmKHRoaXMuZWw9Vi5jcmVhdGVFbGVtZW50KGYsbiksRS5jdXJyZW50Tm9kZT10aGlzLmVsLmNvbnRlbnQsMj09PXMpe2NvbnN0IHQ9dGhpcy5lbC5jb250ZW50LmZpcnN0Q2hpbGQ7dC5yZXBsYWNlV2l0aCguLi50LmNoaWxkTm9kZXMpfWZvcig7bnVsbCE9PShyPUUubmV4dE5vZGUoKSkmJmQubGVuZ3RoPHU7KXtpZigxPT09ci5ub2RlVHlwZSl7aWYoci5oYXNBdHRyaWJ1dGVzKCkpZm9yKGNvbnN0IHQgb2Ygci5nZXRBdHRyaWJ1dGVOYW1lcygpKWlmKHQuZW5kc1dpdGgoZSkpe2NvbnN0IGk9dlthKytdLHM9ci5nZXRBdHRyaWJ1dGUodCkuc3BsaXQoaCksZT0vKFsuP0BdKT8oLiopLy5leGVjKGkpO2QucHVzaCh7dHlwZToxLGluZGV4OmMsbmFtZTplWzJdLHN0cmluZ3M6cyxjdG9yOlwiLlwiPT09ZVsxXT9rOlwiP1wiPT09ZVsxXT9IOlwiQFwiPT09ZVsxXT9JOlJ9KSxyLnJlbW92ZUF0dHJpYnV0ZSh0KX1lbHNlIHQuc3RhcnRzV2l0aChoKSYmKGQucHVzaCh7dHlwZTo2LGluZGV4OmN9KSxyLnJlbW92ZUF0dHJpYnV0ZSh0KSk7aWYoJC50ZXN0KHIudGFnTmFtZSkpe2NvbnN0IHQ9ci50ZXh0Q29udGVudC5zcGxpdChoKSxzPXQubGVuZ3RoLTE7aWYocz4wKXtyLnRleHRDb250ZW50PWk/aS5lbXB0eVNjcmlwdDpcIlwiO2ZvcihsZXQgaT0wO2k8cztpKyspci5hcHBlbmQodFtpXSxsKCkpLEUubmV4dE5vZGUoKSxkLnB1c2goe3R5cGU6MixpbmRleDorK2N9KTtyLmFwcGVuZCh0W3NdLGwoKSl9fX1lbHNlIGlmKDg9PT1yLm5vZGVUeXBlKWlmKHIuZGF0YT09PW8pZC5wdXNoKHt0eXBlOjIsaW5kZXg6Y30pO2Vsc2V7bGV0IHQ9LTE7Zm9yKDstMSE9PSh0PXIuZGF0YS5pbmRleE9mKGgsdCsxKSk7KWQucHVzaCh7dHlwZTo3LGluZGV4OmN9KSx0Kz1oLmxlbmd0aC0xfWMrK319c3RhdGljIGNyZWF0ZUVsZW1lbnQodCxpKXtjb25zdCBzPXIuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO3JldHVybiBzLmlubmVySFRNTD10LHN9fWZ1bmN0aW9uIE4odCxpLHM9dCxlKXtpZihpPT09dylyZXR1cm4gaTtsZXQgaD12b2lkIDAhPT1lP3MuXyRDbz8uW2VdOnMuXyRDbDtjb25zdCBvPWMoaSk/dm9pZCAwOmkuXyRsaXREaXJlY3RpdmUkO3JldHVybiBoPy5jb25zdHJ1Y3RvciE9PW8mJihoPy5fJEFPPy4oITEpLHZvaWQgMD09PW8/aD12b2lkIDA6KGg9bmV3IG8odCksaC5fJEFUKHQscyxlKSksdm9pZCAwIT09ZT8ocy5fJENvPz89W10pW2VdPWg6cy5fJENsPWgpLHZvaWQgMCE9PWgmJihpPU4odCxoLl8kQVModCxpLnZhbHVlcyksaCxlKSksaX1jbGFzcyBTe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy5fJEFWPVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9dSh0KXtjb25zdHtlbDp7Y29udGVudDppfSxwYXJ0czpzfT10aGlzLl8kQUQsZT0odD8uY3JlYXRpb25TY29wZT8/cikuaW1wb3J0Tm9kZShpLCEwKTtFLmN1cnJlbnROb2RlPWU7bGV0IGg9RS5uZXh0Tm9kZSgpLG89MCxuPTAsbD1zWzBdO2Zvcig7dm9pZCAwIT09bDspe2lmKG89PT1sLmluZGV4KXtsZXQgaTsyPT09bC50eXBlP2k9bmV3IE0oaCxoLm5leHRTaWJsaW5nLHRoaXMsdCk6MT09PWwudHlwZT9pPW5ldyBsLmN0b3IoaCxsLm5hbWUsbC5zdHJpbmdzLHRoaXMsdCk6Nj09PWwudHlwZSYmKGk9bmV3IEwoaCx0aGlzLHQpKSx0aGlzLl8kQVYucHVzaChpKSxsPXNbKytuXX1vIT09bD8uaW5kZXgmJihoPUUubmV4dE5vZGUoKSxvKyspfXJldHVybiBFLmN1cnJlbnROb2RlPXIsZX1wKHQpe2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy5fJEFWKXZvaWQgMCE9PXMmJih2b2lkIDAhPT1zLnN0cmluZ3M/KHMuXyRBSSh0LHMsaSksaSs9cy5zdHJpbmdzLmxlbmd0aC0yKTpzLl8kQUkodFtpXSkpLGkrK319Y2xhc3MgTXtnZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0/Ll8kQVU/P3RoaXMuXyRDdn1jb25zdHJ1Y3Rvcih0LGkscyxlKXt0aGlzLnR5cGU9Mix0aGlzLl8kQUg9VCx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBQT10LHRoaXMuXyRBQj1pLHRoaXMuXyRBTT1zLHRoaXMub3B0aW9ucz1lLHRoaXMuXyRDdj1lPy5pc0Nvbm5lY3RlZD8/ITB9Z2V0IHBhcmVudE5vZGUoKXtsZXQgdD10aGlzLl8kQUEucGFyZW50Tm9kZTtjb25zdCBpPXRoaXMuXyRBTTtyZXR1cm4gdm9pZCAwIT09aSYmMTE9PT10Py5ub2RlVHlwZSYmKHQ9aS5wYXJlbnROb2RlKSx0fWdldCBzdGFydE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFBfWdldCBlbmROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQn1fJEFJKHQsaT10aGlzKXt0PU4odGhpcyx0LGkpLGModCk/dD09PVR8fG51bGw9PXR8fFwiXCI9PT10Pyh0aGlzLl8kQUghPT1UJiZ0aGlzLl8kQVIoKSx0aGlzLl8kQUg9VCk6dCE9PXRoaXMuXyRBSCYmdCE9PXcmJnRoaXMuXyh0KTp2b2lkIDAhPT10Ll8kbGl0VHlwZSQ/dGhpcy4kKHQpOnZvaWQgMCE9PXQubm9kZVR5cGU/dGhpcy5UKHQpOnUodCk/dGhpcy5rKHQpOnRoaXMuXyh0KX1TKHQpe3JldHVybiB0aGlzLl8kQUEucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCx0aGlzLl8kQUIpfVQodCl7dGhpcy5fJEFIIT09dCYmKHRoaXMuXyRBUigpLHRoaXMuXyRBSD10aGlzLlModCkpfV8odCl7dGhpcy5fJEFIIT09VCYmYyh0aGlzLl8kQUgpP3RoaXMuXyRBQS5uZXh0U2libGluZy5kYXRhPXQ6dGhpcy5UKHIuY3JlYXRlVGV4dE5vZGUodCkpLHRoaXMuXyRBSD10fSQodCl7Y29uc3R7dmFsdWVzOmksXyRsaXRUeXBlJDpzfT10LGU9XCJudW1iZXJcIj09dHlwZW9mIHM/dGhpcy5fJEFDKHQpOih2b2lkIDA9PT1zLmVsJiYocy5lbD1WLmNyZWF0ZUVsZW1lbnQoQyhzLmgscy5oWzBdKSx0aGlzLm9wdGlvbnMpKSxzKTtpZih0aGlzLl8kQUg/Ll8kQUQ9PT1lKXRoaXMuXyRBSC5wKGkpO2Vsc2V7Y29uc3QgdD1uZXcgUyhlLHRoaXMpLHM9dC51KHRoaXMub3B0aW9ucyk7dC5wKGkpLHRoaXMuVChzKSx0aGlzLl8kQUg9dH19XyRBQyh0KXtsZXQgaT1BLmdldCh0LnN0cmluZ3MpO3JldHVybiB2b2lkIDA9PT1pJiZBLnNldCh0LnN0cmluZ3MsaT1uZXcgVih0KSksaX1rKHQpe2EodGhpcy5fJEFIKXx8KHRoaXMuXyRBSD1bXSx0aGlzLl8kQVIoKSk7Y29uc3QgaT10aGlzLl8kQUg7bGV0IHMsZT0wO2Zvcihjb25zdCBoIG9mIHQpZT09PWkubGVuZ3RoP2kucHVzaChzPW5ldyBNKHRoaXMuUyhsKCkpLHRoaXMuUyhsKCkpLHRoaXMsdGhpcy5vcHRpb25zKSk6cz1pW2VdLHMuXyRBSShoKSxlKys7ZTxpLmxlbmd0aCYmKHRoaXMuXyRBUihzJiZzLl8kQUIubmV4dFNpYmxpbmcsZSksaS5sZW5ndGg9ZSl9XyRBUih0PXRoaXMuXyRBQS5uZXh0U2libGluZyxpKXtmb3IodGhpcy5fJEFQPy4oITEsITAsaSk7dCYmdCE9PXRoaXMuXyRBQjspe2NvbnN0IGk9dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9aX19c2V0Q29ubmVjdGVkKHQpe3ZvaWQgMD09PXRoaXMuXyRBTSYmKHRoaXMuXyRDdj10LHRoaXMuXyRBUD8uKHQpKX19Y2xhc3MgUntnZXQgdGFnTmFtZSgpe3JldHVybiB0aGlzLmVsZW1lbnQudGFnTmFtZX1nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1jb25zdHJ1Y3Rvcih0LGkscyxlLGgpe3RoaXMudHlwZT0xLHRoaXMuXyRBSD1ULHRoaXMuXyRBTj12b2lkIDAsdGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWksdGhpcy5fJEFNPWUsdGhpcy5vcHRpb25zPWgscy5sZW5ndGg+Mnx8XCJcIiE9PXNbMF18fFwiXCIhPT1zWzFdPyh0aGlzLl8kQUg9QXJyYXkocy5sZW5ndGgtMSkuZmlsbChuZXcgU3RyaW5nKSx0aGlzLnN0cmluZ3M9cyk6dGhpcy5fJEFIPVR9XyRBSSh0LGk9dGhpcyxzLGUpe2NvbnN0IGg9dGhpcy5zdHJpbmdzO2xldCBvPSExO2lmKHZvaWQgMD09PWgpdD1OKHRoaXMsdCxpLDApLG89IWModCl8fHQhPT10aGlzLl8kQUgmJnQhPT13LG8mJih0aGlzLl8kQUg9dCk7ZWxzZXtjb25zdCBlPXQ7bGV0IG4scjtmb3IodD1oWzBdLG49MDtuPGgubGVuZ3RoLTE7bisrKXI9Tih0aGlzLGVbcytuXSxpLG4pLHI9PT13JiYocj10aGlzLl8kQUhbbl0pLG98fD0hYyhyKXx8ciE9PXRoaXMuXyRBSFtuXSxyPT09VD90PVQ6dCE9PVQmJih0Kz0ocj8/XCJcIikraFtuKzFdKSx0aGlzLl8kQUhbbl09cn1vJiYhZSYmdGhpcy5qKHQpfWoodCl7dD09PVQ/dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpOnRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLHQ/P1wiXCIpfX1jbGFzcyBrIGV4dGVuZHMgUntjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTN9aih0KXt0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXT10PT09VD92b2lkIDA6dH19Y2xhc3MgSCBleHRlbmRzIFJ7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT00fWoodCl7dGhpcy5lbGVtZW50LnRvZ2dsZUF0dHJpYnV0ZSh0aGlzLm5hbWUsISF0JiZ0IT09VCl9fWNsYXNzIEkgZXh0ZW5kcyBSe2NvbnN0cnVjdG9yKHQsaSxzLGUsaCl7c3VwZXIodCxpLHMsZSxoKSx0aGlzLnR5cGU9NX1fJEFJKHQsaT10aGlzKXtpZigodD1OKHRoaXMsdCxpLDApPz9UKT09PXcpcmV0dXJuO2NvbnN0IHM9dGhpcy5fJEFILGU9dD09PVQmJnMhPT1UfHx0LmNhcHR1cmUhPT1zLmNhcHR1cmV8fHQub25jZSE9PXMub25jZXx8dC5wYXNzaXZlIT09cy5wYXNzaXZlLGg9dCE9PVQmJihzPT09VHx8ZSk7ZSYmdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMscyksaCYmdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsdCksdGhpcy5fJEFIPXR9aGFuZGxlRXZlbnQodCl7XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fJEFIP3RoaXMuXyRBSC5jYWxsKHRoaXMub3B0aW9ucz8uaG9zdD8/dGhpcy5lbGVtZW50LHQpOnRoaXMuXyRBSC5oYW5kbGVFdmVudCh0KX19Y2xhc3MgTHtjb25zdHJ1Y3Rvcih0LGkscyl7dGhpcy5lbGVtZW50PXQsdGhpcy50eXBlPTYsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQU09aSx0aGlzLm9wdGlvbnM9c31nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQpe04odGhpcyx0KX19Y29uc3Qgej17UDplLEE6aCxDOm8sTToxLEw6UCxSOlMsRDp1LFY6TixJOk0sSDpSLE46SCxVOkksQjprLEY6TH0sWj10LmxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQ7Wj8uKFYsTSksKHQubGl0SHRtbFZlcnNpb25zPz89W10pLnB1c2goXCIzLjEuNFwiKTtjb25zdCBqPSh0LGkscyk9Pntjb25zdCBlPXM/LnJlbmRlckJlZm9yZT8/aTtsZXQgaD1lLl8kbGl0UGFydCQ7aWYodm9pZCAwPT09aCl7Y29uc3QgdD1zPy5yZW5kZXJCZWZvcmU/P251bGw7ZS5fJGxpdFBhcnQkPWg9bmV3IE0oaS5pbnNlcnRCZWZvcmUobCgpLHQpLHQsdm9pZCAwLHM/P3t9KX1yZXR1cm4gaC5fJEFJKHQpLGh9O2V4cG9ydHt6IGFzIF8kTEgseCBhcyBodG1sLHcgYXMgbm9DaGFuZ2UsVCBhcyBub3RoaW5nLGogYXMgcmVuZGVyLGIgYXMgc3ZnfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1odG1sLmpzLm1hcFxuIiwiaW1wb3J0e1JlYWN0aXZlRWxlbWVudCBhcyB0fWZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtpbXBvcnR7cmVuZGVyIGFzIGUsbm9DaGFuZ2UgYXMgaX1mcm9tXCJsaXQtaHRtbFwiO2V4cG9ydCpmcm9tXCJsaXQtaHRtbFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY2xhc3MgcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMucmVuZGVyT3B0aW9ucz17aG9zdDp0aGlzfSx0aGlzLl8kRG89dm9pZCAwfWNyZWF0ZVJlbmRlclJvb3QoKXtjb25zdCB0PXN1cGVyLmNyZWF0ZVJlbmRlclJvb3QoKTtyZXR1cm4gdGhpcy5yZW5kZXJPcHRpb25zLnJlbmRlckJlZm9yZT8/PXQuZmlyc3RDaGlsZCx0fXVwZGF0ZSh0KXtjb25zdCBpPXRoaXMucmVuZGVyKCk7dGhpcy5oYXNVcGRhdGVkfHwodGhpcy5yZW5kZXJPcHRpb25zLmlzQ29ubmVjdGVkPXRoaXMuaXNDb25uZWN0ZWQpLHN1cGVyLnVwZGF0ZSh0KSx0aGlzLl8kRG89ZShpLHRoaXMucmVuZGVyUm9vdCx0aGlzLnJlbmRlck9wdGlvbnMpfWNvbm5lY3RlZENhbGxiYWNrKCl7c3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKSx0aGlzLl8kRG8/LnNldENvbm5lY3RlZCghMCl9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXtzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpLHRoaXMuXyREbz8uc2V0Q29ubmVjdGVkKCExKX1yZW5kZXIoKXtyZXR1cm4gaX19cy5fJGxpdEVsZW1lbnQkPSEwLHNbKFwiZmluYWxpemVkXCIsXCJmaW5hbGl6ZWRcIildPSEwLGdsb2JhbFRoaXMubGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0Py4oe0xpdEVsZW1lbnQ6c30pO2NvbnN0IHI9Z2xvYmFsVGhpcy5saXRFbGVtZW50UG9seWZpbGxTdXBwb3J0O3I/Lih7TGl0RWxlbWVudDpzfSk7Y29uc3Qgbz17XyRBSzoodCxlLGkpPT57dC5fJEFLKGUsaSl9LF8kQUw6dD0+dC5fJEFMfTsoZ2xvYmFsVGhpcy5saXRFbGVtZW50VmVyc2lvbnM/Pz1bXSkucHVzaChcIjQuMC42XCIpO2V4cG9ydHtzIGFzIExpdEVsZW1lbnQsbyBhcyBfJExFfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PXQ9PihlLG8pPT57dm9pZCAwIT09bz9vLmFkZEluaXRpYWxpemVyKCgoKT0+e2N1c3RvbUVsZW1lbnRzLmRlZmluZSh0LGUpfSkpOmN1c3RvbUVsZW1lbnRzLmRlZmluZSh0LGUpfTtleHBvcnR7dCBhcyBjdXN0b21FbGVtZW50fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1c3RvbS1lbGVtZW50LmpzLm1hcFxuIiwiaW1wb3J0e2RlZmF1bHRDb252ZXJ0ZXIgYXMgdCxub3RFcXVhbCBhcyBlfWZyb21cIi4uL3JlYWN0aXZlLWVsZW1lbnQuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0IG89e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6dCxyZWZsZWN0OiExLGhhc0NoYW5nZWQ6ZX0scj0odD1vLGUscik9Pntjb25zdHtraW5kOm4sbWV0YWRhdGE6aX09cjtsZXQgcz1nbG9iYWxUaGlzLmxpdFByb3BlcnR5TWV0YWRhdGEuZ2V0KGkpO2lmKHZvaWQgMD09PXMmJmdsb2JhbFRoaXMubGl0UHJvcGVydHlNZXRhZGF0YS5zZXQoaSxzPW5ldyBNYXApLHMuc2V0KHIubmFtZSx0KSxcImFjY2Vzc29yXCI9PT1uKXtjb25zdHtuYW1lOm99PXI7cmV0dXJue3NldChyKXtjb25zdCBuPWUuZ2V0LmNhbGwodGhpcyk7ZS5zZXQuY2FsbCh0aGlzLHIpLHRoaXMucmVxdWVzdFVwZGF0ZShvLG4sdCl9LGluaXQoZSl7cmV0dXJuIHZvaWQgMCE9PWUmJnRoaXMuUChvLHZvaWQgMCx0KSxlfX19aWYoXCJzZXR0ZXJcIj09PW4pe2NvbnN0e25hbWU6b309cjtyZXR1cm4gZnVuY3Rpb24ocil7Y29uc3Qgbj10aGlzW29dO2UuY2FsbCh0aGlzLHIpLHRoaXMucmVxdWVzdFVwZGF0ZShvLG4sdCl9fXRocm93IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGVjb3JhdG9yIGxvY2F0aW9uOiBcIituKX07ZnVuY3Rpb24gbih0KXtyZXR1cm4oZSxvKT0+XCJvYmplY3RcIj09dHlwZW9mIG8/cih0LGUsbyk6KCh0LGUsbyk9Pntjb25zdCByPWUuaGFzT3duUHJvcGVydHkobyk7cmV0dXJuIGUuY29uc3RydWN0b3IuY3JlYXRlUHJvcGVydHkobyxyP3suLi50LHdyYXBwZWQ6ITB9OnQpLHI/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG8pOnZvaWQgMH0pKHQsZSxvKX1leHBvcnR7biBhcyBwcm9wZXJ0eSxyIGFzIHN0YW5kYXJkUHJvcGVydHl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGVydHkuanMubWFwXG4iLCJpbXBvcnR7cHJvcGVydHkgYXMgdH1mcm9tXCIuL3Byb3BlcnR5LmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiByKHIpe3JldHVybiB0KHsuLi5yLHN0YXRlOiEwLGF0dHJpYnV0ZTohMX0pfWV4cG9ydHtyIGFzIHN0YXRlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLmpzLm1hcFxuIiwiaW1wb3J0e2Rlc2MgYXMgdH1mcm9tXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2Z1bmN0aW9uIGUoZSxyKXtyZXR1cm4obixzLGkpPT57Y29uc3Qgbz10PT50LnJlbmRlclJvb3Q/LnF1ZXJ5U2VsZWN0b3IoZSk/P251bGw7aWYocil7Y29uc3R7Z2V0OmUsc2V0OnJ9PVwib2JqZWN0XCI9PXR5cGVvZiBzP246aT8/KCgpPT57Y29uc3QgdD1TeW1ib2woKTtyZXR1cm57Z2V0KCl7cmV0dXJuIHRoaXNbdF19LHNldChlKXt0aGlzW3RdPWV9fX0pKCk7cmV0dXJuIHQobixzLHtnZXQoKXtsZXQgdD1lLmNhbGwodGhpcyk7cmV0dXJuIHZvaWQgMD09PXQmJih0PW8odGhpcyksKG51bGwhPT10fHx0aGlzLmhhc1VwZGF0ZWQpJiZyLmNhbGwodGhpcyx0KSksdH19KX1yZXR1cm4gdChuLHMse2dldCgpe3JldHVybiBvKHRoaXMpfX0pfX1leHBvcnR7ZSBhcyBxdWVyeX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgZT0oZSx0LGMpPT4oYy5jb25maWd1cmFibGU9ITAsYy5lbnVtZXJhYmxlPSEwLFJlZmxlY3QuZGVjb3JhdGUmJlwib2JqZWN0XCIhPXR5cGVvZiB0JiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LGMpLGMpO2V4cG9ydHtlIGFzIGRlc2N9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXBcbiIsImV4cG9ydCBjb25zdCBHQU1FREVWX01PREUgPSBXQVNNNF9HQU1FREVWX01PREU7XG5leHBvcnQgY29uc3QgV0lEVEggPSAxNjA7XG5leHBvcnQgY29uc3QgSEVJR0hUID0gMTYwO1xuXG5leHBvcnQgY29uc3QgU1RPUkFHRV9TSVpFID0gMTAyNDtcblxuZXhwb3J0IGNvbnN0IENSQVNIX1RJVExFID0gXCJXQVNNLTRcIjtcblxuLy8gRGVmYXVsdCBwYWxldHRlXG5leHBvcnQgY29uc3QgQ09MT1JTID0gW1xuICAgIDB4ZTBmOGNmLFxuICAgIDB4ODZjMDZjLFxuICAgIDB4MzA2ODUwLFxuICAgIDB4MDcxODIxLFxuXTtcblxuLy8gTWVtb3J5IGxheW91dFxuZXhwb3J0IGNvbnN0IEFERFJfUEFMRVRURSA9IDB4MDQ7XG5leHBvcnQgY29uc3QgQUREUl9EUkFXX0NPTE9SUyA9IDB4MTQ7XG5leHBvcnQgY29uc3QgQUREUl9HQU1FUEFEMSA9IDB4MTY7XG5leHBvcnQgY29uc3QgQUREUl9HQU1FUEFEMiA9IDB4MTc7XG5leHBvcnQgY29uc3QgQUREUl9HQU1FUEFEMyA9IDB4MTg7XG5leHBvcnQgY29uc3QgQUREUl9HQU1FUEFENCA9IDB4MTk7XG5leHBvcnQgY29uc3QgQUREUl9NT1VTRV9YID0gMHgxYTtcbmV4cG9ydCBjb25zdCBBRERSX01PVVNFX1kgPSAweDFjO1xuZXhwb3J0IGNvbnN0IEFERFJfTU9VU0VfQlVUVE9OUyA9IDB4MWU7XG5leHBvcnQgY29uc3QgQUREUl9TWVNURU1fRkxBR1MgPSAweDFmO1xuZXhwb3J0IGNvbnN0IEFERFJfTkVUUExBWSA9IDB4MjA7XG5leHBvcnQgY29uc3QgQUREUl9GUkFNRUJVRkZFUiA9IDB4YTA7XG5cbmV4cG9ydCBjb25zdCBCVVRUT05fWCA9IDE7XG5leHBvcnQgY29uc3QgQlVUVE9OX1ogPSAyO1xuLy8gZXhwb3J0IGNvbnN0IEJVVFRPTl9SRVNFUlZFRCA9IDQ7XG4vLyBleHBvcnQgY29uc3QgQlVUVE9OX1JFU0VSVkVEID0gODtcbmV4cG9ydCBjb25zdCBCVVRUT05fTEVGVCA9IDE2O1xuZXhwb3J0IGNvbnN0IEJVVFRPTl9SSUdIVCA9IDMyO1xuZXhwb3J0IGNvbnN0IEJVVFRPTl9VUCA9IDY0O1xuZXhwb3J0IGNvbnN0IEJVVFRPTl9ET1dOID0gMTI4O1xuXG5leHBvcnQgY29uc3QgTU9VU0VfTEVGVCA9IDE7XG5leHBvcnQgY29uc3QgTU9VU0VfUklHSFQgPSAyO1xuZXhwb3J0IGNvbnN0IE1PVVNFX01JRERMRSA9IDQ7XG5cbmV4cG9ydCBjb25zdCBTWVNURU1fUFJFU0VSVkVfRlJBTUVCVUZGRVIgPSAxO1xuZXhwb3J0IGNvbnN0IFNZU1RFTV9ISURFX0dBTUVQQURfT1ZFUkxBWSA9IDI7XG5cbi8vIEZsYWdzIGZvciBSdW50aW1lLnBhdXNlU3RhdGVcbmV4cG9ydCBjb25zdCBQQVVTRV9DUkFTSEVEID0gMTtcbmV4cG9ydCBjb25zdCBQQVVTRV9SRUJPT1RJTkcgPSAyO1xuXG5leHBvcnQgY29uc3QgRk9OVCA9IFVpbnQ4QXJyYXkub2YoXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGM3LCAweGM3LCAweGM3LCAweGNmLCAweGNmLCAweGZmLCAweGNmLCAweGZmLFxuICAgIDB4OTMsIDB4OTMsIDB4OTMsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHg5MywgMHgwMSwgMHg5MywgMHg5MywgMHg5MywgMHgwMSwgMHg5MywgMHhmZixcbiAgICAweGVmLCAweDgzLCAweDJmLCAweDgzLCAweGU5LCAweDAzLCAweGVmLCAweGZmLFxuICAgIDB4OWQsIDB4NWIsIDB4MzcsIDB4ZWYsIDB4ZDksIDB4YjUsIDB4NzMsIDB4ZmYsXG4gICAgMHg4ZiwgMHgyNywgMHgyNywgMHg4ZiwgMHgyNSwgMHgzMywgMHg4MSwgMHhmZixcbiAgICAweGNmLCAweGNmLCAweGNmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZjMsIDB4ZTcsIDB4Y2YsIDB4Y2YsIDB4Y2YsIDB4ZTcsIDB4ZjMsIDB4ZmYsXG4gICAgMHg5ZiwgMHhjZiwgMHhlNywgMHhlNywgMHhlNywgMHhjZiwgMHg5ZiwgMHhmZixcbiAgICAweGZmLCAweDkzLCAweGM3LCAweDAxLCAweGM3LCAweDkzLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZTcsIDB4ZTcsIDB4ODEsIDB4ZTcsIDB4ZTcsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhjZiwgMHhjZiwgMHg5ZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweDgxLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4Y2YsIDB4Y2YsIDB4ZmYsXG4gICAgMHhmZCwgMHhmYiwgMHhmNywgMHhlZiwgMHhkZiwgMHhiZiwgMHg3ZiwgMHhmZixcbiAgICAweGM3LCAweGIzLCAweDM5LCAweDM5LCAweDM5LCAweDliLCAweGM3LCAweGZmLFxuICAgIDB4ZTcsIDB4YzcsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ODEsIDB4ZmYsXG4gICAgMHg4MywgMHgzOSwgMHhmMSwgMHhjMywgMHg4NywgMHgxZiwgMHgwMSwgMHhmZixcbiAgICAweDgxLCAweGYzLCAweGU3LCAweGMzLCAweGY5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4ZTMsIDB4YzMsIDB4OTMsIDB4MzMsIDB4MDEsIDB4ZjMsIDB4ZjMsIDB4ZmYsXG4gICAgMHgwMywgMHgzZiwgMHgwMywgMHhmOSwgMHhmOSwgMHgzOSwgMHg4MywgMHhmZixcbiAgICAweGMzLCAweDlmLCAweDNmLCAweDAzLCAweDM5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4MDEsIDB4MzksIDB4ZjMsIDB4ZTcsIDB4Y2YsIDB4Y2YsIDB4Y2YsIDB4ZmYsXG4gICAgMHg4NywgMHgzYiwgMHgxYiwgMHg4NywgMHg2MSwgMHg3OSwgMHg4MywgMHhmZixcbiAgICAweDgzLCAweDM5LCAweDM5LCAweDgxLCAweGY5LCAweGYzLCAweDg3LCAweGZmLFxuICAgIDB4ZmYsIDB4Y2YsIDB4Y2YsIDB4ZmYsIDB4Y2YsIDB4Y2YsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhjZiwgMHhjZiwgMHhmZiwgMHhjZiwgMHhjZiwgMHg5ZiwgMHhmZixcbiAgICAweGYzLCAweGU3LCAweGNmLCAweDlmLCAweGNmLCAweGU3LCAweGYzLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4MDEsIDB4ZmYsIDB4MDEsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHg5ZiwgMHhjZiwgMHhlNywgMHhmMywgMHhlNywgMHhjZiwgMHg5ZiwgMHhmZixcbiAgICAweDgzLCAweDAxLCAweDM5LCAweGYzLCAweGM3LCAweGZmLCAweGM3LCAweGZmLFxuICAgIDB4ODMsIDB4N2QsIDB4NDUsIDB4NTUsIDB4NDEsIDB4N2YsIDB4ODMsIDB4ZmYsXG4gICAgMHhjNywgMHg5MywgMHgzOSwgMHgzOSwgMHgwMSwgMHgzOSwgMHgzOSwgMHhmZixcbiAgICAweDAzLCAweDM5LCAweDM5LCAweDAzLCAweDM5LCAweDM5LCAweDAzLCAweGZmLFxuICAgIDB4YzMsIDB4OTksIDB4M2YsIDB4M2YsIDB4M2YsIDB4OTksIDB4YzMsIDB4ZmYsXG4gICAgMHgwNywgMHgzMywgMHgzOSwgMHgzOSwgMHgzOSwgMHgzMywgMHgwNywgMHhmZixcbiAgICAweDAxLCAweDNmLCAweDNmLCAweDAzLCAweDNmLCAweDNmLCAweDAxLCAweGZmLFxuICAgIDB4MDEsIDB4M2YsIDB4M2YsIDB4MDMsIDB4M2YsIDB4M2YsIDB4M2YsIDB4ZmYsXG4gICAgMHhjMSwgMHg5ZiwgMHgzZiwgMHgzMSwgMHgzOSwgMHg5OSwgMHhjMSwgMHhmZixcbiAgICAweDM5LCAweDM5LCAweDM5LCAweDAxLCAweDM5LCAweDM5LCAweDM5LCAweGZmLFxuICAgIDB4ODEsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ODEsIDB4ZmYsXG4gICAgMHhmOSwgMHhmOSwgMHhmOSwgMHhmOSwgMHhmOSwgMHgzOSwgMHg4MywgMHhmZixcbiAgICAweDM5LCAweDMzLCAweDI3LCAweDBmLCAweDA3LCAweDIzLCAweDMxLCAweGZmLFxuICAgIDB4OWYsIDB4OWYsIDB4OWYsIDB4OWYsIDB4OWYsIDB4OWYsIDB4ODEsIDB4ZmYsXG4gICAgMHgzOSwgMHgxMSwgMHgwMSwgMHgwMSwgMHgyOSwgMHgzOSwgMHgzOSwgMHhmZixcbiAgICAweDM5LCAweDE5LCAweDA5LCAweDAxLCAweDIxLCAweDMxLCAweDM5LCAweGZmLFxuICAgIDB4ODMsIDB4MzksIDB4MzksIDB4MzksIDB4MzksIDB4MzksIDB4ODMsIDB4ZmYsXG4gICAgMHgwMywgMHgzOSwgMHgzOSwgMHgzOSwgMHgwMywgMHgzZiwgMHgzZiwgMHhmZixcbiAgICAweDgzLCAweDM5LCAweDM5LCAweDM5LCAweDIxLCAweDMzLCAweDg1LCAweGZmLFxuICAgIDB4MDMsIDB4MzksIDB4MzksIDB4MzEsIDB4MDcsIDB4MjMsIDB4MzEsIDB4ZmYsXG4gICAgMHg4NywgMHgzMywgMHgzZiwgMHg4MywgMHhmOSwgMHgzOSwgMHg4MywgMHhmZixcbiAgICAweDgxLCAweGU3LCAweGU3LCAweGU3LCAweGU3LCAweGU3LCAweGU3LCAweGZmLFxuICAgIDB4MzksIDB4MzksIDB4MzksIDB4MzksIDB4MzksIDB4MzksIDB4ODMsIDB4ZmYsXG4gICAgMHgzOSwgMHgzOSwgMHgzOSwgMHgxMSwgMHg4MywgMHhjNywgMHhlZiwgMHhmZixcbiAgICAweDM5LCAweDM5LCAweDI5LCAweDAxLCAweDAxLCAweDExLCAweDM5LCAweGZmLFxuICAgIDB4MzksIDB4MTEsIDB4ODMsIDB4YzcsIDB4ODMsIDB4MTEsIDB4MzksIDB4ZmYsXG4gICAgMHg5OSwgMHg5OSwgMHg5OSwgMHhjMywgMHhlNywgMHhlNywgMHhlNywgMHhmZixcbiAgICAweDAxLCAweGYxLCAweGUzLCAweGM3LCAweDhmLCAweDFmLCAweDAxLCAweGZmLFxuICAgIDB4YzMsIDB4Y2YsIDB4Y2YsIDB4Y2YsIDB4Y2YsIDB4Y2YsIDB4YzMsIDB4ZmYsXG4gICAgMHg3ZiwgMHhiZiwgMHhkZiwgMHhlZiwgMHhmNywgMHhmYiwgMHhmZCwgMHhmZixcbiAgICAweDg3LCAweGU3LCAweGU3LCAweGU3LCAweGU3LCAweGU3LCAweDg3LCAweGZmLFxuICAgIDB4YzcsIDB4OTMsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHgwMSxcbiAgICAweGVmLCAweGY3LCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ODMsIDB4ZjksIDB4ODEsIDB4MzksIDB4ODEsIDB4ZmYsXG4gICAgMHgzZiwgMHgzZiwgMHgwMywgMHgzOSwgMHgzOSwgMHgzOSwgMHg4MywgMHhmZixcbiAgICAweGZmLCAweGZmLCAweDgxLCAweDNmLCAweDNmLCAweDNmLCAweDgxLCAweGZmLFxuICAgIDB4ZjksIDB4ZjksIDB4ODEsIDB4MzksIDB4MzksIDB4MzksIDB4ODEsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHg4MywgMHgzOSwgMHgwMSwgMHgzZiwgMHg4MywgMHhmZixcbiAgICAweGYxLCAweGU3LCAweDgxLCAweGU3LCAweGU3LCAweGU3LCAweGU3LCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ODEsIDB4MzksIDB4MzksIDB4ODEsIDB4ZjksIDB4ODMsXG4gICAgMHgzZiwgMHgzZiwgMHgwMywgMHgzOSwgMHgzOSwgMHgzOSwgMHgzOSwgMHhmZixcbiAgICAweGU3LCAweGZmLCAweGM3LCAweGU3LCAweGU3LCAweGU3LCAweDgxLCAweGZmLFxuICAgIDB4ZjMsIDB4ZmYsIDB4ZTMsIDB4ZjMsIDB4ZjMsIDB4ZjMsIDB4ZjMsIDB4ODcsXG4gICAgMHgzZiwgMHgzZiwgMHgzMSwgMHgwMywgMHgwNywgMHgyMywgMHgzMSwgMHhmZixcbiAgICAweGM3LCAweGU3LCAweGU3LCAweGU3LCAweGU3LCAweGU3LCAweDgxLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4MDMsIDB4NDksIDB4NDksIDB4NDksIDB4NDksIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHgwMywgMHgzOSwgMHgzOSwgMHgzOSwgMHgzOSwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweDgzLCAweDM5LCAweDM5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4MDMsIDB4MzksIDB4MzksIDB4MDMsIDB4M2YsIDB4M2YsXG4gICAgMHhmZiwgMHhmZiwgMHg4MSwgMHgzOSwgMHgzOSwgMHg4MSwgMHhmOSwgMHhmOSxcbiAgICAweGZmLCAweGZmLCAweDkxLCAweDhmLCAweDlmLCAweDlmLCAweDlmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ODMsIDB4M2YsIDB4ODMsIDB4ZjksIDB4MDMsIDB4ZmYsXG4gICAgMHhlNywgMHhlNywgMHg4MSwgMHhlNywgMHhlNywgMHhlNywgMHhlNywgMHhmZixcbiAgICAweGZmLCAweGZmLCAweDM5LCAweDM5LCAweDM5LCAweDM5LCAweDgxLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4OTksIDB4OTksIDB4OTksIDB4YzMsIDB4ZTcsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHg0OSwgMHg0OSwgMHg0OSwgMHg0OSwgMHg4MSwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweDM5LCAweDAxLCAweGM3LCAweDAxLCAweDM5LCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4MzksIDB4MzksIDB4MzksIDB4ODEsIDB4ZjksIDB4ODMsXG4gICAgMHhmZiwgMHhmZiwgMHgwMSwgMHhlMywgMHhjNywgMHg4ZiwgMHgwMSwgMHhmZixcbiAgICAweGYzLCAweGU3LCAweGU3LCAweGNmLCAweGU3LCAweGU3LCAweGYzLCAweGZmLFxuICAgIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZmYsXG4gICAgMHg5ZiwgMHhjZiwgMHhjZiwgMHhlNywgMHhjZiwgMHhjZiwgMHg5ZiwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweDhmLCAweDQ1LCAweGUzLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4OTMsIDB4OTMsIDB4ZmYsXG4gICAgMHg4MywgMHgyOSwgMHgyOSwgMHgxMSwgMHgyOSwgMHgyOSwgMHg4MywgMHhmZixcbiAgICAweDgzLCAweDM5LCAweDA5LCAweDExLCAweDIxLCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweDgzLCAweDExLCAweDIxLCAweDdkLCAweDIxLCAweDExLCAweDgzLCAweGZmLFxuICAgIDB4ODMsIDB4MTEsIDB4MDksIDB4N2QsIDB4MDksIDB4MTEsIDB4ODMsIDB4ZmYsXG4gICAgMHg4MywgMHgxMSwgMHgzOSwgMHg1NSwgMHgxMSwgMHgxMSwgMHg4MywgMHhmZixcbiAgICAweDgzLCAweDExLCAweDExLCAweDU1LCAweDM5LCAweDExLCAweDgzLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhlNywgMHhmZiwgMHhlNywgMHhlNywgMHhjNywgMHhjNywgMHhjNywgMHhmZixcbiAgICAweGVmLCAweDgzLCAweDI5LCAweDJmLCAweDI5LCAweDgzLCAweGVmLCAweGZmLFxuICAgIDB4YzMsIDB4OTksIDB4OWYsIDB4MDMsIDB4OWYsIDB4OWYsIDB4MDEsIDB4ZmYsXG4gICAgMHhmZiwgMHhhNSwgMHhkYiwgMHhkYiwgMHhkYiwgMHhhNSwgMHhmZiwgMHhmZixcbiAgICAweDk5LCAweDk5LCAweGMzLCAweDgxLCAweGU3LCAweDgxLCAweGU3LCAweGZmLFxuICAgIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZmYsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ZmYsXG4gICAgMHhjMywgMHg5OSwgMHg4NywgMHhkYiwgMHhlMSwgMHg5OSwgMHhjMywgMHhmZixcbiAgICAweDkzLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4YzMsIDB4YmQsIDB4NjYsIDB4NWUsIDB4NWUsIDB4NjYsIDB4YmQsIDB4YzMsXG4gICAgMHg4NywgMHhjMywgMHg5MywgMHhjMywgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGZmLCAweGM5LCAweDkzLCAweDI3LCAweDkzLCAweGM5LCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ODEsIDB4ZjksIDB4ZjksIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGMzLCAweGJkLCAweDQ2LCAweDVhLCAweDQ2LCAweDVhLCAweGJkLCAweGMzLFxuICAgIDB4ODMsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhlZiwgMHhkNywgMHhlZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGU3LCAweGU3LCAweDgxLCAweGU3LCAweGU3LCAweGZmLCAweDgxLCAweGZmLFxuICAgIDB4YzcsIDB4ZjMsIDB4ZTcsIDB4YzMsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXG4gICAgMHhjMywgMHhlNywgMHhmMywgMHhjNywgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGY3LCAweGVmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4MzMsIDB4MzMsIDB4MzMsIDB4MzMsIDB4MDksIDB4M2YsXG4gICAgMHhjMSwgMHg5NSwgMHhiNSwgMHg5NSwgMHhjMSwgMHhmNSwgMHhmNSwgMHhmZixcbiAgICAweGZmLCAweGZmLCAweGZmLCAweGNmLCAweGNmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZjcsIDB4Y2YsXG4gICAgMHhlNywgMHhjNywgMHhlNywgMHhjMywgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgICAweGM3LCAweDkzLCAweDkzLCAweGM3LCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAgIDB4ZmYsIDB4MjcsIDB4OTMsIDB4YzksIDB4OTMsIDB4MjcsIDB4ZmYsIDB4ZmYsXG4gICAgMHhiZCwgMHgzYiwgMHhiNywgMHhhZCwgMHhkOSwgMHhiMSwgMHg3ZCwgMHhmZixcbiAgICAweGJkLCAweDNiLCAweGI3LCAweGE5LCAweGRkLCAweGJiLCAweDcxLCAweGZmLFxuICAgIDB4MWQsIDB4YmIsIDB4ZDcsIDB4MmQsIDB4ZDksIDB4YjEsIDB4N2QsIDB4ZmYsXG4gICAgMHhjNywgMHhmZiwgMHhjNywgMHg5ZiwgMHgzOSwgMHgwMSwgMHg4MywgMHhmZixcbiAgICAweGRmLCAweGVmLCAweGM3LCAweDkzLCAweDM5LCAweDAxLCAweDM5LCAweGZmLFxuICAgIDB4ZjcsIDB4ZWYsIDB4YzcsIDB4OTMsIDB4MzksIDB4MDEsIDB4MzksIDB4ZmYsXG4gICAgMHhjNywgMHg5MywgMHhjNywgMHg5MywgMHgzOSwgMHgwMSwgMHgzOSwgMHhmZixcbiAgICAweGNiLCAweGE3LCAweGM3LCAweDkzLCAweDM5LCAweDAxLCAweDM5LCAweGZmLFxuICAgIDB4OTMsIDB4ZmYsIDB4YzcsIDB4OTMsIDB4MzksIDB4MDEsIDB4MzksIDB4ZmYsXG4gICAgMHhlZiwgMHhkNywgMHhjNywgMHg5MywgMHgzOSwgMHgwMSwgMHgzOSwgMHhmZixcbiAgICAweGMxLCAweDg3LCAweDI3LCAweDIxLCAweDA3LCAweDI3LCAweDIxLCAweGZmLFxuICAgIDB4YzMsIDB4OTksIDB4M2YsIDB4M2YsIDB4OTksIDB4YzMsIDB4ZjcsIDB4Y2YsXG4gICAgMHhkZiwgMHhlZiwgMHgwMSwgMHgzZiwgMHgwMywgMHgzZiwgMHgwMSwgMHhmZixcbiAgICAweGY3LCAweGVmLCAweDAxLCAweDNmLCAweDAzLCAweDNmLCAweDAxLCAweGZmLFxuICAgIDB4YzcsIDB4OTMsIDB4MDEsIDB4M2YsIDB4MDMsIDB4M2YsIDB4MDEsIDB4ZmYsXG4gICAgMHg5MywgMHhmZiwgMHgwMSwgMHgzZiwgMHgwMywgMHgzZiwgMHgwMSwgMHhmZixcbiAgICAweGVmLCAweGY3LCAweDgxLCAweGU3LCAweGU3LCAweGU3LCAweDgxLCAweGZmLFxuICAgIDB4ZjcsIDB4ZWYsIDB4ODEsIDB4ZTcsIDB4ZTcsIDB4ZTcsIDB4ODEsIDB4ZmYsXG4gICAgMHhlNywgMHhjMywgMHg4MSwgMHhlNywgMHhlNywgMHhlNywgMHg4MSwgMHhmZixcbiAgICAweDk5LCAweGZmLCAweDgxLCAweGU3LCAweGU3LCAweGU3LCAweDgxLCAweGZmLFxuICAgIDB4ODcsIDB4OTMsIDB4OTksIDB4MDksIDB4OTksIDB4OTMsIDB4ODcsIDB4ZmYsXG4gICAgMHhjYiwgMHhhNywgMHgxOSwgMHgwOSwgMHgwMSwgMHgyMSwgMHgzMSwgMHhmZixcbiAgICAweGRmLCAweGVmLCAweDgzLCAweDM5LCAweDM5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4ZjcsIDB4ZWYsIDB4ODMsIDB4MzksIDB4MzksIDB4MzksIDB4ODMsIDB4ZmYsXG4gICAgMHhjNywgMHg5MywgMHg4MywgMHgzOSwgMHgzOSwgMHgzOSwgMHg4MywgMHhmZixcbiAgICAweGNiLCAweGE3LCAweDgzLCAweDM5LCAweDM5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4OTMsIDB4ZmYsIDB4ODMsIDB4MzksIDB4MzksIDB4MzksIDB4ODMsIDB4ZmYsXG4gICAgMHhmZiwgMHhiYiwgMHhkNywgMHhlZiwgMHhkNywgMHhiYiwgMHhmZiwgMHhmZixcbiAgICAweDgzLCAweDM5LCAweDMxLCAweDI5LCAweDE5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4ZGYsIDB4ZWYsIDB4MzksIDB4MzksIDB4MzksIDB4MzksIDB4ODMsIDB4ZmYsXG4gICAgMHhmNywgMHhlZiwgMHgzOSwgMHgzOSwgMHgzOSwgMHgzOSwgMHg4MywgMHhmZixcbiAgICAweGM3LCAweDkzLCAweGZmLCAweDM5LCAweDM5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4OTMsIDB4ZmYsIDB4MzksIDB4MzksIDB4MzksIDB4MzksIDB4ODMsIDB4ZmYsXG4gICAgMHhmNywgMHhlZiwgMHg5OSwgMHg5OSwgMHhjMywgMHhlNywgMHhlNywgMHhmZixcbiAgICAweDNmLCAweDAzLCAweDM5LCAweDM5LCAweDM5LCAweDAzLCAweDNmLCAweGZmLFxuICAgIDB4YzMsIDB4OTksIDB4OTksIDB4OTMsIDB4OTksIDB4ODksIDB4OTMsIDB4ZmYsXG4gICAgMHhkZiwgMHhlZiwgMHg4MywgMHhmOSwgMHg4MSwgMHgzOSwgMHg4MSwgMHhmZixcbiAgICAweGY3LCAweGVmLCAweDgzLCAweGY5LCAweDgxLCAweDM5LCAweDgxLCAweGZmLFxuICAgIDB4YzcsIDB4OTMsIDB4ODMsIDB4ZjksIDB4ODEsIDB4MzksIDB4ODEsIDB4ZmYsXG4gICAgMHhjYiwgMHhhNywgMHg4MywgMHhmOSwgMHg4MSwgMHgzOSwgMHg4MSwgMHhmZixcbiAgICAweDkzLCAweGZmLCAweDgzLCAweGY5LCAweDgxLCAweDM5LCAweDgxLCAweGZmLFxuICAgIDB4ZWYsIDB4ZDcsIDB4ODMsIDB4ZjksIDB4ODEsIDB4MzksIDB4ODEsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHg4MywgMHhlOSwgMHg4MSwgMHgyZiwgMHg4MywgMHhmZixcbiAgICAweGZmLCAweGZmLCAweDgxLCAweDNmLCAweDNmLCAweDgxLCAweGY3LCAweGNmLFxuICAgIDB4ZGYsIDB4ZWYsIDB4ODMsIDB4MzksIDB4MDEsIDB4M2YsIDB4ODMsIDB4ZmYsXG4gICAgMHhmNywgMHhlZiwgMHg4MywgMHgzOSwgMHgwMSwgMHgzZiwgMHg4MywgMHhmZixcbiAgICAweGM3LCAweDkzLCAweDgzLCAweDM5LCAweDAxLCAweDNmLCAweDgzLCAweGZmLFxuICAgIDB4OTMsIDB4ZmYsIDB4ODMsIDB4MzksIDB4MDEsIDB4M2YsIDB4ODMsIDB4ZmYsXG4gICAgMHhkZiwgMHhlZiwgMHhmZiwgMHhjNywgMHhlNywgMHhlNywgMHg4MSwgMHhmZixcbiAgICAweGY3LCAweGVmLCAweGZmLCAweGM3LCAweGU3LCAweGU3LCAweDgxLCAweGZmLFxuICAgIDB4YzcsIDB4OTMsIDB4ZmYsIDB4YzcsIDB4ZTcsIDB4ZTcsIDB4ODEsIDB4ZmYsXG4gICAgMHg5MywgMHhmZiwgMHhjNywgMHhlNywgMHhlNywgMHhlNywgMHg4MSwgMHhmZixcbiAgICAweDliLCAweDg3LCAweDY3LCAweDgzLCAweDM5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4Y2IsIDB4YTcsIDB4MDMsIDB4MzksIDB4MzksIDB4MzksIDB4MzksIDB4ZmYsXG4gICAgMHhkZiwgMHhlZiwgMHg4MywgMHgzOSwgMHgzOSwgMHgzOSwgMHg4MywgMHhmZixcbiAgICAweGY3LCAweGVmLCAweDgzLCAweDM5LCAweDM5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4YzcsIDB4OTMsIDB4ODMsIDB4MzksIDB4MzksIDB4MzksIDB4ODMsIDB4ZmYsXG4gICAgMHhjYiwgMHhhNywgMHg4MywgMHgzOSwgMHgzOSwgMHgzOSwgMHg4MywgMHhmZixcbiAgICAweDkzLCAweGZmLCAweDgzLCAweDM5LCAweDM5LCAweDM5LCAweDgzLCAweGZmLFxuICAgIDB4ZmYsIDB4ZTcsIDB4ZmYsIDB4ODEsIDB4ZmYsIDB4ZTcsIDB4ZmYsIDB4ZmYsXG4gICAgMHhmZiwgMHhmZiwgMHg4MywgMHgzMSwgMHgyOSwgMHgxOSwgMHg4MywgMHhmZixcbiAgICAweGRmLCAweGVmLCAweDM5LCAweDM5LCAweDM5LCAweDM5LCAweDgxLCAweGZmLFxuICAgIDB4ZjcsIDB4ZWYsIDB4MzksIDB4MzksIDB4MzksIDB4MzksIDB4ODEsIDB4ZmYsXG4gICAgMHhjNywgMHg5MywgMHhmZiwgMHgzOSwgMHgzOSwgMHgzOSwgMHg4MSwgMHhmZixcbiAgICAweDkzLCAweGZmLCAweDM5LCAweDM5LCAweDM5LCAweDM5LCAweDgxLCAweGZmLFxuICAgIDB4ZjcsIDB4ZWYsIDB4MzksIDB4MzksIDB4MzksIDB4ODEsIDB4ZjksIDB4ODMsXG4gICAgMHgzZiwgMHgzZiwgMHgwMywgMHgzOSwgMHgzOSwgMHgwMywgMHgzZiwgMHgzZixcbiAgICAweDkzLCAweGZmLCAweDM5LCAweDM5LCAweDM5LCAweDgxLCAweGY5LCAweDgzXG4pO1xuXG5leHBvcnQgY29uc3Qgc2hvd0RldlRvb2xzUXVlcnlLZXkgPSAnZGV2dG9vbHMtb3Blbic7XG4iLCJpbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgY29uc3Qgd2Vic29ja2V0ID0gY29uc3RhbnRzLkdBTUVERVZfTU9ERVxuICAgID8gbmV3IFdlYlNvY2tldCgobG9jYXRpb24ucHJvdG9jb2wgPT0gXCJodHRwczpcIiA/IFwid3NzXCIgOiBcIndzXCIpICsgXCI6Ly9cIiArIGxvY2F0aW9uLmhvc3QpXG4gICAgOiBudWxsO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFVybFBhcmFtIChuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLy8gRmlyc3QgdHJ5IHRoZSBVUkwgcXVlcnkgc3RyaW5nXG4gICAgY29uc3QgdmFsdWUgPSB1cmwuc2VhcmNoUGFyYW1zLmdldChuYW1lKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gRmFsbGJhY2sgdG8gdXNpbmcgdGhlIHZhbHVlIGluIHRoZSBoYXNoXG4gICAgY29uc3QgaGFzaCA9IG5ldyBVUkwodXJsLmhhc2guc3Vic3RyaW5nKDEpLCBcImh0dHBzOi8veFwiKTtcbiAgICByZXR1cm4gaGFzaC5zZWFyY2hQYXJhbXMuZ2V0KG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdEZ1bGxzY3JlZW4gKCkge1xuICAgIGlmIChkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIGZ1bmN0aW9uIGV4cGFuZElmcmFtZSAoKSB7XG4gICAgICAgICAgICAvLyBGdWxsc2NyZWVuIGZhaWxlZCwgdHJ5IHRvIG1heGltaXplIG91ciBvd24gaWZyYW1lLiBXZSBkb24ndCB5ZXQgaGF2ZSBhIGJ1dHRvbiB0byBnb1xuICAgICAgICAgICAgLy8gYmFjayB0byBtaW5pbWl6ZWQsIGJ1dCB0aGlzIGF0IGxlYXN0IG1ha2VzIGdhbWVzIG9uIHdhc200Lm9yZyBwbGF5YWJsZSBvbiBpUGhvbmVcbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZSA9IHdpbmRvdy5mcmFtZUVsZW1lbnQgYXMgSFRNTElGcmFtZUVsZW1lbnQgfCBudWxsO1xuICAgICAgICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUudG9wID0gXCIwXCI7XG4gICAgICAgICAgICAgICAgaWZyYW1lLnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUuekluZGV4ID0gXCI5OTk5OVwiO1xuICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBkb2N1bWVudC5ib2R5LnJlcXVlc3RGdWxsc2NyZWVuICYmIGRvY3VtZW50LmJvZHkucmVxdWVzdEZ1bGxzY3JlZW4oe25hdmlnYXRpb25VSTogXCJoaWRlXCJ9KTtcbiAgICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgICAgIHByb21pc2UuY2F0Y2goZXhwYW5kSWZyYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4cGFuZElmcmFtZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29weVRvQ2xpcGJvYXJkICh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBBdHRlbXB0IHRvIHVzZSB0aGUgYXN5bmMgY2xpcGJvYXJkIEFQSSwgd2hpY2ggaXMgbm90IHVuaXZlcnNhbGx5IHN1cHBvcnRlZFxuICAgICAgICBhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0ZXh0KTtcbiAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IGFsbG93IHdyaXRpbmcgdG8gdGhlIGNsaXBib2FyZCBvdXRzaWRlIG9mIHVzZXIgaW50ZXJhY3Rpb24gZXZlbnRzLlxuICAgICAgICAvLyBGYWxsYmFjayBpcyB0byBwcmVzZW50IHVzZXIgd2l0aCBhIGRpYWxvZyBib3ggZnJvbSB3aGljaCB0aGV5IGNhbiBjb3B5IHRoZSBsaW5rLlxuXG4gICAgICAgIGxldCBkaWFsb2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaWFsb2cnKTtcbiAgICAgICAgZGlhbG9nLnRpdGxlID0gJ05ldHBsYXkgVVJMJztcbiAgICAgICAgZGlhbG9nLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoZGlhbG9nKTtcblxuICAgICAgICBsZXQgY29weUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBjb3B5QnV0dG9uLnRleHRDb250ZW50ID0gJ0NvcHknO1xuICAgICAgICBjb3B5QnV0dG9uLnN0eWxlLm1hcmdpbkxlZnQgPSAnMWVtJztcbiAgICAgICAgY29weUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCk7XG4gICAgICAgIGRpYWxvZy5hcHBlbmRDaGlsZChjb3B5QnV0dG9uKTtcblxuICAgICAgICBsZXQgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgY2xvc2VCdXR0b24udGV4dENvbnRlbnQgPSAnQ2xvc2UnO1xuICAgICAgICBjbG9zZUJ1dHRvbi5zdHlsZS5tYXJnaW5MZWZ0ID0gJzFlbSc7XG4gICAgICAgIGNsb3NlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaWFsb2cpO1xuICAgICAgICB9O1xuICAgICAgICBkaWFsb2cuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pO1xuICAgICAgICBcbiAgICAgICAgZGlhbG9nLnNob3dNb2RhbCgpO1xuICAgICAgICBcbiAgICB9XG59XG4iLCIvLyBFbmNvZGVzIGJpbmFyeSBkYXRhIGludG8gdGV4dCwgbGlrZSBiYXNlNjQgYnV0IG1vcmUgZWZmaWNpZW50LlxuLy9cbi8vIEltcGxlbWVudHMgaHR0cDovL3JmYy56ZXJvbXEub3JnL3NwZWM6MzJcbi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJvbXEvbGliem1xL2Jsb2IvOGNkYTU0YzUyYjA4MDA1YjcxZjgyODI0M2YyMjA1MWNkYmM0ODJiNC9zcmMvem1xX3V0aWxzLmNwcCNMNzctTDE2OFxuXG5jb25zdCBFTkNPREVSID0gXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWi4tOis9XiEvKj8mPD4oKVtde31AJSQjXCIuc3BsaXQoXCJcIik7XG5cbmNvbnN0IERFQ09ERVIgPSBbXG4gICAgMHgwMCwgMHg0NCwgMHgwMCwgMHg1NCwgMHg1MywgMHg1MiwgMHg0OCwgMHgwMCxcbiAgICAweDRCLCAweDRDLCAweDQ2LCAweDQxLCAweDAwLCAweDNGLCAweDNFLCAweDQ1LFxuICAgIDB4MDAsIDB4MDEsIDB4MDIsIDB4MDMsIDB4MDQsIDB4MDUsIDB4MDYsIDB4MDcsXG4gICAgMHgwOCwgMHgwOSwgMHg0MCwgMHgwMCwgMHg0OSwgMHg0MiwgMHg0QSwgMHg0NyxcbiAgICAweDUxLCAweDI0LCAweDI1LCAweDI2LCAweDI3LCAweDI4LCAweDI5LCAweDJBLFxuICAgIDB4MkIsIDB4MkMsIDB4MkQsIDB4MkUsIDB4MkYsIDB4MzAsIDB4MzEsIDB4MzIsXG4gICAgMHgzMywgMHgzNCwgMHgzNSwgMHgzNiwgMHgzNywgMHgzOCwgMHgzOSwgMHgzQSxcbiAgICAweDNCLCAweDNDLCAweDNELCAweDRELCAweDAwLCAweDRFLCAweDQzLCAweDAwLFxuICAgIDB4MDAsIDB4MEEsIDB4MEIsIDB4MEMsIDB4MEQsIDB4MEUsIDB4MEYsIDB4MTAsXG4gICAgMHgxMSwgMHgxMiwgMHgxMywgMHgxNCwgMHgxNSwgMHgxNiwgMHgxNywgMHgxOCxcbiAgICAweDE5LCAweDFBLCAweDFCLCAweDFDLCAweDFELCAweDFFLCAweDFGLCAweDIwLFxuICAgIDB4MjEsIDB4MjIsIDB4MjMsIDB4NEYsIDB4MDAsIDB4NTAsIDB4MDAsIDB4MDBcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUgKHNyYzogbnVtYmVyW10gfCBVaW50OEFycmF5IHwgVWludDhDbGFtcGVkQXJyYXkpOiBzdHJpbmcge1xuICAgIGNvbnN0IHNpemUgPSBzcmMubGVuZ3RoO1xuICAgIGNvbnN0IGV4dHJhID0gKHNpemUgJSA0KTtcbiAgICBjb25zdCBwYWRkZWRTaXplID0gZXh0cmEgPyBzaXplICsgNC1leHRyYSA6IHNpemU7XG5cblx0bGV0IHN0ciA9IFwiXCIsXG5cdFx0Ynl0ZV9uYnIgPSAwLFxuXHRcdHZhbHVlID0gMDtcblx0d2hpbGUgKGJ5dGVfbmJyIDwgcGFkZGVkU2l6ZSkge1xuICAgICAgICBjb25zdCBiID0gKGJ5dGVfbmJyIDwgc2l6ZSkgPyBzcmNbYnl0ZV9uYnJdIDogMDtcbiAgICAgICAgKytieXRlX25icjtcblx0XHR2YWx1ZSA9ICh2YWx1ZSAqIDI1NikgKyBiO1xuXHRcdGlmICgoYnl0ZV9uYnIgJSA0KSA9PSAwKSB7XG5cdFx0XHRsZXQgZGl2aXNvciA9IDg1ICogODUgKiA4NSAqIDg1O1xuXHRcdFx0d2hpbGUgKGRpdmlzb3IgPj0gMSkge1xuXHRcdFx0XHRjb25zdCBpZHggPSBNYXRoLmZsb29yKHZhbHVlIC8gZGl2aXNvcikgJSA4NTtcblx0XHRcdFx0c3RyICs9IEVOQ09ERVJbaWR4XTtcblx0XHRcdFx0ZGl2aXNvciAvPSA4NTtcblx0XHRcdH1cblx0XHRcdHZhbHVlID0gMDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlIChzdHJpbmc6IHN0cmluZywgZGVzdDogbnVtYmVyW10gfCBVaW50OEFycmF5IHwgVWludDhDbGFtcGVkQXJyYXkpOiBudW1iZXIge1xuICAgIGxldCBieXRlX25iciA9IDAsXG4gICAgICAgIGNoYXJfbmJyID0gMCxcbiAgICAgICAgdmFsdWUgPSAwO1xuICAgIGNvbnN0IHN0cmluZ19sZW4gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBkZXN0X2xlbiA9IGRlc3QubGVuZ3RoO1xuXG4gICAgaWYgKChzdHJpbmcubGVuZ3RoICUgNSkgPT0gMCkge1xuICAgICAgICB3aGlsZSAoY2hhcl9uYnIgPCBzdHJpbmdfbGVuKSB7XG4gICAgICAgICAgICBjb25zdCBpZHggPSBzdHJpbmcuY2hhckNvZGVBdChjaGFyX25icisrKSAtIDMyO1xuICAgICAgICAgICAgaWYgKChpZHggPCAwKSB8fCAoaWR4ID49IERFQ09ERVIubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBieXRlX25icjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlICogODUpICsgREVDT0RFUltpZHhdO1xuICAgICAgICAgICAgaWYgKChjaGFyX25iciAlIDUpID09IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgZGl2aXNvciA9IDI1NiAqIDI1NiAqIDI1NjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZGl2aXNvciA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChieXRlX25iciA+PSBkZXN0X2xlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVfbmJyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlc3RbYnl0ZV9uYnIrK10gPSAodmFsdWUgLyBkaXZpc29yKSAlIDI1NjtcbiAgICAgICAgICAgICAgICAgICAgZGl2aXNvciAvPSAyNTY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBieXRlX25icjtcbn1cbiIsImltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IFJ1bnRpbWUgfSBmcm9tIFwiLi9ydW50aW1lXCI7XG5cbmV4cG9ydCBjbGFzcyBTdGF0ZSB7XG4gICAgbWVtb3J5OiBBcnJheUJ1ZmZlcjtcblxuICAgIGRpc2tTaXplOiBudW1iZXI7XG4gICAgZGlza0J1ZmZlcjogQXJyYXlCdWZmZXI7XG5cbiAgICAvLyBUT0RPKDIwMjItMDMtMTcpOiBBUFUgc3RhdGVcblxuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5tZW1vcnkgPSBuZXcgQXJyYXlCdWZmZXIoMSA8PCAxNik7XG4gICAgICAgIHRoaXMuZGlza0J1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihjb25zdGFudHMuU1RPUkFHRV9TSVpFKTtcbiAgICAgICAgdGhpcy5kaXNrU2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgcmVhZCAocnVudGltZTogUnVudGltZSkge1xuICAgICAgICBuZXcgVWludDhBcnJheSh0aGlzLm1lbW9yeSkuc2V0KG5ldyBVaW50OEFycmF5KHJ1bnRpbWUubWVtb3J5LmJ1ZmZlcikpO1xuXG4gICAgICAgIHRoaXMuZGlza1NpemUgPSBydW50aW1lLmRpc2tTaXplO1xuICAgICAgICBuZXcgVWludDhBcnJheSh0aGlzLmRpc2tCdWZmZXIpLnNldChuZXcgVWludDhBcnJheShydW50aW1lLmRpc2tCdWZmZXIsIDAsIHJ1bnRpbWUuZGlza1NpemUpKTtcbiAgICB9XG5cbiAgICB3cml0ZSAocnVudGltZTogUnVudGltZSkge1xuICAgICAgICBuZXcgVWludDhBcnJheShydW50aW1lLm1lbW9yeS5idWZmZXIpLnNldChuZXcgVWludDhBcnJheSh0aGlzLm1lbW9yeSkpO1xuXG4gICAgICAgIHJ1bnRpbWUuZGlza1NpemUgPSB0aGlzLmRpc2tTaXplO1xuICAgICAgICBuZXcgVWludDhBcnJheShydW50aW1lLmRpc2tCdWZmZXIpLnNldChuZXcgVWludDhBcnJheSh0aGlzLmRpc2tCdWZmZXIsIDAsIHRoaXMuZGlza1NpemUpKTtcbiAgICB9XG5cbiAgICB0b0J5dGVzIChkZXN0PzogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSBuZXcgVWludDhBcnJheSgoMTw8MTYpICsgNCArIHRoaXMuZGlza1NpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdC5zZXQobmV3IFVpbnQ4QXJyYXkodGhpcy5tZW1vcnkpLCAwKTtcblxuICAgICAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhkZXN0LmJ1ZmZlciwgZGVzdC5ieXRlT2Zmc2V0LCBkZXN0LmJ5dGVMZW5ndGgpO1xuICAgICAgICBkYXRhVmlldy5zZXRVaW50MzIoMTw8MTYsIHRoaXMuZGlza1NpemUpO1xuXG4gICAgICAgIGRlc3Quc2V0KG5ldyBVaW50OEFycmF5KHRoaXMuZGlza0J1ZmZlciwgMCwgdGhpcy5kaXNrU2l6ZSksICgxPDwxNikgKyA0KTtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9XG5cbiAgICBmcm9tQnl0ZXMgKHNyYzogVWludDhBcnJheSkge1xuICAgICAgICBuZXcgVWludDhBcnJheSh0aGlzLm1lbW9yeSkuc2V0KHNyYy5zdWJhcnJheSgwLCAxPDwxNikpO1xuXG4gICAgICAgIGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KHNyYy5idWZmZXIsIHNyYy5ieXRlT2Zmc2V0LCBzcmMuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHRoaXMuZGlza1NpemUgPSBkYXRhVmlldy5nZXRVaW50MzIoMTw8MTYpO1xuXG4gICAgICAgIGNvbnN0IG9mZnNldCA9ICgxPDwxNikgKyA0O1xuICAgICAgICBuZXcgVWludDhBcnJheSh0aGlzLmRpc2tCdWZmZXIpLnNldChzcmMuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyB0aGlzLmRpc2tTaXplKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU3RhdGUgfSBmcm9tIFwiLi4vc3RhdGVcIjtcbmltcG9ydCB7IFJ1bnRpbWUgfSBmcm9tIFwiLi4vcnVudGltZVwiO1xuXG5leHBvcnQgY29uc3QgSElTVE9SWV9MRU5HVEggPSAyMDtcblxuY29uc3QgUExBWUVSX0NPVU5UID0gNDtcblxuLy8gQSBnYW1lcGFkIGlucHV0IGJ5dGVcbnR5cGUgSW5wdXREYXRhID0gbnVtYmVyO1xuXG4vLyBBIHNpbmdsZSBmcmFtZSBvZiBpbnB1dCBoaXN0b3J5XG5jbGFzcyBIaXN0b3J5IHtcbiAgICBmcmFtZSA9IC0xO1xuXG4gICAgLy8gSW5wdXRzIGZvciBlYWNoIHBsYXllclxuICAgIHJlYWRvbmx5IGlucHV0czogSW5wdXREYXRhW107XG5cbiAgICAvLyBGb3IgZWFjaCBpbnB1dCwgd2hldGhlciBpdCB3YXMgYSBwcmVkaWN0aW9uXG4gICAgcmVhZG9ubHkgcHJlZGljdGVkOiBib29sZWFuW107XG5cbiAgICAvLyBUaGUgc3RhdGUgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIGZyYW1lXG4gICAgcmVhZG9ubHkgc3RhdGU6IFN0YXRlO1xuXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFN0YXRlKCk7XG5cbiAgICAgICAgdGhpcy5pbnB1dHMgPSBuZXcgQXJyYXkoUExBWUVSX0NPVU5UKTtcbiAgICAgICAgdGhpcy5wcmVkaWN0ZWQgPSBuZXcgQXJyYXkoUExBWUVSX0NPVU5UKTtcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IFBMQVlFUl9DT1VOVDsgKytpaSkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dHNbaWldID0gMDtcbiAgICAgICAgICAgIHRoaXMucHJlZGljdGVkW2lpXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFBsYXllciB7XG4gICAgLyoqIElucHV0cyBxdWV1ZWQgZm9yIGZyYW1lcyB0aGF0IHdlIGhhdmVuJ3Qgc2ltdWxhdGVkIGxvY2FsbHkgeWV0LiAqL1xuICAgIHJlYWRvbmx5IGZ1dHVyZUlucHV0cyA9IG5ldyBNYXA8bnVtYmVyLElucHV0RGF0YT4oKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0cyBnYW1lcGFkIGlucHV0cyBmcm9tIGFsbCBwbGF5ZXJzIGFuZCBoYW5kbGVzIHJvbGxiYWNrcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJvbGxiYWNrTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBoaXN0b3J5OiBIaXN0b3J5W107XG4gICAgcHJpdmF0ZSBwbGF5ZXJzOiBQbGF5ZXJbXTtcblxuICAgIHByaXZhdGUgcm9sbGJhY2tJZHg6IG51bWJlciA9IEhJU1RPUllfTEVOR1RIO1xuXG4gICAgY29uc3RydWN0b3IgKHB1YmxpYyBjdXJyZW50RnJhbWU6IG51bWJlciwgcHJpdmF0ZSBydW50aW1lOiBSdW50aW1lKSB7XG4gICAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBBcnJheShISVNUT1JZX0xFTkdUSCk7XG4gICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBISVNUT1JZX0xFTkdUSDsgKytpaSkge1xuICAgICAgICAgICAgdGhpcy5oaXN0b3J5W2lpXSA9IG5ldyBIaXN0b3J5KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBsYXllcnMgPSBuZXcgQXJyYXkoUExBWUVSX0NPVU5UKTtcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IFBMQVlFUl9DT1VOVDsgKytpaSkge1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJzW2lpXSA9IG5ldyBQbGF5ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZElucHV0cyAocGxheWVySWR4OiBudW1iZXIsIGZyYW1lOiBudW1iZXIsIGlucHV0czogSW5wdXREYXRhW10pIHtcbiAgICAgICAgY29uc3QgcGxheWVyID0gdGhpcy5wbGF5ZXJzW3BsYXllcklkeF07XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coYCR7cGxheWVySWR4fSBmcmFtZSAke2ZyYW1lfSAtPiAke2lucHV0cy5qb2luKFwiLCBcIil9YCk7XG5cbiAgICAgICAgLy8gVE9ETygyMDIyLTA0LTA5KTogT3B0aW1pemVcblxuICAgICAgICBmb3IgKGNvbnN0IGlucHV0IG9mIGlucHV0cykge1xuICAgICAgICAgICAgaWYgKGZyYW1lID49IHRoaXMuY3VycmVudEZyYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gTmV2ZXIgb3ZlcndyaXRlIGEgcHJldmlvdXNseSBhZGRlZCBpbnB1dFxuICAgICAgICAgICAgICAgIGlmICghcGxheWVyLmZ1dHVyZUlucHV0cy5oYXMoZnJhbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmVuJ3Qgc2ltdWxhdGVkIHRoaXMgZnJhbWUgbG9jYWxseSB5ZXQsIHNjaGVkdWxlIHRoZSBpbnB1dCBmb3IgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLmZ1dHVyZUlucHV0cy5zZXQoZnJhbWUsIGlucHV0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU2VhcmNoIG91ciBoaXN0b3J5IGZvciB0aGlzIGZyYW1lXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaWkgPSAwLCBsbCA9IEhJU1RPUllfTEVOR1RIOyBpaSA8IGxsOyArK2lpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhpc3RvcnkgPSB0aGlzLmhpc3RvcnlbaWldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGlzdG9yeS5mcmFtZSA9PSBmcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugb25seSBjb25zaWRlciBmcmFtZXMgdGhhdCBoYXZlIGJlZW4gcHJlZGljdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGlzdG9yeS5wcmVkaWN0ZWRbcGxheWVySWR4XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcnkucHJlZGljdGVkW3BsYXllcklkeF0gPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBpbnB1dCBpcyBkaWZmZXJlbnQgdGhhbiB3ZSBwcmVkaWN0ZWQsIHNjaGVkdWxlIGEgcm9sbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGlzdG9yeS5pbnB1dHNbcGxheWVySWR4XSAhPSBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LmlucHV0c1twbGF5ZXJJZHhdID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9sbGJhY2tJZHggPSBNYXRoLm1pbihpaSwgdGhpcy5yb2xsYmFja0lkeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICsrZnJhbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGUgKCkge1xuICAgICAgICAvLyBBcHBseSBhbnkgcm9sbGJhY2tzXG4gICAgICAgIGlmICh0aGlzLnJvbGxiYWNrSWR4IDwgSElTVE9SWV9MRU5HVEgpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBSb2xsaW5nIGJhY2sgJHtISVNUT1JZX0xFTkdUSCAtIHRoaXMucm9sbGJhY2tJZHh9IGZyYW1lc2ApO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcHJlZGljdGVkIGlucHV0cywgcHJvcGFnYXRpbmcgdGhlbSBmb3J3YXJkXG4gICAgICAgICAgICBmb3IgKGxldCBpaSA9IHRoaXMucm9sbGJhY2tJZHgrMTsgaWkgPCBISVNUT1JZX0xFTkdUSDsgKytpaSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhpc3RvcnkgPSB0aGlzLmhpc3RvcnlbaWldO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHBsYXllcklkeCA9IDA7IHBsYXllcklkeCA8IFBMQVlFUl9DT1VOVDsgKytwbGF5ZXJJZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhpc3RvcnkucHJlZGljdGVkW3BsYXllcklkeF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZIaXN0b3J5ID0gdGhpcy5oaXN0b3J5W2lpLTFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5pbnB1dHNbcGxheWVySWR4XSA9IHByZXZIaXN0b3J5LmlucHV0c1twbGF5ZXJJZHhdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZmlyc3QgPSB0cnVlO1xuXG4gICAgICAgICAgICB3aGlsZSAodGhpcy5yb2xsYmFja0lkeCA8IEhJU1RPUllfTEVOR1RIKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGlzdG9yeSA9IHRoaXMuaGlzdG9yeVt0aGlzLnJvbGxiYWNrSWR4KytdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBydW50aW1lIHN0YXRlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHJvbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIGhpc3Rvcnkuc3RhdGUud3JpdGUodGhpcy5ydW50aW1lKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgc2F2ZWQgc3RhdGUgZm9yIHRoaXMgZnJhbWVcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5zdGF0ZS5yZWFkKHRoaXMucnVudGltZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcGxheWVySWR4ID0gMDsgcGxheWVySWR4IDwgUExBWUVSX0NPVU5UOyArK3BsYXllcklkeCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bnRpbWUuc2V0R2FtZXBhZChwbGF5ZXJJZHgsIGhpc3RvcnkuaW5wdXRzW3BsYXllcklkeF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJ1bnRpbWUudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcmV2SGlzdG9yeSA9IHRoaXMuaGlzdG9yeVtISVNUT1JZX0xFTkdUSC0xXTtcblxuICAgICAgICBjb25zdCBuZXh0SGlzdG9yeSA9IHRoaXMuaGlzdG9yeS5zaGlmdCgpITtcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2gobmV4dEhpc3RvcnkpO1xuXG4gICAgICAgIG5leHRIaXN0b3J5LmZyYW1lID0gdGhpcy5jdXJyZW50RnJhbWU7XG5cbiAgICAgICAgLy8gU2F2ZSBzdGF0ZSBiZWZvcmUgZXhlY3V0aW5nIHRoZSBmcmFtZVxuICAgICAgICBuZXh0SGlzdG9yeS5zdGF0ZS5yZWFkKHRoaXMucnVudGltZSk7XG5cbiAgICAgICAgLy8gQ29weSBpbnB1dHMgaW50byB0aGUgbmV4dCBmcmFtZVxuICAgICAgICBmb3IgKGxldCBwbGF5ZXJJZHggPSAwOyBwbGF5ZXJJZHggPCBQTEFZRVJfQ09VTlQ7ICsrcGxheWVySWR4KSB7XG4gICAgICAgICAgICBjb25zdCBwbGF5ZXIgPSB0aGlzLnBsYXllcnNbcGxheWVySWR4XTtcblxuICAgICAgICAgICAgbGV0IGlucHV0ID0gcGxheWVyLmZ1dHVyZUlucHV0cy5nZXQodGhpcy5jdXJyZW50RnJhbWUpO1xuICAgICAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuZXh0SGlzdG9yeS5wcmVkaWN0ZWRbcGxheWVySWR4XSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHBsYXllci5mdXR1cmVJbnB1dHMuZGVsZXRlKHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTm8ga25vd24gaW5wdXQgZm9yIHRoaXMgcGxheWVyLCByZXBlYXQgdGhlIGlucHV0IGZyb20gdGhlIGxhc3QgZnJhbWVcbiAgICAgICAgICAgICAgICBuZXh0SGlzdG9yeS5wcmVkaWN0ZWRbcGxheWVySWR4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBwcmV2SGlzdG9yeS5pbnB1dHNbcGxheWVySWR4XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV4dEhpc3RvcnkuaW5wdXRzW3BsYXllcklkeF0gPSBpbnB1dDtcblxuICAgICAgICAgICAgLy8gQWxzbyBwb2tlIHJ1bnRpbWUgbWVtb3J5XG4gICAgICAgICAgICB0aGlzLnJ1bnRpbWUuc2V0R2FtZXBhZChwbGF5ZXJJZHgsIGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucnVudGltZS51cGRhdGUoKTtcblxuICAgICAgICArK3RoaXMuY3VycmVudEZyYW1lO1xuICAgIH1cbn1cbiIsIi8qKiBXZWJSVEMgc2lnbmFsaW5nIG1lc3NhZ2VzLiAqL1xudHlwZSBNZXNzYWdlID0gV2hvQW1JUmVxdWVzdE1lc3NhZ2UgfCBXaG9BbUlSZXBseU1lc3NhZ2UgfCBPZmZlck1lc3NhZ2UgfCBBbnN3ZXJNZXNzYWdlIHwgQ2FuZGlkYXRlTWVzc2FnZSB8IEFib3J0TWVzc2FnZSB8IEtlZXBhbGl2ZU1lc3NhZ2U7XG5cbi8qKiBTZW50IGJ5IGEgbmV3bHkgY29ubmVjdGluZyBjbGllbnQgcmVxdWVzdGluZyBpdHMgcGVlciBJRC4gKi9cbnR5cGUgV2hvQW1JUmVxdWVzdE1lc3NhZ2UgPSB7XG4gICAgdHlwZTogXCJXSE9BTUlfUkVRVUVTVFwiO1xufVxuXG50eXBlIFdob0FtSVJlcGx5TWVzc2FnZSA9IHtcbiAgICB0eXBlOiBcIldIT0FNSV9SRVBMWVwiO1xuICAgIHlvdXJQZWVySWQ6IHN0cmluZztcbiAgICBpY2VTZXJ2ZXJzPzogUlRDSWNlU2VydmVyW107XG59XG5cbnR5cGUgT2ZmZXJNZXNzYWdlID0ge1xuICAgIHR5cGU6IFwiT0ZGRVJcIjtcbiAgICBkZXNjcmlwdGlvbjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdDtcbn1cblxudHlwZSBBbnN3ZXJNZXNzYWdlID0ge1xuICAgIHR5cGU6IFwiQU5TV0VSXCI7XG4gICAgZGVzY3JpcHRpb246IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQ7XG59XG5cbnR5cGUgQ2FuZGlkYXRlTWVzc2FnZSA9IHtcbiAgICB0eXBlOiBcIkNBTkRJREFURVwiO1xuICAgIGNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlSW5pdDtcbn1cblxuLyoqIFNlbnQgYnkgdGhlIHNlcnZlciB3aGVuIGl0IGZhaWxlZCB0byBjb250YWN0IHRoZSBvdGhlciBwZWVyLiAqL1xudHlwZSBBYm9ydE1lc3NhZ2UgPSB7XG4gICAgdHlwZTogXCJBQk9SVFwiO1xufVxuXG50eXBlIEtlZXBhbGl2ZU1lc3NhZ2UgPSB7XG4gICAgdHlwZTogXCJLRUVQQUxJVkVcIjtcbn1cblxuLyoqXG4gKiBDb25uZWN0cyB0byBvdXIgd2Vic29ja2V0IHNlcnZlciBmb3IgZXhjaGFuZ2luZyB0aGUgc2lnbmFsaW5nIG1lc3NhZ2VzIG5lZWRlZCB0byBlc3RhYmxpc2ggV2ViUlRDXG4gKiBwZWVyLXRvLXBlZXIgY29ubmVjdGlvbnMuXG4gKi9cbmNsYXNzIFNpZ25hbENsaWVudCB7XG4gICAgcHJpdmF0ZSBzb2NrZXQ/OiBXZWJTb2NrZXQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBidWZmZXJlZE91dHB1dDogc3RyaW5nW10gPSBbXTtcbiAgICBwcml2YXRlIGtlZXBhbGl2ZUludGVydmFsOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBvbk1lc3NhZ2U6IChzb3VyY2U6IHN0cmluZywgbWVzc2FnZTogTWVzc2FnZSkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmNvbm5lY3QoKTtcblxuICAgICAgICAvLyBSZWd1bGFybHkgc2VuZCBtZXNzYWdlcyB0byBrZWVwIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBmcm9tIGFuIGlkbGUgdGltZW91dFxuICAgICAgICB0aGlzLmtlZXBhbGl2ZUludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VuZChcIlwiLCB7IHR5cGU6IFwiS0VFUEFMSVZFXCIgfSwgZmFsc2UpO1xuICAgICAgICB9LCAxNTAwMCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjb25uZWN0ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gQ29ubmVjdCB0byB0aGUgZmlyc3QgYXZhaWxhYmxlIHNpZ25hbCBzZXJ2ZXJcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IFtcbiAgICAgICAgICAgIC8vIFwid3M6Ly9sb2NhbGhvc3Q6MzAwMVwiLFxuXG4gICAgICAgICAgICBcIndzczovL3dlYnJ0Yy1zaWduYWwtc2VydmVyLndhc200Lm9yZ1wiLFxuICAgICAgICAgICAgXCJ3c3M6Ly95d2MyaDg1Y3YxLmV4ZWN1dGUtYXBpLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL3Byb2R1Y3Rpb25cIixcblxuICAgICAgICAgICAgXCJ3c3M6Ly93ZWJydGMtc2lnbmFsLXNlcnZlci53YXNtNC5qd3EubW9lXCIsXG4gICAgICAgICAgICBcIndzczovL2l5dWF2dXJ1MmguZXhlY3V0ZS1hcGkuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb20vcHJvZHVjdGlvblwiXG4gICAgICAgIF07XG4gICAgICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIHNlcnZlcnMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9IG5ldyBXZWJTb2NrZXQoc2VydmVyKTtcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc29ja2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNvY2tldC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zb2NrZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBjb25uZWN0IHRvIHNpZ25hbCBzZXJ2ZXJcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHNvdXJjZSwgbWVzc2FnZSB9ID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBSZWNlaXZlZCAke21lc3NhZ2UudHlwZX0gbWVzc2FnZSBmcm9tICR7c291cmNlfWApO1xuICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2Uoc291cmNlLCBtZXNzYWdlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRmx1c2ggdGhlIG91dHB1dCBxdWV1ZVxuICAgICAgICBmb3IgKGNvbnN0IG91dHB1dCBvZiB0aGlzLmJ1ZmZlcmVkT3V0cHV0KSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5zZW5kKG91dHB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXJlZE91dHB1dC5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIHNlbmQgKHRhcmdldDogc3RyaW5nLCBtZXNzYWdlOiBNZXNzYWdlLCBkZWZlcklmTm90UmVhZHkgPSB0cnVlKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBTZW50ICR7bWVzc2FnZS50eXBlfSBtZXNzYWdlIHRvICR7dGFyZ2V0fWApO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBKU09OLnN0cmluZ2lmeSh7IHRhcmdldCwgbWVzc2FnZSB9KTtcbiAgICAgICAgaWYgKHRoaXMuc29ja2V0Py5yZWFkeVN0YXRlID09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnNlbmQob3V0cHV0KTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWZlcklmTm90UmVhZHkpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyZWRPdXRwdXQucHVzaChvdXRwdXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2UgKCkge1xuICAgICAgICB0aGlzLnNvY2tldD8uY2xvc2UoKTtcbiAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5rZWVwYWxpdmVJbnRlcnZhbCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEhhbmRsZXMgYnJva2VyaW5nIFAyUCBjb25uZWN0aW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBlZXJNYW5hZ2VyIHtcbiAgICByZWFkb25seSBsb2NhbFBlZXJJZDogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLyoqIFBlbmRpbmcgUDJQIGNvbm5lY3Rpb25zIHRoYXQgaGF2ZW4ndCBiZWVuIGZ1bGx5IGVzdGFibGlzaGVkIHlldC4gKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbm5lY3Rpb25zID0gbmV3IE1hcDxzdHJpbmcsUlRDUGVlckNvbm5lY3Rpb24+KCk7XG5cbiAgICAvKiogT3VyIGNvbm5lY3Rpb24gdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIuICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBzaWduYWxDbGllbnQ6IFNpZ25hbENsaWVudDtcblxuICAgIC8qKiBUaGUgSUNFIHNlcnZlcnMgd2Ugc2hvdWxkIHVzZSB0byBzZXR1cCBSVEMgY29ubmVjdGlvbnMuICovXG4gICAgcHJpdmF0ZSBpY2VTZXJ2ZXJzPzogUlRDSWNlU2VydmVyW107XG5cbiAgICBjb25zdHJ1Y3RvciAob25Db25uZWN0aW9uOiAoY29ubmVjdGlvbjogUlRDUGVlckNvbm5lY3Rpb24sIHJlbW90ZVBlZXJJZDogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICAgIGxldCByZXNvbHZlTG9jYWxQZWVySWQ6IChsb2NhbFBlZXJJZDogc3RyaW5nKSA9PiB2b2lkO1xuICAgICAgICB0aGlzLmxvY2FsUGVlcklkID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmVMb2NhbFBlZXJJZCA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2lnbmFsQ2xpZW50ID0gbmV3IFNpZ25hbENsaWVudChhc3luYyAoc291cmNlLCBtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIldIT0FNSV9SRVBMWVwiOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pY2VTZXJ2ZXJzID0gbWVzc2FnZS5pY2VTZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHJlc29sdmVMb2NhbFBlZXJJZChtZXNzYWdlLnlvdXJQZWVySWQpO1xuICAgICAgICAgICAgfSBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIk9GRkVSXCI6IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGlvbnMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IHRoaXMuY3JlYXRlQ29ubmVjdGlvbihzb3VyY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24obWVzc2FnZS5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uc2V0TG9jYWxEZXNjcmlwdGlvbihhd2FpdCBjb25uZWN0aW9uLmNyZWF0ZUFuc3dlcigpKTtcblxuICAgICAgICAgICAgICAgICAgICBvbkNvbm5lY3Rpb24oY29ubmVjdGlvbiwgc291cmNlKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpZ25hbENsaWVudC5zZW5kKHNvdXJjZSwgeyB0eXBlOiBcIkFOU1dFUlwiLCBkZXNjcmlwdGlvbjogY29ubmVjdGlvbi5sb2NhbERlc2NyaXB0aW9uIS50b0pTT04oKSB9KTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlY2VpdmVkIG9mZmVyIGZvciBhIGNvbm5lY3Rpb24gd2UgYWxyZWFkeSBpbml0aWF0ZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIkFOU1dFUlwiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbnMuZ2V0KHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihtZXNzYWdlLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiQ0FORElEQVRFXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9ucy5nZXQoc291cmNlKTtcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmFkZEljZUNhbmRpZGF0ZShuZXcgUlRDSWNlQ2FuZGlkYXRlKG1lc3NhZ2UuY2FuZGlkYXRlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIkFCT1JUXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9ucy5nZXQoc291cmNlKTtcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zaWduYWxDbGllbnQuc2VuZChcIlwiLCB7XG4gICAgICAgICAgICB0eXBlOiBcIldIT0FNSV9SRVFVRVNUXCIsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlQ29ubmVjdGlvbiAocGVlcklkOiBzdHJpbmcpOiBSVENQZWVyQ29ubmVjdGlvbiB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgaWNlU2VydmVyczogdGhpcy5pY2VTZXJ2ZXJzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9ucy5zZXQocGVlcklkLCBjb25uZWN0aW9uKTtcblxuICAgICAgICBjb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJuZWdvdGlhdGlvbm5lZWRlZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0aW9uLnNldExvY2FsRGVzY3JpcHRpb24oYXdhaXQgY29ubmVjdGlvbi5jcmVhdGVPZmZlcigpKTtcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsQ2xpZW50LnNlbmQocGVlcklkLCB7IHR5cGU6IFwiT0ZGRVJcIiwgZGVzY3JpcHRpb246IGNvbm5lY3Rpb24ubG9jYWxEZXNjcmlwdGlvbiEudG9KU09OKCkgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbm5lY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcihcImljZWNhbmRpZGF0ZVwiLCAoeyBjYW5kaWRhdGUgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsQ2xpZW50LnNlbmQocGVlcklkLCB7IHR5cGU6IFwiQ0FORElEQVRFXCIsIGNhbmRpZGF0ZTogY2FuZGlkYXRlLnRvSlNPTigpIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjb25uZWN0aW9uc3RhdGVjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBjb25uZWN0aW9uLmNvbm5lY3Rpb25TdGF0ZTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PSBcImNvbm5lY3RlZFwiIHx8IHN0YXRlID09IFwiZmFpbGVkXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBBZnRlciB0aGV5IGNvbm5lY3RlZCAob3IgZmFpbGVkIHRvIGNvbm5lY3QpLCB3ZSBkb24ndCBuZWVkIHRvIG1hbmFnZSB0aGlzXG4gICAgICAgICAgICAgICAgLy8gY29ubmVjdGlvbiBhbnltb3JlXG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9ucy5kZWxldGUocGVlcklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgfVxuXG4gICAgY29ubmVjdCAocmVtb3RlUGVlcklkOiBzdHJpbmcpOiBSVENQZWVyQ29ubmVjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25zLmdldChyZW1vdGVQZWVySWQpIHx8IHRoaXMuY3JlYXRlQ29ubmVjdGlvbihyZW1vdGVQZWVySWQpO1xuICAgIH1cblxuICAgIGNsb3NlICgpIHtcbiAgICAgICAgdGhpcy5zaWduYWxDbGllbnQuY2xvc2UoKTtcbiAgICAgICAgZm9yIChjb25zdCBbcGVlcklkLCBjb25uZWN0aW9uXSBvZiB0aGlzLmNvbm5lY3Rpb25zKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvKiogQSBzYWZlIG1heGltdW0gc2l6ZSBmb3IgV2ViUlRDIGRhdGEgY2hhbm5lbCBtZXNzYWdlcy4gKi9cbmNvbnN0IENBUEFDSVRZID0gMTYzODQ7XG5cbi8qKiBSZWNlaXZlcyBpbmNvbWluZyBiaW5hcnkgY2h1bmtzIGFuZCBnbHVlcyB0aGVtIGJhY2sgdG9nZXRoZXIuICovXG5leHBvcnQgY2xhc3MgQ2h1bmtSZWFkZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY2h1bmtzOiBVaW50OEFycmF5W10gPSBbXTtcbiAgICBwcml2YXRlIHNpemU6IG51bWJlciA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvciAoY2hhbm5lbDogUlRDRGF0YUNoYW5uZWwpIHtcbiAgICAgICAgY2hhbm5lbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBuZXcgVWludDhBcnJheShldmVudC5kYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUgKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkNIVU5LIHJlY2VpdmVkXCIsIGNodW5rLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZWFkICgpOiBVaW50OEFycmF5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHRoaXMuc2l6ZSk7XG4gICAgICAgIGxldCBkZXN0UG9zID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBjaHVuayBvZiB0aGlzLmNodW5rcykge1xuICAgICAgICAgICAgZGF0YS5zZXQoY2h1bmssIGRlc3RQb3MpO1xuICAgICAgICAgICAgZGVzdFBvcyArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xlYXIgdGhlIGxvY2FsIGJ1ZmZlclxuICAgICAgICB0aGlzLmNodW5rcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbn1cblxuLyoqIFNwbGl0cyBvdXRnb2luZyBiaW5hcnkgZGF0YSBpbnRvIGNodW5rcy4gKi9cbmV4cG9ydCBjbGFzcyBDaHVua1dyaXRlciB7XG4gICAgcHJpdmF0ZSBidWZmZXI6IFVpbnQ4QXJyYXkgfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSBzaXplOiBudW1iZXIgPSAwO1xuXG4gICAgY29uc3RydWN0b3IgKHByaXZhdGUgY2hhbm5lbDogUlRDRGF0YUNoYW5uZWwpIHtcbiAgICB9XG5cbiAgICB3cml0ZSAoc3JjOiBVaW50OEFycmF5KSB7XG4gICAgICAgIGlmICghdGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoQ0FQQUNJVFkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRlc3RQb3MgPSB0aGlzLnNpemU7XG4gICAgICAgIGxldCBzcmNQb3MgPSAwO1xuXG4gICAgICAgIHdoaWxlIChzcmNQb3MgPCBzcmMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBzbGljZSA9IHNyYy5zdWJhcnJheShzcmNQb3MsIHNyY1BvcyArIENBUEFDSVRZIC0gZGVzdFBvcyk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5zZXQoc2xpY2UsIGRlc3RQb3MpO1xuXG4gICAgICAgICAgICBzcmNQb3MgKz0gc2xpY2UubGVuZ3RoO1xuICAgICAgICAgICAgZGVzdFBvcyArPSBzbGljZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChkZXN0UG9zID49IENBUEFDSVRZKSB7XG4gICAgICAgICAgICAgICAgZGVzdFBvcyAtPSBDQVBBQ0lUWTtcblxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ0hVTksgc2VuZGluZ1wiLCB0aGlzLmJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5zZW5kKHRoaXMuYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2l6ZSA9IGRlc3RQb3M7XG4gICAgfVxuXG4gICAgZmx1c2ggKCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXIgJiYgdGhpcy5zaXplID4gMCkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJDSFVOSyBmbHVzaGluZ1wiLCB0aGlzLnNpemUpO1xuICAgICAgICAgICAgdGhpcy5jaGFubmVsLnNlbmQodGhpcy5idWZmZXIuc3ViYXJyYXkoMCwgdGhpcy5zaXplKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG4iLCIvKiogUmVhZHMgYSBzdHJlYW0gb2YgaW5kaXZpZHVhbCBiaXRzIGZyb20gYSBieXRlIGJ1ZmZlci4gKi9cbmV4cG9ydCBjbGFzcyBCaXRSZWFkZXIge1xuICAgIGNvbnN0cnVjdG9yIChwcml2YXRlIGJ1ZmZlcjogVWludDhBcnJheSwgcHVibGljIHBvc2l0aW9uID0gMCkge1xuICAgIH1cblxuICAgIHJlYWRCaXQgKCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9ICEhKHRoaXMuYnVmZmVyWyh0aGlzLnBvc2l0aW9uIC8gOCkgPj4+IDBdICYgKDEgPDwgKHRoaXMucG9zaXRpb24gJiA3KSkpO1xuICAgICAgICArK3RoaXMucG9zaXRpb247XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZWFkQml0cyAoc2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHZhbHVlID0gMDtcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IHNpemU7ICsraWkpIHtcbiAgICAgICAgICAgIHZhbHVlIHw9ICt0aGlzLnJlYWRCaXQoKSA8PCBpaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuXG4vKiogV3JpdGVzIGEgc3RyZWFtIG9mIGluZGl2aWR1YWwgYml0cyB0byBhIGJ5dGUgYnVmZmVyLiAqL1xuZXhwb3J0IGNsYXNzIEJpdFdyaXRlciB7XG4gICAgY29uc3RydWN0b3IgKHByaXZhdGUgYnVmZmVyOiBVaW50OEFycmF5LCBwdWJsaWMgcG9zaXRpb24gPSAwKSB7XG4gICAgfVxuXG4gICAgd3JpdGUxICgpIHtcbiAgICAgICAgdGhpcy5idWZmZXJbKHRoaXMucG9zaXRpb24gLyA4KSA+Pj4gMF0gfD0gMSA8PCAodGhpcy5wb3NpdGlvbiAmIDcpO1xuICAgICAgICArK3RoaXMucG9zaXRpb247XG4gICAgfVxuXG4gICAgd3JpdGUwICgpIHtcbiAgICAgICAgdGhpcy5idWZmZXJbKHRoaXMucG9zaXRpb24gLyA4KSA+Pj4gMF0gJj0gfigxIDw8ICh0aGlzLnBvc2l0aW9uICYgNykpO1xuICAgICAgICArK3RoaXMucG9zaXRpb247XG4gICAgfVxuXG4gICAgd3JpdGVCaXRzICh2YWx1ZTogbnVtYmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IHNpemU7ICsraWkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmICgxIDw8IGlpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMud3JpdGUxKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMud3JpdGUwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvKipcbiAqIEVzdGltYXRlcyBhbiBhdmVyYWdlIHZhbHVlIGZyb20gYSBzZXF1ZW5jZSwgdXNlZCBmb3IgZXN0aW1hdGluZyB0aGluZ3MgbGlrZSBwaW5nIGFuZCBmcmFtZSBkcmlmdC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vdmluZ0F2ZXJhZ2Uge1xuICAgIHB1YmxpYyBhdmVyYWdlID0gMDtcblxuICAgIHByaXZhdGUgZmlyc3RVcGRhdGUgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IgKHByaXZhdGUgZGlzY291bnQgPSAwLjEyNSkge1xuICAgIH1cblxuICAgIHVwZGF0ZSAodmFsdWU6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5maXJzdFVwZGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5maXJzdFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5hdmVyYWdlID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkaXNjb3VudCA9IHRoaXMuZGlzY291bnQ7XG4gICAgICAgICAgICB0aGlzLmF2ZXJhZ2UgPSAoMS1kaXNjb3VudCkqdGhpcy5hdmVyYWdlICsgZGlzY291bnQqdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTdGF0ZSB9IGZyb20gXCIuLi9zdGF0ZVwiO1xuaW1wb3J0IHsgUnVudGltZSB9IGZyb20gXCIuLi9ydW50aW1lXCI7XG5pbXBvcnQgeyBSb2xsYmFja01hbmFnZXIsIEhJU1RPUllfTEVOR1RIIH0gZnJvbSBcIi4vcm9sbGJhY2stbWFuYWdlclwiO1xuaW1wb3J0IHsgUGVlck1hbmFnZXIgfSBmcm9tIFwiLi9wZWVyLW1hbmFnZXJcIjtcbmltcG9ydCB7IENodW5rUmVhZGVyLCBDaHVua1dyaXRlciB9IGZyb20gXCIuL2NodW5rc1wiO1xuaW1wb3J0IHsgQml0UmVhZGVyLCBCaXRXcml0ZXIgfSBmcm9tIFwiLi9iaXRzXCI7XG5pbXBvcnQgeyBNb3ZpbmdBdmVyYWdlIH0gZnJvbSBcIi4vbW92aW5nLWF2ZXJhZ2VcIjtcblxuLyoqXG4gKiBGbGFnIGZvciBlYXNpZXIgbmV0cGxheSB0ZXN0aW5nLiBXaGVuIHRoaXMgaXMgb24sIG9wZW4gaHR0cDovL2xvY2FsaG9zdDozMDAwIHRvIGltbWVkaWF0ZWx5IHN0YXJ0XG4gKiBob3N0aW5nIG5ldHBsYXksIGFuZCBodHRwOi8vbG9jYWxob3N0OjMwMDAvIz9uZXRwbGF5PWhvc3QgaW4gYSBzZWNvbmQgd2luZG93IHRvIGNvbm5lY3QgdG8gaXQuXG4gKi9cbmV4cG9ydCBjb25zdCBERVZfTkVUUExBWSA9IGZhbHNlO1xuXG5jb25zdCBTSU1VTEFURV9MQUcgPSBmYWxzZTtcblxuY29uc3QgTUFYX09VVEJPVU5EX0lOUFVUUyA9IDIwO1xuXG4vLyBDYWxjdWxhdGUgb3VyIHdvcnN0IGNhc2UgdGljayBzaXplIGFuZCB1c2UgaXQgdG8gc2l6ZSBhIHJldXNhYmxlIGJ1ZmZlclxuY29uc3QgTUFYX1RJQ0tfU0laRSA9IDggKyBNYXRoLmNlaWwoKE1BWF9PVVRCT1VORF9JTlBVVFMgKiAoMSArIDgqNCkpLzgpO1xuY29uc3QgU0VORF9CVUZGRVIgPSBuZXcgQXJyYXlCdWZmZXIoTUFYX1RJQ0tfU0laRSk7XG5cbi8qKlxuICogQ29udHJvbCBtZXNzYWdlcyBzZW50IG92ZXIgdGhlIHJlbGlhYmxlIGRhdGEgY2hhbm5lbC5cbiAqXG4gKiBUaGUgaW5pdGlhbCBoYW5kc2hha2Ugd2hlbiBwZWVyIEEgY29ubmVjdHMgdG8gcGVlciBCIGdvZXMgbGlrZSB0aGlzOlxuICpcbiAqIDEuIEIg4oaSIFdFTENPTUUg4oaSIEFcbiAqIDIuIEEg4oaSIEpPSU5fUkVRVUVTVCDihpIgQlxuICogMy4gQiDihpIgKGJpbmFyeSBwYXlsb2FkIGNvbnRhaW5pbmcgdGhlIGNhcnQgYW5kIGdhbWUgc3RhdGUpIOKGkiBBXG4gKiA0LiBCIOKGkiBKT0lOX1JFUExZIOKGkiBBXG4gKlxuICogQXQgYW55IHBvaW50LCBhIHBlZXIgY2FuIHNlbmQgYSBQTEFZRVJfSU5GTyB0byBhbm90aGVyIHRvIGluZm9ybSB0aGVtIG9mIHRoZWlyIHBsYXllciBpbmRleC5cbiAqL1xudHlwZSBNZXNzYWdlID1cbiAgICBXZWxjb21lTWVzc2FnZSB8XG4gICAgSm9pblJlcXVlc3RNZXNzYWdlIHxcbiAgICBKb2luUmVwbHlNZXNzYWdlIHxcbiAgICBKb2luUmVqZWN0TWVzc2FnZSB8XG4gICAgUGxheWVySW5mb01lc3NhZ2U7XG5cbnR5cGUgV2VsY29tZU1lc3NhZ2UgPSB7XG4gICAgdHlwZTogXCJXRUxDT01FXCI7XG4gICAgb3RoZXJQZWVyczogc3RyaW5nW107XG59XG5cbnR5cGUgSm9pblJlcXVlc3RNZXNzYWdlID0ge1xuICAgIHR5cGU6IFwiSk9JTl9SRVFVRVNUXCI7XG59XG5cbnR5cGUgSm9pblJlcGx5TWVzc2FnZSA9IHtcbiAgICB0eXBlOiBcIkpPSU5fUkVQTFlcIjtcbiAgICB5b3VyUGxheWVySWR4OiBudW1iZXI7XG4gICAgZnJhbWU6IG51bWJlcjtcblxuICAgIC8vIFRoZSBvZmZzZXQgdG8gdGhlIHN0YXRlIGRhdGEgaW4gdGhlIGJpbmFyeSBwYXlsb2FkXG4gICAgc3RhdGVPZmZzZXQ6IG51bWJlcjtcbn1cblxuLyoqIFNlbnQgaW5zdGVhZCBvZiBKb2luUmVwbHkgaWYgdGhlIHJlcXVlc3QgZmFpbGVkIGZvciBzb21lIHJlYXNvbiwgc3VjaCBhcyB0aGUgZ2FtZSBiZWluZyBmdWxsLiAqL1xudHlwZSBKb2luUmVqZWN0TWVzc2FnZSA9IHtcbiAgICB0eXBlOiBcIkpPSU5fUkVKRUNUXCI7XG59XG5cbnR5cGUgUGxheWVySW5mb01lc3NhZ2UgPSB7XG4gICAgdHlwZTogXCJQTEFZRVJfSU5GT1wiO1xuICAgIHBsYXllcklkeDogbnVtYmVyO1xufVxuXG5jbGFzcyBSZW1vdGVQbGF5ZXIge1xuICAgIHBsYXllcklkeCA9IC0xO1xuXG4gICAgZnJhbWUgPSAwO1xuXG4gICAgbmV4dE5lZWRlZEZyYW1lID0gMDtcblxuICAgIG91dGJvdW5kRnJhbWUgPSAwO1xuICAgIHJlYWRvbmx5IG91dGJvdW5kSW5wdXRzOiBudW1iZXJbXSA9IFtdO1xuXG4gICAgLyoqIEVzdGltYXRlZCByb3VuZC10cmlwIHRpbWUgZm9yIHRoaXMgcGxheWVyLiAqL1xuICAgIHBpbmcgPSBuZXcgTW92aW5nQXZlcmFnZSgpO1xuXG4gICAgLyoqIEVzdGltYXRlZCBudW1iZXIgb2YgZnJhbWVzIHdlIGFyZSBhaGVhZCBvZiB0aGlzIHBsYXllci4gKi9cbiAgICByZWFkb25seSBkcmlmdCA9IG5ldyBNb3ZpbmdBdmVyYWdlKCk7XG5cbiAgICByZWFkb25seSBjaHVua1JlYWRlcjogQ2h1bmtSZWFkZXI7XG4gICAgcmVhZG9ubHkgY2h1bmtXcml0ZXI6IENodW5rV3JpdGVyO1xuXG4gICAgY29uc3RydWN0b3IgKHB1YmxpYyByZWFkb25seSBwZWVySWQ6IHN0cmluZywgcHJpdmF0ZSBjb25uZWN0aW9uOiBSVENQZWVyQ29ubmVjdGlvbixcbiAgICAgICAgICAgIHByaXZhdGUgcmVsaWFibGVDaGFubmVsOiBSVENEYXRhQ2hhbm5lbCwgcHJpdmF0ZSB1bnJlbGlhYmxlQ2hhbm5lbDogUlRDRGF0YUNoYW5uZWwpIHtcbiAgICAgICAgdGhpcy5jaHVua1JlYWRlciA9IG5ldyBDaHVua1JlYWRlcihyZWxpYWJsZUNoYW5uZWwpO1xuICAgICAgICB0aGlzLmNodW5rV3JpdGVyID0gbmV3IENodW5rV3JpdGVyKHJlbGlhYmxlQ2hhbm5lbCk7XG4gICAgfVxuXG4gICAgYWRkT3V0Ym91bmRJbnB1dCAoZnJhbWU6IG51bWJlciwgaW5wdXQ6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5vdXRib3VuZEZyYW1lID09IDApIHtcbiAgICAgICAgICAgIHRoaXMub3V0Ym91bmRGcmFtZSA9IGZyYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYW1lIDwgdGhpcy5vdXRib3VuZEZyYW1lKSB7XG4gICAgICAgICAgICAvLyBQcmVwZW5kIGlucHV0cyBzbyB0aGF0IG91ciBvdXRib3VuZCBpbnB1dHMgYXJlIGJhc2VkIG9uIHRoZSBuZXcgZnJhbWVcbiAgICAgICAgICAgIGZvciAobGV0IGNvdW50ID0gdGhpcy5vdXRib3VuZEZyYW1lIC0gZnJhbWU7IGNvdW50ID4gMDsgLS1jb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3V0Ym91bmRJbnB1dHMudW5zaGlmdChpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm91dGJvdW5kRnJhbWUgPSBmcmFtZTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZnJhbWVJZHggPSBmcmFtZSAtIHRoaXMub3V0Ym91bmRGcmFtZTtcblxuICAgICAgICAgICAgLy8gRW5zdXJlIHdlIG5ldmVyIG92ZXJ3cml0ZSBhIGZyYW1lIHdlIGFscmVhZHkgcXVldWVkIGlucHV0IGZvclxuICAgICAgICAgICAgaWYgKGZyYW1lSWR4ID49IHRoaXMub3V0Ym91bmRJbnB1dHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gUGFkIG91dCBhbnkgaW50ZXJtZWRpYXRlIGZyYW1lcyB3ZSBkb24ndCBoYXZlIGJ5IHJlcGVhdGluZyB0aGUgbGFzdCBpbnB1dFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGlpID0gdGhpcy5vdXRib3VuZElucHV0cy5sZW5ndGg7IGlpIDwgZnJhbWVJZHg7ICsraWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRib3VuZElucHV0c1tpaV0gPSAoaWkgPiAwKSA/IHRoaXMub3V0Ym91bmRJbnB1dHNbaWktMV0gOiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm91dGJvdW5kSW5wdXRzW2ZyYW1lSWR4XSA9IGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UgKG1lc3NhZ2U6IE1lc3NhZ2UpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFNlbmRpbmcgJHttZXNzYWdlLnR5cGV9IG1lc3NhZ2UgdG8gJHt0aGlzLnBlZXJJZH1gLCBtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5yZWxpYWJsZUNoYW5uZWwuc2VuZChKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgc2VuZFVucmVsaWFibGVCdWZmZXIgKGJ1ZmZlcjogVWludDhBcnJheSkge1xuICAgICAgICAvLyBTaW11bGF0ZSBhIGJhZCBjb25uZWN0aW9uIHdpdGggcGFja2V0IGxvc3MgYW5kIHVub3JkZXJlZCBkZWxpdmVyeVxuICAgICAgICBpZiAoU0lNVUxBVEVfTEFHKSB7XG4gICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuMDUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaW11bGF0ZWRUcmFuc21pc3Npb25EZWxheSA9IE1hdGgucmFuZG9tKCkqMzAgKyA1MDtcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBidWZmZXIuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudW5yZWxpYWJsZUNoYW5uZWwucmVhZHlTdGF0ZSA9PSBcIm9wZW5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51bnJlbGlhYmxlQ2hhbm5lbC5zZW5kKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBzaW11bGF0ZWRUcmFuc21pc3Npb25EZWxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVucmVsaWFibGVDaGFubmVsLnNlbmQoYnVmZmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlbmRQaW5nUmVxdWVzdCAoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRGF0YVZpZXcoU0VORF9CVUZGRVIpO1xuICAgICAgICBkYXRhLnNldFVpbnQ4KDAsIDIpOyAvLyB0eXBlID0gUElOR19SRVFVRVNUXG4gICAgICAgIGRhdGEuc2V0VWludDMyKDEsIHBlcmZvcm1hbmNlLm5vdygpID4+PiAwKTtcbiAgICAgICAgdGhpcy5zZW5kVW5yZWxpYWJsZUJ1ZmZlcihuZXcgVWludDhBcnJheShTRU5EX0JVRkZFUiwgMCwgNSkpO1xuICAgIH1cblxuICAgIHNlbmRQaW5nUmVwbHkgKHRpbWVzdGFtcDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRGF0YVZpZXcoU0VORF9CVUZGRVIpO1xuICAgICAgICBkYXRhLnNldFVpbnQ4KDAsIDMpOyAvLyB0eXBlID0gUElOR19SRVBMWVxuICAgICAgICBkYXRhLnNldFVpbnQzMigxLCB0aW1lc3RhbXApO1xuICAgICAgICB0aGlzLnNlbmRVbnJlbGlhYmxlQnVmZmVyKG5ldyBVaW50OEFycmF5KFNFTkRfQlVGRkVSLCAwLCA1KSk7XG4gICAgfVxuXG4gICAgc2VuZFRpY2sgKGN1cnJlbnRGcmFtZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRGF0YVZpZXcoU0VORF9CVUZGRVIpO1xuICAgICAgICBkYXRhLnNldFVpbnQ4KDAsIDEpOyAvLyB0eXBlID0gVElDS1xuXG4gICAgICAgIC8vIFdlIGRlbHRhIGVuY29kZSBmcmFtZSBudW1iZXJzIHJlbGF0aXZlIHRvIHRoZSBmaXJzdCBiYXNlIGZyYW1lIHRvIHNhdmUgc3BhY2VcbiAgICAgICAgZGF0YS5zZXRVaW50MzIoMSwgY3VycmVudEZyYW1lKTsgLy8gZnJhbWVcbiAgICAgICAgZGF0YS5zZXRJbnQ4KDUsICh0aGlzLm5leHROZWVkZWRGcmFtZSA9PSAwKSA/IC0xMjcgOiB0aGlzLm5leHROZWVkZWRGcmFtZSAtIGN1cnJlbnRGcmFtZSk7IC8vIHJlcXVlc3RlZEZyYW1lXG4gICAgICAgIGRhdGEuc2V0SW50OCg2LCB0aGlzLm91dGJvdW5kRnJhbWUgLSBjdXJyZW50RnJhbWUpOyAvLyBpbnB1dEZyYW1lXG4gICAgICAgIGRhdGEuc2V0VWludDgoNywgdGhpcy5vdXRib3VuZElucHV0cy5sZW5ndGgpOyAvLyBpbnB1dENvdW50XG5cbiAgICAgICAgLy8gUGFjayBpbnB1dHMgaW50byBhIHN0cmVhbSBvZiBiaXRzOlxuICAgICAgICAvLyAxTk5OOiBUb2dnbGUgYnV0dG9uIE5cbiAgICAgICAgLy8gMDogQWR2YW5jZSB0byBuZXh0IGZyYW1lJ3MgaW5wdXRzXG4gICAgICAgIGNvbnN0IGlucHV0V3JpdGVyID0gbmV3IEJpdFdyaXRlcihuZXcgVWludDhBcnJheShTRU5EX0JVRkZFUiwgOCkpO1xuICAgICAgICBsZXQgcHJldklucHV0ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBpbnB1dCBvZiB0aGlzLm91dGJvdW5kSW5wdXRzKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkID0gcHJldklucHV0IF4gaW5wdXQ7XG4gICAgICAgICAgICBwcmV2SW5wdXQgPSBpbnB1dDtcbiAgICAgICAgICAgIGZvciAobGV0IGJ1dHRvbiA9IDA7IGJ1dHRvbiA8IDg7ICsrYnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZWQgJiAoMSA8PCBidXR0b24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0V3JpdGVyLndyaXRlMSgpO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFdyaXRlci53cml0ZUJpdHMoYnV0dG9uLCAzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dFdyaXRlci53cml0ZTAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ5dGVMZW5ndGggPSA4ICsgTWF0aC5jZWlsKGlucHV0V3JpdGVyLnBvc2l0aW9uIC8gOCk7XG4gICAgICAgIHRoaXMuc2VuZFVucmVsaWFibGVCdWZmZXIobmV3IFVpbnQ4QXJyYXkoU0VORF9CVUZGRVIsIDAsIGJ5dGVMZW5ndGgpKTtcbiAgICB9XG5cbiAgICBjbG9zZSAoKSB7XG4gICAgICAgIHRoaXMucmVsaWFibGVDaGFubmVsLmNsb3NlKCk7XG4gICAgICAgIHRoaXMudW5yZWxpYWJsZUNoYW5uZWwuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEhhbmRsZXMgY29ubmVjdGlvbnMgYW5kIG1lc3NhZ2luZyBiZXR3ZWVuIG90aGVyIHBsYXllcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOZXRwbGF5IHtcbiAgICBwcml2YXRlIHJvbGxiYWNrTWdyPzogUm9sbGJhY2tNYW5hZ2VyO1xuICAgIHByaXZhdGUgcGVlck1ncjogUGVlck1hbmFnZXI7XG5cbiAgICBwcml2YXRlIHJlbW90ZVBsYXllcnMgPSBuZXcgTWFwPHN0cmluZyxSZW1vdGVQbGF5ZXI+KCk7XG4gICAgcHJpdmF0ZSBsb2NhbFBsYXllcklkeCA9IC0xO1xuXG4gICAgcHJpdmF0ZSB1cGRhdGVDb3VudCA9IDA7XG5cbiAgICAvLyBDYWxsYmFja3MgZm9yIHNob3dpbmcgVUkgbm90aWZpY2F0aW9uc1xuICAgIG9uc3RhcnQ/OiAocGxheWVySWR4OiBudW1iZXIpID0+IHZvaWQ7XG4gICAgb25qb2luPzogKHBsYXllcklkeDogbnVtYmVyKSA9PiB2b2lkO1xuICAgIG9ubGVhdmU/OiAocGxheWVySWR4OiBudW1iZXIpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBydW50aW1lOiBSdW50aW1lKSB7XG4gICAgICAgIHRoaXMucGVlck1nciA9IG5ldyBQZWVyTWFuYWdlcihhc3luYyAoY29ubmVjdGlvbiwgcGVlcklkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvdGhlclBlZXJzID0gQXJyYXkuZnJvbSh0aGlzLnJlbW90ZVBsYXllcnMua2V5cygpKTtcblxuICAgICAgICAgICAgLy8gV2hlbiBhIHBlZXIgY29ubmVjdHMgdG8gdXMsIHNlbmQgdGhlbSBhIHdlbGNvbWUgbWVzc2FnZSBjb250YWluaW5nIGFsbCBvdGhlciBwZWVyIElEc1xuICAgICAgICAgICAgLy8gc28gdGhleSBjYW4gY29ubmVjdCB0byB0aGUgZW50aXJlIG1lc2hcbiAgICAgICAgICAgIGNvbnN0IHJlbW90ZVBsYXllciA9IGF3YWl0IHRoaXMuY3JlYXRlUmVtb3RlUGxheWVyKGNvbm5lY3Rpb24sIHBlZXJJZCk7XG4gICAgICAgICAgICByZW1vdGVQbGF5ZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiV0VMQ09NRVwiLFxuICAgICAgICAgICAgICAgIG90aGVyUGVlcnMsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQWxzbyBpbmZvcm0gdGhlbSBvZiBvdXIgb3duIHBsYXllciBzdGF0ZVxuICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxQbGF5ZXJJZHggPj0gMCkge1xuICAgICAgICAgICAgICAgIHJlbW90ZVBsYXllci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUExBWUVSX0lORk9cIixcbiAgICAgICAgICAgICAgICAgICAgcGxheWVySWR4OiB0aGlzLmxvY2FsUGxheWVySWR4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBob3N0ICgpIHtcbiAgICAgICAgdGhpcy5ydW50aW1lLnNldE5ldHBsYXkoMCk7XG5cbiAgICAgICAgLy8gU3RhcnQgYXQgZnJhbWUgMSBiZWNhdXNlIHdlIHRyZWF0IGZyYW1lIDAgYXMgYSBcIm51bGxcIiBzdGF0ZVxuICAgICAgICB0aGlzLnJvbGxiYWNrTWdyID0gbmV3IFJvbGxiYWNrTWFuYWdlcigxLCB0aGlzLnJ1bnRpbWUpO1xuICAgICAgICB0aGlzLmxvY2FsUGxheWVySWR4ID0gMDtcbiAgICB9XG5cbiAgICBqb2luIChwZWVySWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gdGhpcy5wZWVyTWdyLmNvbm5lY3QocGVlcklkKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZW1vdGVQbGF5ZXIoY29ubmVjdGlvbiwgcGVlcklkKS50aGVuKHJlbW90ZVBsYXllciA9PiB7XG4gICAgICAgICAgICByZW1vdGVQbGF5ZXIuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIkpPSU5fUkVRVUVTVFwiIH0pO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLnJ1bnRpbWUuYmx1ZVNjcmVlbihcIkZhaWxlZCB0byBjb25uZWN0XFxudG8gcGVlci4gVGhleSBtYXlcXG5iZSBvZmZsaW5lP1wiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0SW52aXRlTGluayAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgbG9jYWxQZWVySWQgPSBhd2FpdCB0aGlzLnBlZXJNZ3IubG9jYWxQZWVySWQ7XG5cbiAgICAgICAgY29uc3QgbG9jID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgICBpZiAobG9jLnByb3RvY29sID09IFwiZmlsZTpcIlxuICAgICAgICAgICAgfHwgbG9jLmhvc3RuYW1lID09IFwibG9jYWxob3N0XCJcbiAgICAgICAgICAgIHx8IGxvYy5ob3N0bmFtZSA9PSBcIjEyNy4wLjAuMVwiXG4gICAgICAgICAgICB8fCBsb2MuaG9zdG5hbWUgPT0gXCJ3YXNtNC5vcmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIGBodHRwczovL3dhc200Lm9yZy9uZXRwbGF5LyMke2xvY2FsUGVlcklkfWA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChsb2MuaHJlZik7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCduZXRwbGF5JywgbG9jYWxQZWVySWQpO1xuICAgICAgICByZXR1cm4gdXJsLmhyZWY7XG4gICAgfVxuXG4gICAgY2xvc2UgKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHJlbW90ZVBsYXllciBvZiB0aGlzLnJlbW90ZVBsYXllcnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHJlbW90ZVBsYXllci5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVlck1nci5jbG9zZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlUmVtb3RlUGxheWVyIChjb25uZWN0aW9uOiBSVENQZWVyQ29ubmVjdGlvbiwgcGVlcklkOiBzdHJpbmcpOiBQcm9taXNlPFJlbW90ZVBsYXllcj4ge1xuICAgICAgICBmdW5jdGlvbiBjcmVhdGVEYXRhQ2hhbm5lbCAoY29uZmlnOiBSVENEYXRhQ2hhbm5lbEluaXQpOiBQcm9taXNlPFJUQ0RhdGFDaGFubmVsPiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5uZWwgPSBjb25uZWN0aW9uLmNyZWF0ZURhdGFDaGFubmVsKFwiV0FTTS00XCIsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgY2hhbm5lbC5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuXG4gICAgICAgICAgICAgICAgY2hhbm5lbC5vbm9wZW4gPSAoKSA9PiB7IHJlc29sdmUoY2hhbm5lbCkgfTtcbiAgICAgICAgICAgICAgICBjaGFubmVsLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFsgcmVsaWFibGVDaGFubmVsLCB1bnJlbGlhYmxlQ2hhbm5lbCBdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgY3JlYXRlRGF0YUNoYW5uZWwoeyBuZWdvdGlhdGVkOiB0cnVlLCBpZDogMCB9KSxcbiAgICAgICAgICAgIGNyZWF0ZURhdGFDaGFubmVsKHsgbmVnb3RpYXRlZDogdHJ1ZSwgaWQ6IDEsIG9yZGVyZWQ6IGZhbHNlLCBtYXhSZXRyYW5zbWl0czogMCB9KSxcbiAgICAgICAgICAgIC8vIFRPRE8oMjAyMi0wMy0yNCk6IEFkZCBjb25uZWN0aW9uIHRpbWVvdXRcbiAgICAgICAgXSk7XG5cbiAgICAgICAgY29uc3QgcmVtb3RlUGxheWVyID0gbmV3IFJlbW90ZVBsYXllcihwZWVySWQsIGNvbm5lY3Rpb24sIHJlbGlhYmxlQ2hhbm5lbCwgdW5yZWxpYWJsZUNoYW5uZWwpO1xuICAgICAgICB0aGlzLnJlbW90ZVBsYXllcnMuc2V0KHBlZXJJZCwgcmVtb3RlUGxheWVyKTtcblxuICAgICAgICBjb25zdCBvbkNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVtb3RlUGxheWVycy5oYXMocGVlcklkKSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBQZWVyICR7cGVlcklkfSBsZWZ0YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdGVQbGF5ZXJzLmRlbGV0ZShwZWVySWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25sZWF2ZSAmJiByZW1vdGVQbGF5ZXIucGxheWVySWR4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmxlYXZlKHJlbW90ZVBsYXllci5wbGF5ZXJJZHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29ubmVjdGlvbi5hZGRFdmVudExpc3RlbmVyKFwiY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmNvbm5lY3Rpb25TdGF0ZSA9PSBcImRpc2Nvbm5lY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgb25DbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmVsaWFibGVDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCBvbkNsb3NlKTtcbiAgICAgICAgdW5yZWxpYWJsZUNoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIG9uQ2xvc2UpO1xuXG4gICAgICAgIHJlbGlhYmxlQ2hhbm5lbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBhc3luYyBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50LmRhdGEgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gSWdub3JlIGJpbmFyeSBkYXRhXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpIGFzIE1lc3NhZ2U7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgJHttZXNzYWdlLnR5cGV9IG1lc3NhZ2UgZnJvbSAke3BlZXJJZH1gLCBtZXNzYWdlKTtcblxuICAgICAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJXRUxDT01FXCI6IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBlZXJJZCBvZiBtZXNzYWdlLm90aGVyUGVlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlbW90ZVBsYXllcnMuaGFzKHBlZXJJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB0aGlzLnBlZXJNZ3IuY29ubmVjdChwZWVySWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3RlUGxheWVyID0gYXdhaXQgdGhpcy5jcmVhdGVSZW1vdGVQbGF5ZXIoY29ubmVjdGlvbiwgcGVlcklkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxQbGF5ZXJJZHggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZVBsYXllci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUExBWUVSX0lORk9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVySWR4OiB0aGlzLmxvY2FsUGxheWVySWR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIkpPSU5fUkVRVUVTVFwiOiB7XG4gICAgICAgICAgICAgICAgLy8gQXNzaWduIHRoZW0gYSBwbGF5ZXIgaW5kZXhcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJJZHggPSB0aGlzLm5leHRQbGF5ZXJJZHgoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJJZHggPj0gNCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHYW1lIGlzIGFscmVhZHkgZnVsbFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVQbGF5ZXIuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIkpPSU5fUkVKRUNUXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZVBsYXllci5jbG9zZSgpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlUGxheWVyLnBsYXllcklkeCA9IHBsYXllcklkeDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZW5kIHRoZSBjYXJ0IGRhdGFcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlUGxheWVyLmNodW5rV3JpdGVyLndyaXRlKHRoaXMucnVudGltZS53YXNtQnVmZmVyISk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQW5kIHRoZSBnYW1lIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gbmV3IFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnJlYWQodGhpcy5ydW50aW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlUGxheWVyLmNodW5rV3JpdGVyLndyaXRlKHN0YXRlLnRvQnl0ZXMoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlUGxheWVyLmNodW5rV3JpdGVyLmZsdXNoKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlUGxheWVyLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiSk9JTl9SRVBMWVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeW91clBsYXllcklkeDogcmVtb3RlUGxheWVyLnBsYXllcklkeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lOiB0aGlzLnJvbGxiYWNrTWdyIS5jdXJyZW50RnJhbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZU9mZnNldDogdGhpcy5ydW50aW1lLndhc21CdWZmZXIhLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uam9pbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmpvaW4ocmVtb3RlUGxheWVyLnBsYXllcklkeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiSk9JTl9SRVBMWVwiOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbFBsYXllcklkeCA9IG1lc3NhZ2UueW91clBsYXllcklkeDtcblxuICAgICAgICAgICAgICAgIC8vIFRlbGwgYWxsIG90aGVyIHBlZXJzIGFib3V0IG91ciBuZXcgcGxheWVyIGluZm9cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG90aGVyUGxheWVyIG9mIHRoaXMucmVtb3RlUGxheWVycy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3RoZXJQbGF5ZXIgIT0gcmVtb3RlUGxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdGhlclBsYXllci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJQTEFZRVJfSU5GT1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllcklkeDogdGhpcy5sb2NhbFBsYXllcklkeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSByZW1vdGVQbGF5ZXIuY2h1bmtSZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhcnRCeXRlcyA9IGJ5dGVzLnN1YmFycmF5KDAsIG1lc3NhZ2Uuc3RhdGVPZmZzZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlQnl0ZXMgPSBieXRlcy5zdWJhcnJheShtZXNzYWdlLnN0YXRlT2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIC8vIExvYWQgdGhlIGNhcnQsIGlnbm9yaW5nIGZpbGUgc2l6ZSBsaW1pdHMgc28gbmV0cGxheSB3b3JrcyBldmVuIGR1cmluZyBkZXZlbG9wbWVudFxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucnVudGltZS5sb2FkKGNhcnRCeXRlcywgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBuZXcgU3RhdGUoKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5mcm9tQnl0ZXMoc3RhdGVCeXRlcyk7XG4gICAgICAgICAgICAgICAgc3RhdGUud3JpdGUodGhpcy5ydW50aW1lKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucnVudGltZS5zZXROZXRwbGF5KHRoaXMubG9jYWxQbGF5ZXJJZHgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yb2xsYmFja01nciA9IG5ldyBSb2xsYmFja01hbmFnZXIobWVzc2FnZS5mcmFtZSwgdGhpcy5ydW50aW1lKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbnN0YXJ0KHRoaXMubG9jYWxQbGF5ZXJJZHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJKT0lOX1JFSkVDVFwiOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ydW50aW1lLmJsdWVTY3JlZW4oXCJDb25uZWN0ZWQsIGJ1dCB0aGVcXG5nYW1lIGlzIGFscmVhZHlcXG5mdWxsIVwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiUExBWUVSX0lORk9cIjoge1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdGVQbGF5ZXIucGxheWVySWR4ID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZVBsYXllci5wbGF5ZXJJZHggPSBtZXNzYWdlLnBsYXllcklkeDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKDIwMjItMDQtMDMpOiBEb24ndCBzZW5kIHRoaXMgZm9yIGluaXRpYWxseSBqb2luaW5nIGNsaWVudHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25qb2luKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uam9pbihyZW1vdGVQbGF5ZXIucGxheWVySWR4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHVucmVsaWFibGVDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGFzeW5jIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGV2ZW50LmRhdGEgYXMgQXJyYXlCdWZmZXI7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG5cbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBkYXRhLmdldFVpbnQ4KDApO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIDE6IHsgLy8gVElDS1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBpZiB3ZSBoYXZlbid0IHN0YXJ0ZWQgb3VyIGxvY2FsIHNpbXVsYXRpb24sIG9yIHdlIGhhdmVuJ3QgeWV0IHJlY2VpdmVkIGFcbiAgICAgICAgICAgICAgICAvLyBwbGF5ZXIgaW5kZXggZnJvbSB0aGlzIHBlZXJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb2xsYmFja01nciAmJiByZW1vdGVQbGF5ZXIucGxheWVySWR4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWUgPSBkYXRhLmdldFVpbnQzMigxKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWUgPiByZW1vdGVQbGF5ZXIuZnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlZEZyYW1lID0gZGF0YS5nZXRJbnQ4KDUpICsgZnJhbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dEZyYW1lID0gZGF0YS5nZXRJbnQ4KDYpICsgZnJhbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dENvdW50ID0gZGF0YS5nZXRVaW50OCg3KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5wYWNrIGlucHV0c1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRSZWFkZXIgPSBuZXcgQml0UmVhZGVyKG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgOCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRzID0gbmV3IEFycmF5KGlucHV0Q291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByZXZJbnB1dCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgaW5wdXRDb3VudDsgKytpaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpbnB1dFJlYWRlci5yZWFkQml0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gaW5wdXRSZWFkZXIucmVhZEJpdHMoMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZJbnB1dCBePSAoMSA8PCBidXR0b24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNbaWldID0gcHJldklucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVQbGF5ZXIuZnJhbWUgPSBmcmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZVBsYXllci5uZXh0TmVlZGVkRnJhbWUgPSBpbnB1dEZyYW1lICsgaW5wdXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIG91dGJvdW5kRnJhbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVQbGF5ZXIub3V0Ym91bmRGcmFtZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlUGxheWVyLm91dGJvdW5kRnJhbWUgPSByZXF1ZXN0ZWRGcmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdGVkRnJhbWUgPiByZW1vdGVQbGF5ZXIub3V0Ym91bmRGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaW0gbm8gbG9uZ2VyIG5lZWRlZCBpbnB1dHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWx0YSA9IHJlcXVlc3RlZEZyYW1lIC0gcmVtb3RlUGxheWVyLm91dGJvdW5kRnJhbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlUGxheWVyLm91dGJvdW5kRnJhbWUgPSByZXF1ZXN0ZWRGcmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVQbGF5ZXIub3V0Ym91bmRJbnB1dHMuc3BsaWNlKDAsIGRlbHRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuIGVzdGltYXRlIHRoZSByZW1vdGUgZnJhbWUgYnkgb2Zmc2V0dGluZyBoYWxmIHRoZSBwaW5nIChSVFQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlc3RpbWF0ZWRSZW1vdGVGcmFtZSA9IGZyYW1lICsgMC41KnJlbW90ZVBsYXllci5waW5nLmF2ZXJhZ2UqNjAvMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZGlmZmVyZW5jZSBhbmQgdXBkYXRlIG91ciBkcmlmdFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZHJpZnQgPSB0aGlzLnJvbGxiYWNrTWdyLmN1cnJlbnRGcmFtZSAtIGVzdGltYXRlZFJlbW90ZUZyYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlUGxheWVyLmRyaWZ0LnVwZGF0ZShkcmlmdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSByZW1vdGUgaW5wdXRzIHRvIHRoZSBsb2NhbCBzaW11bGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvbGxiYWNrTWdyLmFkZElucHV0cyhyZW1vdGVQbGF5ZXIucGxheWVySWR4LCBpbnB1dEZyYW1lLCBpbnB1dHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAyOiB7IC8vIFBJTkdfUkVRVUVTVFxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IGRhdGEuZ2V0VWludDMyKDEpO1xuICAgICAgICAgICAgICAgIHJlbW90ZVBsYXllci5zZW5kUGluZ1JlcGx5KHRpbWVzdGFtcCk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM6IHsgLy8gUElOR19SRVBMWVxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IGRhdGEuZ2V0VWludDMyKDEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpbmcgPSAocGVyZm9ybWFuY2Uubm93KCkgPj4+IDApIC0gdGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIHJlbW90ZVBsYXllci5waW5nLnVwZGF0ZShwaW5nKTtcbiAgICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZW1vdGVQbGF5ZXI7XG4gICAgfVxuXG4gICAgLyoqIFJldHVybnMgdGhlIG5leHQgYXZhaWxhYmxlIHBsYXllciBpbmRleCwgb3IgLTEuICovXG4gICAgcHJpdmF0ZSBuZXh0UGxheWVySWR4ICgpIHtcbiAgICAgICAgb3V0ZXI6IGZvciAobGV0IHBsYXllcklkeCA9IDA7IHBsYXllcklkeCA8IDQ7ICsrcGxheWVySWR4KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sb2NhbFBsYXllcklkeCA9PSBwbGF5ZXJJZHgpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVtb3RlUGxheWVyIG9mIHRoaXMucmVtb3RlUGxheWVycy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdGVQbGF5ZXIucGxheWVySWR4ID09IHBsYXllcklkeCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGxheWVySWR4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICB1cGRhdGUgKGxvY2FsSW5wdXQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXRoaXMucm9sbGJhY2tNZ3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gTm90IGpvaW5lZCB5ZXRcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBlcmZvcm0gY2VydGFpbiBhY3Rpb25zIG9ubHkgb25jZSBldmVyeSBmZXcgdGlja3NcbiAgICAgICAgY29uc3QgZXZlcnk4VGlja3MgPSAodGhpcy51cGRhdGVDb3VudCAmIDcpID09IDA7XG4gICAgICAgIGNvbnN0IGV2ZXJ5MzJUaWNrcyA9ICh0aGlzLnVwZGF0ZUNvdW50ICYgMzEpID09IDA7XG4gICAgICAgICsrdGhpcy51cGRhdGVDb3VudDtcblxuICAgICAgICBjb25zdCBjdXJyZW50RnJhbWUgPSB0aGlzLnJvbGxiYWNrTWdyLmN1cnJlbnRGcmFtZTtcbiAgICAgICAgY29uc3QgaW5wdXREZWxheSA9IDI7XG4gICAgICAgIGNvbnN0IGlucHV0RnJhbWUgPSBjdXJyZW50RnJhbWUgKyBpbnB1dERlbGF5O1xuXG4gICAgICAgIC8vIEFkZCBvdXIgaW5wdXQgdG8gdGhlIGxvY2FsIHNpbXVsYXRpb25cbiAgICAgICAgdGhpcy5yb2xsYmFja01nci5hZGRJbnB1dHModGhpcy5sb2NhbFBsYXllcklkeCwgaW5wdXRGcmFtZSwgWyBsb2NhbElucHV0IF0pO1xuXG4gICAgICAgIGxldCBzdGFsbCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAoY29uc3QgcmVtb3RlUGxheWVyIG9mIHRoaXMucmVtb3RlUGxheWVycy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgLy8gRW5xdWV1ZSBvdXIgaW5wdXQgdG8gc2VuZCB0byB0aGUgcmVtb3RlIHBsYXllclxuICAgICAgICAgICAgcmVtb3RlUGxheWVyLmFkZE91dGJvdW5kSW5wdXQoaW5wdXRGcmFtZSwgbG9jYWxJbnB1dCk7XG5cbiAgICAgICAgICAgIHJlbW90ZVBsYXllci5zZW5kVGljayhjdXJyZW50RnJhbWUpO1xuXG4gICAgICAgICAgICAvLyBTdGFsbCBpZiB3ZSdyZSBzdGFydmVkIGZvciBpbnB1dCBmcm9tIHRoaXMgcGxheWVyLCBvciB0aGUgb3V0Ym91bmQgYnVmZmVyIGlzIGZ1bGxcbiAgICAgICAgICAgIGlmIChyZW1vdGVQbGF5ZXIubmV4dE5lZWRlZEZyYW1lIDwgY3VycmVudEZyYW1lIC0gSElTVE9SWV9MRU5HVEggfHwgcmVtb3RlUGxheWVyLm91dGJvdW5kSW5wdXRzLmxlbmd0aCA+PSBNQVhfT1VUQk9VTkRfSU5QVVRTKSB7XG4gICAgICAgICAgICAgICAgc3RhbGwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXZlcnkzMlRpY2tzKSB7XG4gICAgICAgICAgICAgICAgcmVtb3RlUGxheWVyLnNlbmRQaW5nUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZXJ5OFRpY2tzKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBtb3JlIHRoYW4gb25lIGZyYW1lIGFoZWFkIG9mIGV2ZXJ5Ym9keSBlbHNlLCBzdGFsbCB0aGlzIGZyYW1lIGFuZCBldmVudHVhbGx5XG4gICAgICAgICAgICAvLyB0aGV5J2xsIGNhdGNoIHVwIHRvIHVzXG4gICAgICAgICAgICBsZXQgbWF4RHJpZnQgPSAwO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZW1vdGVQbGF5ZXIgb2YgdGhpcy5yZW1vdGVQbGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgbWF4RHJpZnQgPSBNYXRoLm1heChyZW1vdGVQbGF5ZXIuZHJpZnQuYXZlcmFnZSwgbWF4RHJpZnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1heERyaWZ0ID49IDEpIHtcbiAgICAgICAgICAgICAgICBzdGFsbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN0YWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJvbGxiYWNrTWdyLnVwZGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTVEFMTFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC8vIFRlbXBvcmFyeSBkZWJ1ZyBpbmZvIHRvIHNob3cgaW4gZGV2dG9vbHMgbGl2ZSBleHByZXNzaW9uc1xuICAgICAgICAvLyBjb25zdCBkZWJ1ZyA9IFtdO1xuICAgICAgICAvLyBkZWJ1Zy5wdXNoKGBmcmFtZT0ke2N1cnJlbnRGcmFtZX0gaW5wdXREZWxheT0ke2lucHV0RGVsYXl9YCk7XG4gICAgICAgIC8vIGZvciAoY29uc3QgcmVtb3RlUGxheWVyIG9mIHRoaXMucmVtb3RlUGxheWVycy52YWx1ZXMoKSkge1xuICAgICAgICAvLyAgICAgZGVidWcucHVzaChgUGxheWVyICMke3JlbW90ZVBsYXllci5wbGF5ZXJJZHh9OiBwaW5nPSR7TWF0aC5yb3VuZChyZW1vdGVQbGF5ZXIucGluZy5hdmVyYWdlKX0gZHJpZnQ9JHtyZW1vdGVQbGF5ZXIuZHJpZnQuYXZlcmFnZS50b0ZpeGVkKDIpfSBvdXRib3VuZElucHV0cz0ke3JlbW90ZVBsYXllci5vdXRib3VuZElucHV0cy5sZW5ndGh9YCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gKHdpbmRvdyBhcyBhbnkpLk5FVFBMQVlfREVCVUcgPSBkZWJ1Zy5qb2luKFwiIC8gXCIpO1xuXG4gICAgICAgIHJldHVybiAhc3RhbGw7XG4gICAgfVxuXG4gICAgLyoqIEdldCBhIHBsYXllciBzdW1tYXJ5IGZvciBVSSBkaXNwbGF5LiAqL1xuICAgIGdldFN1bW1hcnkgKCk6IHsgcGxheWVySWR4OiBudW1iZXIsIHBpbmc6IG51bWJlciB9W10ge1xuICAgICAgICBjb25zdCBzdW1tYXJ5ID0gW3sgcGxheWVySWR4OiB0aGlzLmxvY2FsUGxheWVySWR4LCBwaW5nOiAtMSB9XTtcbiAgICAgICAgZm9yIChjb25zdCByZW1vdGVQbGF5ZXIgb2YgdGhpcy5yZW1vdGVQbGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBzdW1tYXJ5LnB1c2goeyBwbGF5ZXJJZHg6IHJlbW90ZVBsYXllci5wbGF5ZXJJZHgsIHBpbmc6IHJlbW90ZVBsYXllci5waW5nLmF2ZXJhZ2UgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3VtbWFyeS5zb3J0KChhLCBiKSA9PiBhLnBsYXllcklkeCAtIGIucGxheWVySWR4KTtcbiAgICAgICAgcmV0dXJuIHN1bW1hcnk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgXCJcXFwidXNlIHN0cmljdFxcXCI7KCgpPT57dmFyIE09TWF0aC5mbG9vcig0NC4xKSxiPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5mcmVxMT0wO3RoaXMuZnJlcTI9MDt0aGlzLnN0YXJ0VGltZT0wO3RoaXMuYXR0YWNrVGltZT0wO3RoaXMuZGVjYXlUaW1lPTA7dGhpcy5zdXN0YWluVGltZT0wO3RoaXMucmVsZWFzZVRpbWU9MDt0aGlzLmVuZFRpY2s9MDt0aGlzLnN1c3RhaW5Wb2x1bWU9MDt0aGlzLnBlYWtWb2x1bWU9MDt0aGlzLnBoYXNlPTA7dGhpcy5wYW49MDt0aGlzLnB1bHNlRHV0eUN5Y2xlPTA7dGhpcy5ub2lzZVNlZWQ9MTt0aGlzLm5vaXNlTGFzdFJhbmRvbT0wfX07ZnVuY3Rpb24gTChtLGUscyl7cmV0dXJuIG0rcyooZS1tKX1mdW5jdGlvbiBWKG0sZSl7aWYobTxlKXtsZXQgcz1tL2U7cmV0dXJuIHMrcy1zKnN9ZWxzZSBpZihtPjEtZSl7bGV0IHM9KG0tKDEtZSkpL2U7cmV0dXJuIDEtKHMrcy1zKnMpfWVsc2UgcmV0dXJuIDF9ZnVuY3Rpb24geChtLGUpe3JldHVybiBNYXRoLnBvdygyLChtLTY5K2UvMjU2KS8xMikqNDQwfXZhciB5PWNsYXNzIGV4dGVuZHMgQXVkaW9Xb3JrbGV0UHJvY2Vzc29ye2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLnRpbWU9MCx0aGlzLnRpY2tzPTAsdGhpcy5jaGFubmVscz1uZXcgQXJyYXkoNCk7Zm9yKGxldCBlPTA7ZTw0OysrZSl0aGlzLmNoYW5uZWxzW2VdPW5ldyBiO3RoaXMucG9ydCE9bnVsbCYmKHRoaXMucG9ydC5vbm1lc3NhZ2U9ZT0+e2UuZGF0YT09PVxcXCJ0aWNrXFxcIj90aGlzLnRpY2soKTp0aGlzLnRvbmUoLi4uZS5kYXRhKX0pfXJhbXAoZSxzLGYsdSl7aWYodGhpcy50aW1lPj11KXJldHVybiBzO2xldCBhPSh0aGlzLnRpbWUtZikvKHUtZik7cmV0dXJuIEwoZSxzLGEpfWdldEN1cnJlbnRGcmVxdWVuY3koZSl7cmV0dXJuIGUuZnJlcTI+MD90aGlzLnJhbXAoZS5mcmVxMSxlLmZyZXEyLGUuc3RhcnRUaW1lLGUucmVsZWFzZVRpbWUpOmUuZnJlcTF9Z2V0Q3VycmVudFZvbHVtZShlKXtsZXQgcz10aGlzLnRpbWU7cmV0dXJuIHM+PWUuc3VzdGFpblRpbWUmJmUucmVsZWFzZVRpbWUtZS5zdXN0YWluVGltZT5NP3RoaXMucmFtcChlLnN1c3RhaW5Wb2x1bWUsMCxlLnN1c3RhaW5UaW1lLGUucmVsZWFzZVRpbWUpOnM+PWUuZGVjYXlUaW1lP2Uuc3VzdGFpblZvbHVtZTpzPj1lLmF0dGFja1RpbWU/dGhpcy5yYW1wKGUucGVha1ZvbHVtZSxlLnN1c3RhaW5Wb2x1bWUsZS5hdHRhY2tUaW1lLGUuZGVjYXlUaW1lKTp0aGlzLnJhbXAoMCxlLnBlYWtWb2x1bWUsZS5zdGFydFRpbWUsZS5hdHRhY2tUaW1lKX10aWNrKCl7dGhpcy50aWNrcysrfXRvbmUoZSxzLGYsdSl7bGV0IGE9ZSY2NTUzNSxwPWU+PjE2JjY1NTM1LEE9cyYyNTUsaD1zPj44JjI1NSxvPXM+PjE2JjI1NSxpPXM+PjI0JjI1NSxFPU1hdGgubWluKGYmMjU1LDEwMCksbD1NYXRoLm1pbihmPj44JjI1NSwxMDApLG49dSYzLHI9dT4+MiYzLGM9dT4+NCYzLGQ9dSY2NCx0PXRoaXMuY2hhbm5lbHNbbl07dGhpcy50aW1lPnQucmVsZWFzZVRpbWUmJnRoaXMudGlja3MhPXQuZW5kVGljayYmKHQucGhhc2U9bj09Mj8uMjU6MCksZD8odC5mcmVxMT14KGEmMjU1LGE+PjgpLHQuZnJlcTI9cD09MD8wOngocCYyNTUscD4+OCkpOih0LmZyZXExPWEsdC5mcmVxMj1wKSx0LnN0YXJ0VGltZT10aGlzLnRpbWUsdC5hdHRhY2tUaW1lPXQuc3RhcnRUaW1lKyg0NDEwMCppLzYwPj4+MCksdC5kZWNheVRpbWU9dC5hdHRhY2tUaW1lKyg0NDEwMCpvLzYwPj4+MCksdC5zdXN0YWluVGltZT10LmRlY2F5VGltZSsoNDQxMDAqQS82MD4+PjApLHQucmVsZWFzZVRpbWU9dC5zdXN0YWluVGltZSsoNDQxMDAqaC82MD4+PjApLHQuZW5kVGljaz10aGlzLnRpY2tzK2krbytBK2gsdC5wYW49YztsZXQgVD1uPT0yPy4yNTouMTU7aWYodC5zdXN0YWluVm9sdW1lPVQqRS8xMDAsdC5wZWFrVm9sdW1lPWw/VCpsLzEwMDpULG49PTB8fG49PTEpc3dpdGNoKHIpe2Nhc2UgMDp0LnB1bHNlRHV0eUN5Y2xlPS4xMjU7YnJlYWs7Y2FzZSAxOmNhc2UgMzpkZWZhdWx0OnQucHVsc2VEdXR5Q3ljbGU9LjI1O2JyZWFrO2Nhc2UgMjp0LnB1bHNlRHV0eUN5Y2xlPS41O2JyZWFrfWVsc2Ugbj09MiYmaD09MCYmKHQucmVsZWFzZVRpbWUrPU0pfXByb2Nlc3MoZSxbW3MsZl1dLHUpe2ZvcihsZXQgYT0wLHA9cy5sZW5ndGg7YTxwOysrYSwrK3RoaXMudGltZSl7bGV0IEE9MCxoPTA7Zm9yKGxldCBvPTA7bzw0Oysrbyl7bGV0IGk9dGhpcy5jaGFubmVsc1tvXTtpZih0aGlzLnRpbWU8aS5yZWxlYXNlVGltZXx8dGhpcy50aWNrcz09aS5lbmRUaWNrKXtsZXQgRT10aGlzLmdldEN1cnJlbnRGcmVxdWVuY3koaSksbD10aGlzLmdldEN1cnJlbnRWb2x1bWUoaSksbjtpZihvPT0zKXtmb3IoaS5waGFzZSs9RSpFLygxZTYvNDQxMDAqNDQxMDApO2kucGhhc2U+MDspe2kucGhhc2UtLTtsZXQgcj1pLm5vaXNlU2VlZDtyXj1yPj43LHJePXI8PDkscl49cj4+MTMsaS5ub2lzZVNlZWQ9cixpLm5vaXNlTGFzdFJhbmRvbT0oKHImMSk8PDEpLTF9bj1sKmkubm9pc2VMYXN0UmFuZG9tfWVsc2V7bGV0IHI9RS80NDEwMCxjPWkucGhhc2UrcjtpZihjPj0xJiZjLS0saS5waGFzZT1jLG89PTIpbj1sKigyKk1hdGguYWJzKDIqaS5waGFzZS0xKS0xKTtlbHNle2xldCBkLHQsVCxrPWkucHVsc2VEdXR5Q3ljbGU7YzxrPyhkPWMvayx0PXIvayxUPWwpOihkPShjLWspLygxLWspLHQ9ci8oMS1rKSxUPS1sKSxuPVQqVihkLHQpfX1pLnBhbiE9MSYmKGgrPW4pLGkucGFuIT0yJiYoQSs9bil9fXNbYV09QSxmW2FdPWh9cmV0dXJuITB9fTtyZWdpc3RlclByb2Nlc3NvcihcXFwid2FzbTQtYXB1XFxcIix5KTt9KSgpO1xcblwiIiwiLy8gQ3JlYXRlZCB1c2luZyBgbnBtIHJ1biBidWlsZDphcHUtd29ya2xldGAgYW5kXG4vLyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBpbiBidWlsZCBhbmQgc3RhcnQgc2NyaXB0cy5cbmltcG9ydCB3b3JrbGV0UmF3U291cmNlIGZyb20gXCIuL2FwdS13b3JrbGV0Lm1pbi5nZW5lcmF0ZWQuanM/cmF3XCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAgIHdlYmtpdEF1ZGlvQ29udGV4dDogdHlwZW9mIEF1ZGlvQ29udGV4dFxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFQVSB7XG4gICAgYXVkaW9DdHg6IEF1ZGlvQ29udGV4dDtcbiAgICBwcm9jZXNzb3IhOiBBUFVQcm9jZXNzb3I7XG4gICAgcHJvY2Vzc29yUG9ydCE6IE1lc3NhZ2VQb3J0O1xuXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLmF1ZGlvQ3R4ID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpKHtcbiAgICAgICAgICAgIHNhbXBsZVJhdGU6IDQ0MTAwLCAvLyBtdXN0IG1hdGNoIFNBTVBMRV9SQVRFIGluIHdvcmtsZXRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCAoKSB7XG4gICAgICAgIGNvbnN0IGF1ZGlvQ3R4ID0gdGhpcy5hdWRpb0N0eDtcbiAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFt3b3JrbGV0UmF3U291cmNlXSwge3R5cGU6IFwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwifSk7XG4gICAgICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGF1ZGlvQ3R4LmF1ZGlvV29ya2xldC5hZGRNb2R1bGUodXJsKTtcblxuICAgICAgICAgICAgY29uc3Qgd29ya2xldE5vZGUgPSBuZXcgQXVkaW9Xb3JrbGV0Tm9kZShhdWRpb0N0eCwgXCJ3YXNtNC1hcHVcIiwge1xuICAgICAgICAgICAgICAgIG91dHB1dENoYW5uZWxDb3VudDogWzJdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NvclBvcnQgPSB3b3JrbGV0Tm9kZS5wb3J0O1xuICAgICAgICAgICAgd29ya2xldE5vZGUuY29ubmVjdChhdWRpb0N0eC5kZXN0aW5hdGlvbik7XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkF1ZGlvV29ya2xldCBsb2FkaW5nIGZhaWxlZCwgZmFsbGluZyBiYWNrIHRvIHNsb3cgYXVkaW9cIiwgZXJyb3IpO1xuXG4gICAgICAgICAgICAvLyBTY29vcCBvdXQgdGhlIEFQVVByb2Nlc3NvciB3aXRoIGEgc2ltcGxlIHBvbHlmaWxsXG4gICAgICAgICAgICBsZXQgcHJvY2Vzc29yITogQVBVUHJvY2Vzc29yO1xuICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJQcm9jZXNzb3I6IHR5cGVvZiBnbG9iYWxUaGlzLnJlZ2lzdGVyUHJvY2Vzc29yID0gKG5hbWUsIHApID0+IHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzb3IgPSBuZXcgcCgpIGFzIEFQVVByb2Nlc3NvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZuID0gbmV3IEZ1bmN0aW9uKFwicmVnaXN0ZXJQcm9jZXNzb3JcIiwgXCJBdWRpb1dvcmtsZXRQcm9jZXNzb3JcIiwgd29ya2xldFJhd1NvdXJjZSk7XG4gICAgICAgICAgICBmbihyZWdpc3RlclByb2Nlc3NvciwgY2xhc3Mge30pO1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG5cbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdE5vZGUgPSBhdWRpb0N0eC5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoMTAyNCwgMCwgMik7XG4gICAgICAgICAgICBzY3JpcHROb2RlLm9uYXVkaW9wcm9jZXNzID0gZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dHB1dExlZnQgPSBldmVudC5vdXRwdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoMCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0UmlnaHQgPSBldmVudC5vdXRwdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoMSk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc29yLnByb2Nlc3MobnVsbCwgW1tvdXRwdXRMZWZ0LCBvdXRwdXRSaWdodF1dLCBudWxsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzY3JpcHROb2RlLmNvbm5lY3QoYXVkaW9DdHguZGVzdGluYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGljaygpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvY2Vzc29yUG9ydCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NvclBvcnQucG9zdE1lc3NhZ2UoJ3RpY2snKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc29yLnRpY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvbmUgKGZyZXF1ZW5jeTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyLCB2b2x1bWU6IG51bWJlciwgZmxhZ3M6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5wcm9jZXNzb3JQb3J0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFNlbmQgcGFyYW1zIG91dCB0byB0aGUgd29ya2VyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NvclBvcnQucG9zdE1lc3NhZ2UoW2ZyZXF1ZW5jeSwgZHVyYXRpb24sIHZvbHVtZSwgZmxhZ3NdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZvciB0aGUgU2NyaXB0UHJvY2Vzc29yTm9kZSBmYWxsYmFjaywganVzdCBjYWxsIHRvbmUoKSBkaXJlY3RseVxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzb3IudG9uZShmcmVxdWVuY3ksIGR1cmF0aW9uLCB2b2x1bWUsIGZsYWdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVubG9ja0F1ZGlvICgpIHtcbiAgICAgICAgY29uc3QgYXVkaW9DdHggPSB0aGlzLmF1ZGlvQ3R4O1xuICAgICAgICBpZiAoYXVkaW9DdHguc3RhdGUgPT0gXCJzdXNwZW5kZWRcIikge1xuICAgICAgICAgICAgYXVkaW9DdHgucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXVzZUF1ZGlvICgpIHtcbiAgICAgICAgY29uc3QgYXVkaW9DdHggPSB0aGlzLmF1ZGlvQ3R4O1xuICAgICAgICBpZiAoYXVkaW9DdHguc3RhdGUgPT0gXCJydW5uaW5nXCIpIHtcbiAgICAgICAgICAgIGF1ZGlvQ3R4LnN1c3BlbmQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgRk9OVCxcbiAgICBXSURUSCxcbiAgICBIRUlHSFQsXG4gICAgQUREUl9GUkFNRUJVRkZFUixcbiAgICBBRERSX0RSQVdfQ09MT1JTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgY2xhc3MgRnJhbWVidWZmZXIge1xuICAgIGRyYXdDb2xvcnM6IFVpbnQxNkFycmF5O1xuICAgIGJ5dGVzOiBVaW50OEFycmF5O1xuXG4gICAgY29uc3RydWN0b3IgKG1lbW9yeTogQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgdGhpcy5ieXRlcyA9IG5ldyBVaW50OEFycmF5KG1lbW9yeSwgQUREUl9GUkFNRUJVRkZFUiwgV0lEVEggKiBIRUlHSFQgPj4+IDIpO1xuICAgICAgICB0aGlzLmRyYXdDb2xvcnMgPSBuZXcgVWludDE2QXJyYXkobWVtb3J5LCBBRERSX0RSQVdfQ09MT1JTLCAxKTtcbiAgICB9XG5cbiAgICBjbGVhciAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYnl0ZXMuZmlsbCgwKTtcbiAgICB9XG5cbiAgICBkcmF3UG9pbnQgKGNvbG9yOiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IChXSURUSCAqIHkgKyB4KSA+Pj4gMjtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSAoeCAmIDB4MykgPDwgMTtcbiAgICAgICAgY29uc3QgbWFzayA9IDB4MyA8PCBzaGlmdDtcbiAgICAgICAgdGhpcy5ieXRlc1tpZHhdID0gKGNvbG9yIDw8IHNoaWZ0KSB8ICh0aGlzLmJ5dGVzW2lkeF0gJiB+bWFzayk7XG4gICAgfVxuXG4gICAgZHJhd1BvaW50VW5jbGlwcGVkIChjb2xvcjogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBpZiAoeCA+PSAwICYmIHggPCBXSURUSCAmJiB5ID49IDAgJiYgeSA8IEhFSUdIVCkge1xuICAgICAgICAgICAgdGhpcy5kcmF3UG9pbnQoY29sb3IsIHgsIHkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhd0hMaW5lRmFzdChjb2xvcjogbnVtYmVyLCBzdGFydFg6IG51bWJlciwgeTogbnVtYmVyLCBlbmRYOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZmlsbEVuZCA9IGVuZFggLSAoZW5kWCAmIDMpO1xuICAgICAgICBjb25zdCBmaWxsU3RhcnQgPSBNYXRoLm1pbigoc3RhcnRYICsgMykgJiB+MywgZmlsbEVuZCk7XG5cbiAgICAgICAgaWYgKGZpbGxFbmQgLSBmaWxsU3RhcnQgPiAzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4eCA9IHN0YXJ0WDsgeHggPCBmaWxsU3RhcnQ7IHh4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdQb2ludChjb2xvciwgeHgsIHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBmcm9tID0gKFdJRFRIICogeSArIGZpbGxTdGFydCkgPj4+IDI7XG4gICAgICAgICAgICBjb25zdCB0byA9IChXSURUSCAqIHkgKyBmaWxsRW5kKSA+Pj4gMjtcbiAgICAgICAgICAgIGNvbnN0IGZpbGxDb2xvciA9IGNvbG9yICogMGIwMTAxMDEwMTtcblxuICAgICAgICAgICAgdGhpcy5ieXRlcy5maWxsKGZpbGxDb2xvciwgZnJvbSwgdG8pO1xuICAgICAgICAgICAgc3RhcnRYID0gZmlsbEVuZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IHh4ID0gc3RhcnRYOyB4eCA8IGVuZFg7IHh4KyspIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1BvaW50KGNvbG9yLCB4eCwgeSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3SExpbmVVbmNsaXBwZWQoY29sb3I6IG51bWJlciwgc3RhcnRYOiBudW1iZXIsIHk6IG51bWJlciwgZW5kWDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh5ID49IDAgJiYgeSA8IEhFSUdIVCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0WCA8IDApIHtcbiAgICAgICAgICAgICAgICBzdGFydFggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZFggPiBXSURUSCkge1xuICAgICAgICAgICAgICAgIGVuZFggPSBXSURUSDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFydFggPCBlbmRYKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3SExpbmVGYXN0KGNvbG9yLCBzdGFydFgsIHksIGVuZFgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhd0hMaW5lKHg6IG51bWJlciwgeTogbnVtYmVyLCBsZW46IG51bWJlcikge1xuICAgICAgICBjb25zdCBkYzAgPSB0aGlzLmRyYXdDb2xvcnNbMF0gJiAweGY7XG4gICAgICAgIGlmIChkYzAgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSAoZGMwIC0gMSkgJiAweDM7XG4gICAgICAgIHRoaXMuZHJhd0hMaW5lVW5jbGlwcGVkKHN0cm9rZUNvbG9yLCB4LCB5LCB4ICsgbGVuKTtcbiAgICB9XG5cbiAgICBkcmF3VkxpbmUoeDogbnVtYmVyLCB5OiBudW1iZXIsIGxlbjogbnVtYmVyKSB7XG4gICAgICAgIGlmICh5ICsgbGVuIDw9IDAgfHwgeCA8IDAgfHwgeCA+PSBXSURUSCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGMwID0gdGhpcy5kcmF3Q29sb3JzWzBdICYgMHhmO1xuICAgICAgICBpZiAoZGMwID09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXJ0WSA9IE1hdGgubWF4KDAsIHkpO1xuICAgICAgICBjb25zdCBlbmRZID0gTWF0aC5taW4oSEVJR0hULCB5ICsgbGVuKTtcbiAgICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSAoZGMwIC0gMSkgJiAweDM7XG4gICAgICAgIGZvciAobGV0IHl5ID0gc3RhcnRZOyB5eSA8IGVuZFk7IHl5KyspIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1BvaW50KHN0cm9rZUNvbG9yLCB4LCB5eSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3UmVjdCh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRYID0gTWF0aC5tYXgoMCwgeCk7XG4gICAgICAgIGNvbnN0IHN0YXJ0WSA9IE1hdGgubWF4KDAsIHkpO1xuICAgICAgICBjb25zdCBlbmRYVW5jbGFtcGVkID0geCArIHdpZHRoO1xuICAgICAgICBjb25zdCBlbmRZVW5jbGFtcGVkID0geSArIGhlaWdodDtcbiAgICAgICAgY29uc3QgZW5kWCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGVuZFhVbmNsYW1wZWQsIFdJRFRIKSk7XG4gICAgICAgIGNvbnN0IGVuZFkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihlbmRZVW5jbGFtcGVkLCBIRUlHSFQpKTtcblxuICAgICAgICBjb25zdCBkcmF3Q29sb3JzID0gdGhpcy5kcmF3Q29sb3JzWzBdO1xuICAgICAgICBjb25zdCBkYzAgPSBkcmF3Q29sb3JzICYgMHhmO1xuICAgICAgICBjb25zdCBkYzEgPSAoZHJhd0NvbG9ycyA+Pj4gNCkgJiAweGY7XG5cbiAgICAgICAgaWYgKGRjMCAhPT0gMCkge1xuICAgICAgICAgICAgY29uc3QgZmlsbENvbG9yID0gKGRjMCAtIDEpICYgMHgzO1xuICAgICAgICAgICAgZm9yIChsZXQgeXkgPSBzdGFydFk7IHl5IDwgZW5kWTsgKyt5eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0hMaW5lRmFzdChmaWxsQ29sb3IsIHN0YXJ0WCwgeXksIGVuZFgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRjMSAhPT0gMCkge1xuICAgICAgICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSAoZGMxIC0gMSkgJiAweDM7XG5cbiAgICAgICAgICAgIC8vIExlZnQgZWRnZVxuICAgICAgICAgICAgaWYgKHggPj0gMCAmJiB4IDwgV0lEVEgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB5eSA9IHN0YXJ0WTsgeXkgPCBlbmRZOyArK3l5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1BvaW50KHN0cm9rZUNvbG9yLCB4LCB5eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSaWdodCBlZGdlXG4gICAgICAgICAgICBpZiAoZW5kWFVuY2xhbXBlZCA+IDAgJiYgZW5kWFVuY2xhbXBlZCA8PSBXSURUSCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHl5ID0gc3RhcnRZOyB5eSA8IGVuZFk7ICsreXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3UG9pbnQoc3Ryb2tlQ29sb3IsIGVuZFhVbmNsYW1wZWQgLSAxLCB5eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUb3AgZWRnZVxuICAgICAgICAgICAgaWYgKHkgPj0gMCAmJiB5IDwgSEVJR0hUKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3SExpbmVGYXN0KHN0cm9rZUNvbG9yLCBzdGFydFgsIHksIGVuZFgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBCb3R0b20gZWRnZVxuICAgICAgICAgICAgaWYgKGVuZFlVbmNsYW1wZWQgPiAwICYmIGVuZFlVbmNsYW1wZWQgPD0gSEVJR0hUKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3SExpbmVGYXN0KHN0cm9rZUNvbG9yLCBzdGFydFgsIGVuZFlVbmNsYW1wZWQgLSAxLCBlbmRYKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE92YWwgZHJhd2luZyBmdW5jdGlvbiB1c2luZyBhIHZhcmlhdGlvbiBvbiB0aGUgbWlkcG9pbnQgYWxnb3JpdGhtLlxuICAgIC8vIFRJQy04MCdzIGVsbGlwc2UgZHJhd2luZyBmdW5jdGlvbiB1c2VkIGFzIHJlZmVyZW5jZS5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbmVzYm94L1RJQy04MC9ibG9iL21haW4vc3JjL2NvcmUvZHJhdy5jXG4gICAgLy9cbiAgICAvLyBKYXZhdHBvaW50IGhhcyBhIGluIGRlcHRoIGFjYWRlbWljIGV4cGxhbmF0aW9uIHRoYXQgbW9zdGx5IHdlbnQgb3ZlciBteSBoZWFkOlxuICAgIC8vIGh0dHBzOi8vd3d3LmphdmF0cG9pbnQuY29tL2NvbXB1dGVyLWdyYXBoaWNzLW1pZHBvaW50LWVsbGlwc2UtYWxnb3JpdGhtXG4gICAgLy9cbiAgICAvLyBEcmF3cyB0aGUgZWxsaXBzZSBieSBcInNjYW5uaW5nXCIgYWxvbmcgdGhlIGVkZ2UgaW4gb25lIHF1YWRyYW50LCBhbmQgbWlycm9yaW5nXG4gICAgLy8gdGhlIG1vdmVtZW50IGZvciB0aGUgb3RoZXIgZm91ciBxdWFkcmFudHMuXG4gICAgLy9cbiAgICAvLyBUaGVyZSBhcmUgYSBsb3Qgb2YgZGV0YWlscyB0byBnZXQgY29ycmVjdCB3aGlsZSBpbXBsZW1lbnRpbmcgdGhpcyBhbGdvcml0aG0sXG4gICAgLy8gc28gZW5zdXJlIHRoZSBlZGdlIGNhc2VzIGFyZSBjb3ZlcmVkIHdoZW4gY2hhbmdpbmcgaXQuIExvbmcsIHRoaW4gZWxsaXBzZXNcbiAgICAvLyBhcmUgcGFydGljdWxhcmx5IHN1c2NlcHRpYmxlIHRvIGJlaW5nIGRyYXduIGluY29ycmVjdGx5LlxuICAgIGRyYXdPdmFsICh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZHJhd0NvbG9ycyA9IHRoaXMuZHJhd0NvbG9yc1swXTtcbiAgICAgICAgY29uc3QgZGMwID0gZHJhd0NvbG9ycyAmIDB4ZjtcbiAgICAgICAgY29uc3QgZGMxID0gKGRyYXdDb2xvcnMgPj4+IDQpICYgMHhmO1xuXG4gICAgICAgIGlmIChkYzEgPT09IDB4Zikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSAoZGMxIC0gMSkgJiAweDM7XG4gICAgICAgIGNvbnN0IGZpbGxDb2xvciA9IChkYzAgLSAxKSAmIDB4MztcblxuICAgICAgICBsZXQgYSA9IHdpZHRoIC0gMTtcbiAgICAgICAgY29uc3QgYiA9IGhlaWdodCAtIDE7XG4gICAgICAgIGxldCBiMSA9IGIgJSAyOyAvLyBDb21wZW5zYXRlcyBmb3IgcHJlY2lzaW9uIGxvc3Mgd2hlbiBkaXZpZGluZ1xuXG4gICAgICAgIGxldCBub3J0aCA9IHkgKyBNYXRoLmZsb29yKGhlaWdodCAvIDIpOyAvLyBQcmVjaXNpb24gbG9zcyBoZXJlXG4gICAgICAgIGxldCB3ZXN0ID0geDtcbiAgICAgICAgbGV0IGVhc3QgPSB4ICsgd2lkdGggLSAxO1xuICAgICAgICBsZXQgc291dGggPSBub3J0aCAtIGIxOyAvLyBDb21wZW5zYXRpb24gaGVyZS4gTW92ZXMgdGhlIGJvdHRvbSBsaW5lIHVwIGJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uZSAob3ZlcmxhcHBpbmcgdGhlIHRvcCBsaW5lKSBmb3IgZXZlbiBoZWlnaHRzXG5cbiAgICAgICAgY29uc3QgYTIgPSBhICogYTtcbiAgICAgICAgY29uc3QgYjIgPSBiICogYjtcblxuICAgICAgICAvLyBFcnJvciBpbmNyZW1lbnRzLiBBbHNvIGtub3duIGFzIHRoZSBkZWNpc2lvbiBwYXJhbWV0ZXJzXG4gICAgICAgIGxldCBkeCA9IDQgKiAoMSAtIGEpICogYjI7XG4gICAgICAgIGxldCBkeSA9IDQgKiAoYjEgKyAxKSAqIGEyO1xuXG4gICAgICAgIC8vIEVycm9yIG9mIDEgc3RlcFxuICAgICAgICBsZXQgZXJyID0gZHggKyBkeSArIGIxICogYTI7XG5cbiAgICAgICAgYSA9IDggKiBhMjtcbiAgICAgICAgYjEgPSA4ICogYjI7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdGhpcy5kcmF3UG9pbnRVbmNsaXBwZWQoc3Ryb2tlQ29sb3IsIGVhc3QsIG5vcnRoKTsgLyogICBJLiBRdWFkcmFudCAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuZHJhd1BvaW50VW5jbGlwcGVkKHN0cm9rZUNvbG9yLCB3ZXN0LCBub3J0aCk7IC8qICAgSUkuIFF1YWRyYW50ICAgICovXG4gICAgICAgICAgICB0aGlzLmRyYXdQb2ludFVuY2xpcHBlZChzdHJva2VDb2xvciwgd2VzdCwgc291dGgpOyAvKiAgIElJSS4gUXVhZHJhbnQgICAqL1xuICAgICAgICAgICAgdGhpcy5kcmF3UG9pbnRVbmNsaXBwZWQoc3Ryb2tlQ29sb3IsIGVhc3QsIHNvdXRoKTsgLyogICBJVi4gUXVhZHJhbnQgICAgKi9cblxuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB3ZXN0ICsgMTtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGVhc3QgLSBzdGFydDtcblxuICAgICAgICAgICAgaWYgKGRjMCAhPT0gMCAmJiBsZW4gPiAwKSB7IC8vIE9ubHkgZHJhdyBmaWxsIGlmIHRoZSBsZW5ndGggZnJvbSB3ZXN0IHRvIGVhc3QgaXMgbm90IDBcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdITGluZVVuY2xpcHBlZChmaWxsQ29sb3IsIHN0YXJ0LCBub3J0aCwgZWFzdCk7IC8qICAgSSBhbmQgSUlJLiBRdWFkcmFudCAqL1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0hMaW5lVW5jbGlwcGVkKGZpbGxDb2xvciwgc3RhcnQsIHNvdXRoLCBlYXN0KTsgLyogIElJIGFuZCBJVi4gUXVhZHJhbnQgKi9cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZXJyMiA9IDIgKiBlcnI7XG5cbiAgICAgICAgICAgIGlmIChlcnIyIDw9IGR5KSB7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSB2ZXJ0aWNhbCBzY2FuXG4gICAgICAgICAgICAgICAgbm9ydGggKz0gMTtcbiAgICAgICAgICAgICAgICBzb3V0aCAtPSAxO1xuICAgICAgICAgICAgICAgIGR5ICs9IGE7XG4gICAgICAgICAgICAgICAgZXJyICs9IGR5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXJyMiA+PSBkeCB8fCBlcnIyID4gZHkpIHtcbiAgICAgICAgICAgICAgICAvLyBNb3ZlIGhvcml6b250YWwgc2NhblxuICAgICAgICAgICAgICAgIHdlc3QgKz0gMTtcbiAgICAgICAgICAgICAgICBlYXN0IC09IDE7XG4gICAgICAgICAgICAgICAgZHggKz0gYjE7XG4gICAgICAgICAgICAgICAgZXJyICs9IGR4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh3ZXN0IDw9IGVhc3QpO1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBub3J0aCBhbmQgc291dGggaGF2ZSBtb3ZlZCB0aGUgZW50aXJlIHdheSBzbyB0b3AvYm90dG9tIGFyZW4ndCBtaXNzaW5nXG4gICAgICAgIHdoaWxlIChub3J0aCAtIHNvdXRoIDwgaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdQb2ludFVuY2xpcHBlZChzdHJva2VDb2xvciwgd2VzdCAtIDEsIG5vcnRoKTsgLyogICBJSS4gUXVhZHJhbnQgICAgKi9cbiAgICAgICAgICAgIHRoaXMuZHJhd1BvaW50VW5jbGlwcGVkKHN0cm9rZUNvbG9yLCBlYXN0ICsgMSwgbm9ydGgpOyAvKiAgIEkuIFF1YWRyYW50ICAgICAqL1xuICAgICAgICAgICAgbm9ydGggKz0gMTtcbiAgICAgICAgICAgIHRoaXMuZHJhd1BvaW50VW5jbGlwcGVkKHN0cm9rZUNvbG9yLCB3ZXN0IC0gMSwgc291dGgpOyAvKiAgIElJSS4gUXVhZHJhbnQgICAqL1xuICAgICAgICAgICAgdGhpcy5kcmF3UG9pbnRVbmNsaXBwZWQoc3Ryb2tlQ29sb3IsIGVhc3QgKyAxLCBzb3V0aCk7IC8qICAgSVYuIFF1YWRyYW50ICAgICovXG4gICAgICAgICAgICBzb3V0aCAtPSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vbmVzYm94L1RJQy04MC9ibG9iL21hc3Rlci9zcmMvY29yZS9kcmF3LmNcbiAgICBkcmF3TGluZSAoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcikge1xuICAgICAgICBjb25zdCBkcmF3Q29sb3JzID0gdGhpcy5kcmF3Q29sb3JzWzBdO1xuICAgICAgICBjb25zdCBkYzAgPSBkcmF3Q29sb3JzICYgMHhmO1xuICAgICAgICBpZiAoZGMwID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSAoZGMwIC0gMSkgJiAweDM7XG5cbiAgICAgICAgaWYgKHkxID4geTIpIHtcbiAgICAgICAgICAgIGxldCBzd2FwID0geDE7XG4gICAgICAgICAgICB4MSA9IHgyO1xuICAgICAgICAgICAgeDIgPSBzd2FwO1xuXG4gICAgICAgICAgICBzd2FwID0geTE7XG4gICAgICAgICAgICB5MSA9IHkyO1xuICAgICAgICAgICAgeTIgPSBzd2FwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZHggPSBNYXRoLmFicyh4MiAtIHgxKSwgc3ggPSB4MSA8IHgyID8gMSA6IC0xO1xuICAgICAgICBjb25zdCBkeSA9IHkyIC0geTE7XG4gICAgICAgIGxldCBlcnIgPSAoZHggPiBkeSA/IGR4IDogLWR5KSAvIDIsIGUyO1xuXG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1BvaW50VW5jbGlwcGVkKHN0cm9rZUNvbG9yLCB4MSwgeTEpO1xuICAgICAgICAgICAgaWYgKHgxID09PSB4MiAmJiB5MSA9PT0geTIpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUyID0gZXJyO1xuICAgICAgICAgICAgaWYgKGUyID4gLWR4KSB7XG4gICAgICAgICAgICAgICAgZXJyIC09IGR5O1xuICAgICAgICAgICAgICAgIHgxICs9IHN4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUyIDwgZHkpIHtcbiAgICAgICAgICAgICAgICBlcnIgKz0gZHg7XG4gICAgICAgICAgICAgICAgeTErKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRyYXdUZXh0IChjaGFyQXJyYXk6IG51bWJlcltdIHwgVWludDhBcnJheSB8IFVpbnQ4Q2xhbXBlZEFycmF5IHwgVWludDE2QXJyYXksIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIGxldCBjdXJyZW50WCA9IHg7XG4gICAgICAgIGZvciAobGV0IGlpID0gMCwgbGVuID0gY2hhckFycmF5Lmxlbmd0aDsgaWkgPCBsZW47ICsraWkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXJDb2RlID0gY2hhckFycmF5W2lpXTtcbiAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPT09IDEwKSB7XG4gICAgICAgICAgICAgICAgeSArPSA4O1xuICAgICAgICAgICAgICAgIGN1cnJlbnRYID0geDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPj0gMzIgJiYgY2hhckNvZGUgPD0gMjU1KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ibGl0KEZPTlQsIGN1cnJlbnRYLCB5LCA4LCA4LCAwLCAoY2hhckNvZGUgLSAzMikgPDwgMywgOCk7XG4gICAgICAgICAgICAgICAgY3VycmVudFggKz0gODtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFggKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJsaXQgKFxuICAgICAgICBzcHJpdGU6IFVpbnQ4QXJyYXksXG4gICAgICAgIGRzdFg6IG51bWJlciwgZHN0WTogbnVtYmVyLFxuICAgICAgICB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcixcbiAgICAgICAgc3JjWDogbnVtYmVyLCBzcmNZOiBudW1iZXIsXG4gICAgICAgIHNyY1N0cmlkZTogbnVtYmVyLFxuICAgICAgICBicHAyOiBudW1iZXIgfCBib29sZWFuID0gZmFsc2UsXG4gICAgICAgIGZsaXBYOiBudW1iZXIgfCBib29sZWFuID0gZmFsc2UsXG4gICAgICAgIGZsaXBZOiBudW1iZXIgfCBib29sZWFuID0gZmFsc2UsXG4gICAgICAgIHJvdGF0ZTogbnVtYmVyIHwgYm9vbGVhbiA9IGZhbHNlXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGRyYXdDb2xvcnMgPSB0aGlzLmRyYXdDb2xvcnNbMF07XG5cbiAgICAgICAgLy8gQ2xpcCByZWN0YW5nbGUgdG8gc2NyZWVuXG4gICAgICAgIGxldCBjbGlwWE1pbiwgY2xpcFlNaW4sIGNsaXBYTWF4LCBjbGlwWU1heDtcbiAgICAgICAgaWYgKHJvdGF0ZSkge1xuICAgICAgICAgICAgZmxpcFggPSAhZmxpcFg7XG4gICAgICAgICAgICBjbGlwWE1pbiA9IE1hdGgubWF4KDAsIGRzdFkpIC0gZHN0WTtcbiAgICAgICAgICAgIGNsaXBZTWluID0gTWF0aC5tYXgoMCwgZHN0WCkgLSBkc3RYO1xuICAgICAgICAgICAgY2xpcFhNYXggPSBNYXRoLm1pbih3aWR0aCwgSEVJR0hUIC0gZHN0WSk7XG4gICAgICAgICAgICBjbGlwWU1heCA9IE1hdGgubWluKGhlaWdodCwgV0lEVEggLSBkc3RYKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsaXBYTWluID0gTWF0aC5tYXgoMCwgZHN0WCkgLSBkc3RYO1xuICAgICAgICAgICAgY2xpcFlNaW4gPSBNYXRoLm1heCgwLCBkc3RZKSAtIGRzdFk7XG4gICAgICAgICAgICBjbGlwWE1heCA9IE1hdGgubWluKHdpZHRoLCBXSURUSCAtIGRzdFgpO1xuICAgICAgICAgICAgY2xpcFlNYXggPSBNYXRoLm1pbihoZWlnaHQsIEhFSUdIVCAtIGRzdFkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXRlcmF0ZSBwaXhlbHMgaW4gcmVjdGFuZ2xlXG4gICAgICAgIGZvciAobGV0IHkgPSBjbGlwWU1pbjsgeSA8IGNsaXBZTWF4OyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSBjbGlwWE1pbjsgeCA8IGNsaXBYTWF4OyB4KyspIHtcbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgc3ByaXRlIHRhcmdldCBjb29yZHNcbiAgICAgICAgICAgICAgICBjb25zdCB0eCA9IGRzdFggKyAocm90YXRlID8geSA6IHgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5ID0gZHN0WSArIChyb3RhdGUgPyB4IDogeSk7XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgc3ByaXRlIHNvdXJjZSBjb29yZHNcbiAgICAgICAgICAgICAgICBjb25zdCBzeCA9IHNyY1ggKyAoZmxpcFggPyB3aWR0aCAtIHggLSAxIDogeCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3kgPSBzcmNZICsgKGZsaXBZID8gaGVpZ2h0IC0geSAtIDEgOiB5KTtcblxuICAgICAgICAgICAgICAgIC8vIFNhbXBsZSB0aGUgc3ByaXRlIHRvIGdldCBhIGNvbG9yIGluZGV4XG4gICAgICAgICAgICAgICAgbGV0IGNvbG9ySWR4O1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpdEluZGV4ID0gc3kgKiBzcmNTdHJpZGUgKyBzeDtcbiAgICAgICAgICAgICAgICBpZiAoYnBwMikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBieXRlID0gc3ByaXRlW2JpdEluZGV4ID4+PiAyXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hpZnQgPSA2IC0gKChiaXRJbmRleCAmIDB4MDMpIDw8IDEpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcklkeCA9IChieXRlID4+PiBzaGlmdCkgJiAwYjExO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGUgPSBzcHJpdGVbYml0SW5kZXggPj4+IDNdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGlmdCA9IDcgLSAoYml0SW5kZXggJiAweDcpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcklkeCA9IChieXRlID4+PiBzaGlmdCkgJiAwYjE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBmaW5hbCBjb2xvciB1c2luZyB0aGUgZHJhd0NvbG9ycyBpbmRpcmVjdGlvblxuICAgICAgICAgICAgICAgIC8vIFRPRE8oMjAyMS0wOC0xMSk6IFVzZSBhIGxvb2t1cCB0YWJsZSBoZXJlP1xuICAgICAgICAgICAgICAgIGNvbnN0IGRjID0gKGRyYXdDb2xvcnMgPj4+IChjb2xvcklkeCA8PCAyKSkgJiAweDBmO1xuICAgICAgICAgICAgICAgIGlmIChkYyAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdQb2ludCgoZGMgLSAxKSAmIDB4MDMsIHR4LCB0eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiLyoqXG4gKiBUaGUgZm9sbG93aW5nIGRlZmluZWQgY29uc3RhbnRzIGFuZCBkZXNjcmlwdGlvbnMgYXJlIGRpcmVjdGx5IHBvcnRlZCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTF9BUEkvQ29uc3RhbnRzXG4gKlxuICogQW55IGNvcHlyaWdodCBpcyBkZWRpY2F0ZWQgdG8gdGhlIFB1YmxpYyBEb21haW4uIGh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL3B1YmxpY2RvbWFpbi96ZXJvLzEuMC9cbiAqXG4gKiBDb250cmlidXRvcnNcbiAqXG4gKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL3Byb2ZpbGVzL1NoZXBweVxuICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9wcm9maWxlcy9mc2Nob2x6XG4gKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL3Byb2ZpbGVzL0F0aVhcbiAqIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvcHJvZmlsZXMvU2ViYXN0aWFuelxuICpcbiAqIFRoZXNlIGNvbnN0YW50cyBhcmUgZGVmaW5lZCBvbiB0aGUgV2ViR0xSZW5kZXJpbmdDb250ZXh0IC8gV2ViR0wyUmVuZGVyaW5nQ29udGV4dCBpbnRlcmZhY2VcbiAqL1xuXG4vLyBDbGVhcmluZyBidWZmZXJzXG4vLyBDb25zdGFudHMgcGFzc2VkIHRvIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5jbGVhcigpIHRvIGNsZWFyIGJ1ZmZlciBtYXNrc1xuXG4vKipcbiAqIFBhc3NlZCB0byBjbGVhciB0byBjbGVhciB0aGUgY3VycmVudCBkZXB0aCBidWZmZXJcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgREVQVEhfQlVGRkVSX0JJVCA9IDB4MDAwMDAxMDA7XG5cbi8qKlxuICogUGFzc2VkIHRvIGNsZWFyIHRvIGNsZWFyIHRoZSBjdXJyZW50IHN0ZW5jaWwgYnVmZmVyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNURU5DSUxfQlVGRkVSX0JJVCA9IDB4MDAwMDA0MDA7XG5cbi8qKlxuICogUGFzc2VkIHRvIGNsZWFyIHRvIGNsZWFyIHRoZSBjdXJyZW50IGNvbG9yIGJ1ZmZlclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT0xPUl9CVUZGRVJfQklUID0gMHgwMDAwNDAwMDtcblxuLy8gUmVuZGVyaW5nIHByaW1pdGl2ZXNcbi8vIENvbnN0YW50cyBwYXNzZWQgdG8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LmRyYXdFbGVtZW50cygpIG9yIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5kcmF3QXJyYXlzKCkgdG8gc3BlY2lmeSB3aGF0IGtpbmQgb2YgcHJpbWl0aXZlIHRvIHJlbmRlclxuXG4vKipcbiAqIFBhc3NlZCB0byBkcmF3RWxlbWVudHMgb3IgZHJhd0FycmF5cyB0byBkcmF3IHNpbmdsZSBwb2ludHNcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUE9JTlRTID0gMHgwMDAwO1xuXG4vKipcbiAqIFBhc3NlZCB0byBkcmF3RWxlbWVudHMgb3IgZHJhd0FycmF5cyB0byBkcmF3IGxpbmVzLiBFYWNoIHZlcnRleCBjb25uZWN0cyB0byB0aGUgb25lIGFmdGVyIGl0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IExJTkVTID0gMHgwMDAxO1xuXG4vKipcbiAqIFBhc3NlZCB0byBkcmF3RWxlbWVudHMgb3IgZHJhd0FycmF5cyB0byBkcmF3IGxpbmVzLiBFYWNoIHNldCBvZiB0d28gdmVydGljZXMgaXMgdHJlYXRlZCBhcyBhIHNlcGFyYXRlIGxpbmUgc2VnbWVudFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBMSU5FX0xPT1AgPSAweDAwMDI7XG5cbi8qKlxuICogUGFzc2VkIHRvIGRyYXdFbGVtZW50cyBvciBkcmF3QXJyYXlzIHRvIGRyYXcgYSBjb25uZWN0ZWQgZ3JvdXAgb2YgbGluZSBzZWdtZW50cyBmcm9tIHRoZSBmaXJzdCB2ZXJ0ZXggdG8gdGhlIGxhc3RcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTElORV9TVFJJUCA9IDB4MDAwMztcblxuLyoqXG4gKiBQYXNzZWQgdG8gZHJhd0VsZW1lbnRzIG9yIGRyYXdBcnJheXMgdG8gZHJhdyB0cmlhbmdsZXMuIEVhY2ggc2V0IG9mIHRocmVlIHZlcnRpY2VzIGNyZWF0ZXMgYSBzZXBhcmF0ZSB0cmlhbmdsZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBUUklBTkdMRVMgPSAweDAwMDQ7XG5cbi8qKlxuICogUGFzc2VkIHRvIGRyYXdFbGVtZW50cyBvciBkcmF3QXJyYXlzIHRvIGRyYXcgYSBjb25uZWN0ZWQgZ3JvdXAgb2YgdHJpYW5nbGVzXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRSSUFOR0xFX1NUUklQID0gMHgwMDA1O1xuXG4vKipcbiAqIFBhc3NlZCB0byBkcmF3RWxlbWVudHMgb3IgZHJhd0FycmF5cyB0byBkcmF3IGEgY29ubmVjdGVkIGdyb3VwIG9mIHRyaWFuZ2xlcy4gRWFjaCB2ZXJ0ZXggY29ubmVjdHMgdG8gdGhlIHByZXZpb3VzIGFuZCB0aGUgZmlyc3QgdmVydGV4IGluIHRoZSBmYW5cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVFJJQU5HTEVfRkFOID0gMHgwMDA2O1xuXG4vLyBCbGVuZGluZyBtb2Rlc1xuLy8gQ29uc3RhbnRzIHBhc3NlZCB0byBXZWJHTFJlbmRlcmluZ0NvbnRleHQuYmxlbmRGdW5jKCkgb3IgV2ViR0xSZW5kZXJpbmdDb250ZXh0LmJsZW5kRnVuY1NlcGFyYXRlKCkgdG8gc3BlY2lmeSB0aGUgYmxlbmRpbmcgbW9kZSAoZm9yIGJvdGgsIFJCRyBhbmQgYWxwaGEsIG9yIHNlcGFyYXRlbHkpXG5cbi8qKlxuICogUGFzc2VkIHRvIGJsZW5kRnVuYyBvciBibGVuZEZ1bmNTZXBhcmF0ZSB0byB0dXJuIG9mZiBhIGNvbXBvbmVudFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBaRVJPID0gMDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYmxlbmRGdW5jIG9yIGJsZW5kRnVuY1NlcGFyYXRlIHRvIHR1cm4gb24gYSBjb21wb25lbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgT05FID0gMTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYmxlbmRGdW5jIG9yIGJsZW5kRnVuY1NlcGFyYXRlIHRvIG11bHRpcGx5IGEgY29tcG9uZW50IGJ5IHRoZSBzb3VyY2UgZWxlbWVudHMgY29sb3JcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1JDX0NPTE9SID0gMHgwMzAwO1xuXG4vKipcbiAqIFBhc3NlZCB0byBibGVuZEZ1bmMgb3IgYmxlbmRGdW5jU2VwYXJhdGUgdG8gbXVsdGlwbHkgYSBjb21wb25lbnQgYnkgb25lIG1pbnVzIHRoZSBzb3VyY2UgZWxlbWVudHMgY29sb3JcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgT05FX01JTlVTX1NSQ19DT0xPUiA9IDB4MDMwMTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYmxlbmRGdW5jIG9yIGJsZW5kRnVuY1NlcGFyYXRlIHRvIG11bHRpcGx5IGEgY29tcG9uZW50IGJ5IHRoZSBzb3VyY2UncyBhbHBoYVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTUkNfQUxQSEEgPSAweDAzMDI7XG5cbi8qKlxuICogUGFzc2VkIHRvIGJsZW5kRnVuYyBvciBibGVuZEZ1bmNTZXBhcmF0ZSB0byBtdWx0aXBseSBhIGNvbXBvbmVudCBieSBvbmUgbWludXMgdGhlIHNvdXJjZSdzIGFscGhhXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE9ORV9NSU5VU19TUkNfQUxQSEEgPSAweDAzMDM7XG5cbi8qKlxuICogUGFzc2VkIHRvIGJsZW5kRnVuYyBvciBibGVuZEZ1bmNTZXBhcmF0ZSB0byBtdWx0aXBseSBhIGNvbXBvbmVudCBieSB0aGUgZGVzdGluYXRpb24ncyBhbHBoYVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEU1RfQUxQSEEgPSAweDAzMDQ7XG5cbi8qKlxuICogUGFzc2VkIHRvIGJsZW5kRnVuYyBvciBibGVuZEZ1bmNTZXBhcmF0ZSB0byBtdWx0aXBseSBhIGNvbXBvbmVudCBieSBvbmUgbWludXMgdGhlIGRlc3RpbmF0aW9uJ3MgYWxwaGFcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgT05FX01JTlVTX0RTVF9BTFBIQSA9IDB4MDMwNTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYmxlbmRGdW5jIG9yIGJsZW5kRnVuY1NlcGFyYXRlIHRvIG11bHRpcGx5IGEgY29tcG9uZW50IGJ5IHRoZSBkZXN0aW5hdGlvbidzIGNvbG9yXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERTVF9DT0xPUiA9IDB4MDMwNjtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYmxlbmRGdW5jIG9yIGJsZW5kRnVuY1NlcGFyYXRlIHRvIG11bHRpcGx5IGEgY29tcG9uZW50IGJ5IG9uZSBtaW51cyB0aGUgZGVzdGluYXRpb24ncyBjb2xvclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBPTkVfTUlOVVNfRFNUX0NPTE9SID0gMHgwMzA3O1xuXG4vKipcbiAqIFBhc3NlZCB0byBibGVuZEZ1bmMgb3IgYmxlbmRGdW5jU2VwYXJhdGUgdG8gbXVsdGlwbHkgYSBjb21wb25lbnQgYnkgdGhlIG1pbmltdW0gb2Ygc291cmNlJ3MgYWxwaGEgb3Igb25lIG1pbnVzIHRoZSBkZXN0aW5hdGlvbidzIGFscGhhXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNSQ19BTFBIQV9TQVRVUkFURSA9IDB4MDMwODtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYmxlbmRGdW5jIG9yIGJsZW5kRnVuY1NlcGFyYXRlIHRvIHNwZWNpZnkgYSBjb25zdGFudCBjb2xvciBibGVuZCBmdW5jdGlvblxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT05TVEFOVF9DT0xPUiA9IDB4ODAwMTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYmxlbmRGdW5jIG9yIGJsZW5kRnVuY1NlcGFyYXRlIHRvIHNwZWNpZnkgb25lIG1pbnVzIGEgY29uc3RhbnQgY29sb3IgYmxlbmQgZnVuY3Rpb25cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgT05FX01JTlVTX0NPTlNUQU5UX0NPTE9SID0gMHg4MDAyO1xuXG4vKipcbiAqIFBhc3NlZCB0byBibGVuZEZ1bmMgb3IgYmxlbmRGdW5jU2VwYXJhdGUgdG8gc3BlY2lmeSBhIGNvbnN0YW50IGFscGhhIGJsZW5kIGZ1bmN0aW9uXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTlNUQU5UX0FMUEhBID0gMHg4MDAzO1xuXG4vKipcbiAqIFBhc3NlZCB0byBibGVuZEZ1bmMgb3IgYmxlbmRGdW5jU2VwYXJhdGUgdG8gc3BlY2lmeSBvbmUgbWludXMgYSBjb25zdGFudCBhbHBoYSBibGVuZCBmdW5jdGlvblxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBPTkVfTUlOVVNfQ09OU1RBTlRfQUxQSEEgPSAweDgwMDQ7XG5cbi8vIEJsZW5kaW5nIGVxdWF0aW9uc1xuLy8gQ29uc3RhbnRzIHBhc3NlZCB0byBXZWJHTFJlbmRlcmluZ0NvbnRleHQuYmxlbmRFcXVhdGlvbigpIG9yIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoKSB0byBjb250cm9sIGhvdyB0aGUgYmxlbmRpbmcgaXMgY2FsY3VsYXRlZCAoZm9yIGJvdGgsIFJCRyBhbmQgYWxwaGEsIG9yIHNlcGFyYXRlbHkpXG5cbi8qKlxuICogUGFzc2VkIHRvIGJsZW5kRXF1YXRpb24gb3IgYmxlbmRFcXVhdGlvblNlcGFyYXRlIHRvIHNldCBhbiBhZGRpdGlvbiBibGVuZCBmdW5jdGlvblxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGVU5DX0FERCA9IDB4ODAwNjtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYmxlbmRFcXVhdGlvbiBvciBibGVuZEVxdWF0aW9uU2VwYXJhdGUgdG8gc3BlY2lmeSBhIHN1YnRyYWN0aW9uIGJsZW5kIGZ1bmN0aW9uIChzb3VyY2UgLSBkZXN0aW5hdGlvbilcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlVOQ19TVUJTVFJBQ1QgPSAweDgwMGE7XG5cbi8qKlxuICogUGFzc2VkIHRvIGJsZW5kRXF1YXRpb24gb3IgYmxlbmRFcXVhdGlvblNlcGFyYXRlIHRvIHNwZWNpZnkgYSByZXZlcnNlIHN1YnRyYWN0aW9uIGJsZW5kIGZ1bmN0aW9uIChkZXN0aW5hdGlvbiAtIHNvdXJjZSlcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlVOQ19SRVZFUlNFX1NVQlRSQUNUID0gMHg4MDBiO1xuXG4vLyBHZXR0aW5nIEdMIHBhcmFtZXRlciBpbmZvcm1hdGlvblxuLy8gQ29uc3RhbnRzIHBhc3NlZCB0byBXZWJHTFJlbmRlcmluZ0NvbnRleHQuZ2V0UGFyYW1ldGVyKCkgdG8gc3BlY2lmeSB3aGF0IGluZm9ybWF0aW9uIHRvIHJldHVyblxuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBjdXJyZW50IFJHQiBibGVuZCBmdW5jdGlvblxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCTEVORF9FUVVBVElPTiA9IDB4ODAwOTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UGFyYW1ldGVyIHRvIGdldCB0aGUgY3VycmVudCBSR0IgYmxlbmQgZnVuY3Rpb24uIFNhbWUgYXMgQkxFTkRfRVFVQVRJT05cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQkxFTkRfRVFVQVRJT05fUkdCID0gMHg4MDA5O1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBjdXJyZW50IGFscGhhIGJsZW5kIGZ1bmN0aW9uLiBTYW1lIGFzIEJMRU5EX0VRVUFUSU9OXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJMRU5EX0VRVUFUSU9OX0FMUEhBID0gMHg4ODNkO1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBjdXJyZW50IGRlc3RpbmF0aW9uIFJHQiBibGVuZCBmdW5jdGlvblxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCTEVORF9EU1RfUkdCID0gMHg4MGM4O1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBjdXJyZW50IHNvdXJjZSBSR0IgYmxlbmQgZnVuY3Rpb25cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQkxFTkRfU1JDX1JHQiA9IDB4ODBjOTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UGFyYW1ldGVyIHRvIGdldCB0aGUgY3VycmVudCBkZXN0aW5hdGlvbiBhbHBoYSBibGVuZCBmdW5jdGlvblxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCTEVORF9EU1RfQUxQSEEgPSAweDgwY2E7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFBhcmFtZXRlciB0byBnZXQgdGhlIGN1cnJlbnQgc291cmNlIGFscGhhIGJsZW5kIGZ1bmN0aW9uXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJMRU5EX1NSQ19BTFBIQSA9IDB4ODBjYjtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UGFyYW1ldGVyIHRvIHJldHVybiBhIHRoZSBjdXJyZW50IGJsZW5kIGNvbG9yXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJMRU5EX0NPTE9SID0gMHg4MDA1O1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBhcnJheSBidWZmZXIgYmluZGluZ1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBBUlJBWV9CVUZGRVJfQklORElORyA9IDB4ODg5NDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UGFyYW1ldGVyIHRvIGdldCB0aGUgY3VycmVudCBlbGVtZW50IGFycmF5IGJ1ZmZlclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBFTEVNRU5UX0FSUkFZX0JVRkZFUl9CSU5ESU5HID0gMHg4ODk1O1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBjdXJyZW50IGxpbmVXaWR0aCAoc2V0IGJ5IHRoZSBsaW5lV2lkdGggbWV0aG9kKVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBMSU5FX1dJRFRIID0gMHgwYjIxO1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBjdXJyZW50IHNpemUgb2YgYSBwb2ludCBkcmF3biB3aXRoIGdsLlBPSU5UU1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBBTElBU0VEX1BPSU5UX1NJWkVfUkFOR0UgPSAweDg0NmQ7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFBhcmFtZXRlciB0byBnZXQgdGhlIHJhbmdlIG9mIGF2YWlsYWJsZSB3aWR0aHMgZm9yIGEgbGluZS4gUmV0dXJucyBhIGxlbmd0aC0yIGFycmF5IHdpdGggdGhlIGxvIHZhbHVlIGF0IDAsIGFuZCBoaWdodCBhdCAxXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEFMSUFTRURfTElORV9XSURUSF9SQU5HRSA9IDB4ODQ2ZTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UGFyYW1ldGVyIHRvIGdldCB0aGUgY3VycmVudCB2YWx1ZSBvZiBjdWxsRmFjZS4gU2hvdWxkIHJldHVybiBGUk9OVCwgQkFDSywgb3IgRlJPTlRfQU5EX0JBQ0tcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ1VMTF9GQUNFX01PREUgPSAweDBiNDU7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFBhcmFtZXRlciB0byBkZXRlcm1pbmUgdGhlIGN1cnJlbnQgdmFsdWUgb2YgZnJvbnRGYWNlLiBTaG91bGQgcmV0dXJuIENXIG9yIENDV1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUk9OVF9GQUNFID0gMHgwYjQ2O1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gcmV0dXJuIGEgbGVuZ3RoLTIgYXJyYXkgb2YgZmxvYXRzIGdpdmluZyB0aGUgY3VycmVudCBkZXB0aCByYW5nZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERVBUSF9SQU5HRSA9IDB4MGI3MDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UGFyYW1ldGVyIHRvIGRldGVybWluZSBpZiB0aGUgZGVwdGggd3JpdGUgbWFzayBpcyBlbmFibGVkXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERFUFRIX1dSSVRFTUFTSyA9IDB4MGI3MjtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UGFyYW1ldGVyIHRvIGRldGVybWluZSB0aGUgY3VycmVudCBkZXB0aCBjbGVhciB2YWx1ZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERVBUSF9DTEVBUl9WQUxVRSA9IDB4MGI3MztcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UGFyYW1ldGVyIHRvIGdldCB0aGUgY3VycmVudCBkZXB0aCBmdW5jdGlvbi4gUmV0dXJucyBORVZFUiwgQUxXQVlTLCBMRVNTLCBFUVVBTCwgTEVRVUFMLCBHUkVBVEVSLCBHRVFVQUwsIG9yIE5PVEVRVUFMXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERFUFRIX0ZVTkMgPSAweDBiNzQ7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFBhcmFtZXRlciB0byBnZXQgdGhlIHZhbHVlIHRoZSBzdGVuY2lsIHdpbGwgYmUgY2xlYXJlZCB0b1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVEVOQ0lMX0NMRUFSX1ZBTFVFID0gMHgwYjkxO1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBjdXJyZW50IHN0ZW5jaWwgZnVuY3Rpb24uIFJldHVybnMgTkVWRVIsIEFMV0FZUywgTEVTUywgRVFVQUwsIExFUVVBTCwgR1JFQVRFUiwgR0VRVUFMLCBvciBOT1RFUVVBTFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVEVOQ0lMX0ZVTkMgPSAweDBiOTI7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFBhcmFtZXRlciB0byBnZXQgdGhlIGN1cnJlbnQgc3RlbmNpbCBmYWlsIGZ1bmN0aW9uLiBTaG91bGQgcmV0dXJuIEtFRVAsIFJFUExBQ0UsIElOQ1IsIERFQ1IsIElOVkVSVCwgSU5DUl9XUkFQLCBvciBERUNSX1dSQVBcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RFTkNJTF9GQUlMID0gMHgwYjk0O1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBjdXJyZW50IHN0ZW5jaWwgZmFpbCBmdW5jdGlvbiBzaG91bGQgdGhlIGRlcHRoIGJ1ZmZlciB0ZXN0IGZhaWwuIFNob3VsZCByZXR1cm4gS0VFUCwgUkVQTEFDRSwgSU5DUiwgREVDUiwgSU5WRVJULCBJTkNSX1dSQVAsIG9yIERFQ1JfV1JBUFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVEVOQ0lMX1BBU1NfREVQVEhfRkFJTCA9IDB4MGI5NTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UGFyYW1ldGVyIHRvIGdldCB0aGUgY3VycmVudCBzdGVuY2lsIGZhaWwgZnVuY3Rpb24gc2hvdWxkIHRoZSBkZXB0aCBidWZmZXIgdGVzdCBwYXNzLiBTaG91bGQgcmV0dXJuIEtFRVAsIFJFUExBQ0UsIElOQ1IsIERFQ1IsIElOVkVSVCwgSU5DUl9XUkFQLCBvciBERUNSX1dSQVBcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RFTkNJTF9QQVNTX0RFUFRIX1BBU1MgPSAweDBiOTY7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFBhcmFtZXRlciB0byBnZXQgdGhlIHJlZmVyZW5jZSB2YWx1ZSB1c2VkIGZvciBzdGVuY2lsIHRlc3RzXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNURU5DSUxfUkVGID0gMHgwYjk3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RFTkNJTF9WQUxVRV9NQVNLID0gMHgwYjkzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RFTkNJTF9XUklURU1BU0sgPSAweDBiOTg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVEVOQ0lMX0JBQ0tfRlVOQyA9IDB4ODgwMDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNURU5DSUxfQkFDS19GQUlMID0gMHg4ODAxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RFTkNJTF9CQUNLX1BBU1NfREVQVEhfRkFJTCA9IDB4ODgwMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNURU5DSUxfQkFDS19QQVNTX0RFUFRIX1BBU1MgPSAweDg4MDM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVEVOQ0lMX0JBQ0tfUkVGID0gMHg4Y2EzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RFTkNJTF9CQUNLX1ZBTFVFX01BU0sgPSAweDhjYTQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVEVOQ0lMX0JBQ0tfV1JJVEVNQVNLID0gMHg4Y2E1O1xuXG4vKipcbiAqIFJldHVybnMgYW4gSW50MzJBcnJheSB3aXRoIGZvdXIgZWxlbWVudHMgZm9yIHRoZSBjdXJyZW50IHZpZXdwb3J0IGRpbWVuc2lvbnNcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVklFV1BPUlQgPSAweDBiYTI7XG5cbi8qKlxuICogUmV0dXJucyBhbiBJbnQzMkFycmF5IHdpdGggZm91ciBlbGVtZW50cyBmb3IgdGhlIGN1cnJlbnQgc2Npc3NvciBib3ggZGltZW5zaW9uc1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTQ0lTU09SX0JPWCA9IDB4MGMxMDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTE9SX0NMRUFSX1ZBTFVFID0gMHgwYzIyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfV1JJVEVNQVNLID0gMHgwYzIzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5QQUNLX0FMSUdOTUVOVCA9IDB4MGNmNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFBBQ0tfQUxJR05NRU5UID0gMHgwZDA1O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUFYX1RFWFRVUkVfU0laRSA9IDB4MGQzMztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9WSUVXUE9SVF9ESU1TID0gMHgwZDNhO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1VCUElYRUxfQklUUyA9IDB4MGQ1MDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJFRF9CSVRTID0gMHgwZDUyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgR1JFRU5fQklUUyA9IDB4MGQ1MztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJMVUVfQklUUyA9IDB4MGQ1NDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEFMUEhBX0JJVFMgPSAweDBkNTU7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERVBUSF9CSVRTID0gMHgwZDU2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RFTkNJTF9CSVRTID0gMHgwZDU3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUE9MWUdPTl9PRkZTRVRfVU5JVFMgPSAweDJhMDA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBQT0xZR09OX09GRlNFVF9GQUNUT1IgPSAweDgwMzg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFX0JJTkRJTkdfMkQgPSAweDgwNjk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTQU1QTEVfQlVGRkVSUyA9IDB4ODBhODtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNBTVBMRVMgPSAweDgwYTk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTQU1QTEVfQ09WRVJBR0VfVkFMVUUgPSAweDgwYWE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTQU1QTEVfQ09WRVJBR0VfSU5WRVJUID0gMHg4MGFiO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9URVhUVVJFX0ZPUk1BVFMgPSAweDg2YTM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBWRU5ET1IgPSAweDFmMDA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRU5ERVJFUiA9IDB4MWYwMTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAweDFmMDI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBJTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX1RZUEUgPSAweDhiOWE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBJTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX0ZPUk1BVCA9IDB4OGI5YjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJST1dTRVJfREVGQVVMVF9XRUJHTCA9IDB4OTI0NDtcblxuLy8gQnVmZmVyc1xuLy8gQ29uc3RhbnRzIHBhc3NlZCB0byBXZWJHTFJlbmRlcmluZ0NvbnRleHQuYnVmZmVyRGF0YSgpLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuYnVmZmVyU3ViRGF0YSgpLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuYmluZEJ1ZmZlcigpLCBvciBXZWJHTFJlbmRlcmluZ0NvbnRleHQuZ2V0QnVmZmVyUGFyYW1ldGVyKClcblxuLyoqXG4gKiBQYXNzZWQgdG8gYnVmZmVyRGF0YSBhcyBhIGhpbnQgYWJvdXQgd2hldGhlciB0aGUgY29udGVudHMgb2YgdGhlIGJ1ZmZlciBhcmUgbGlrZWx5IHRvIGJlIHVzZWQgb2Z0ZW4gYW5kIG5vdCBjaGFuZ2Ugb2Z0ZW5cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RBVElDX0RSQVcgPSAweDg4ZTQ7XG5cbi8qKlxuICogUGFzc2VkIHRvIGJ1ZmZlckRhdGEgYXMgYSBoaW50IGFib3V0IHdoZXRoZXIgdGhlIGNvbnRlbnRzIG9mIHRoZSBidWZmZXIgYXJlIGxpa2VseSB0byBub3QgYmUgdXNlZCBvZnRlblxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVFJFQU1fRFJBVyA9IDB4ODhlMDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYnVmZmVyRGF0YSBhcyBhIGhpbnQgYWJvdXQgd2hldGhlciB0aGUgY29udGVudHMgb2YgdGhlIGJ1ZmZlciBhcmUgbGlrZWx5IHRvIGJlIHVzZWQgb2Z0ZW4gYW5kIGNoYW5nZSBvZnRlblxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEWU5BTUlDX0RSQVcgPSAweDg4ZTg7XG5cbi8qKlxuICogUGFzc2VkIHRvIGJpbmRCdWZmZXIgb3IgYnVmZmVyRGF0YSB0byBzcGVjaWZ5IHRoZSB0eXBlIG9mIGJ1ZmZlciBiZWluZyB1c2VkXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEFSUkFZX0JVRkZFUiA9IDB4ODg5MjtcblxuLyoqXG4gKiBQYXNzZWQgdG8gYmluZEJ1ZmZlciBvciBidWZmZXJEYXRhIHRvIHNwZWNpZnkgdGhlIHR5cGUgb2YgYnVmZmVyIGJlaW5nIHVzZWRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRUxFTUVOVF9BUlJBWV9CVUZGRVIgPSAweDg4OTM7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldEJ1ZmZlclBhcmFtZXRlciB0byBnZXQgYSBidWZmZXIncyBzaXplXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJVRkZFUl9TSVpFID0gMHg4NzY0O1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRCdWZmZXJQYXJhbWV0ZXIgdG8gZ2V0IHRoZSBoaW50IGZvciB0aGUgYnVmZmVyIHBhc3NlZCBpbiB3aGVuIGl0IHdhcyBjcmVhdGVkXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJVRkZFUl9VU0FHRSA9IDB4ODc2NTtcblxuLy8gVmVydGV4IGF0dHJpYnV0ZXNcbi8vIENvbnN0YW50cyBwYXNzZWQgdG8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LmdldFZlcnRleEF0dHJpYigpXG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFZlcnRleEF0dHJpYiB0byByZWFkIGJhY2sgdGhlIGN1cnJlbnQgdmVydGV4IGF0dHJpYnV0ZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDVVJSRU5UX1ZFUlRFWF9BVFRSSUIgPSAweDg2MjY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBWRVJURVhfQVRUUklCX0FSUkFZX0VOQUJMRUQgPSAweDg2MjI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBWRVJURVhfQVRUUklCX0FSUkFZX1NJWkUgPSAweDg2MjM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBWRVJURVhfQVRUUklCX0FSUkFZX1NUUklERSA9IDB4ODYyNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFZFUlRFWF9BVFRSSUJfQVJSQVlfVFlQRSA9IDB4ODYyNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFZFUlRFWF9BVFRSSUJfQVJSQVlfTk9STUFMSVpFRCA9IDB4ODg2YTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFZFUlRFWF9BVFRSSUJfQVJSQVlfUE9JTlRFUiA9IDB4ODY0NTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFZFUlRFWF9BVFRSSUJfQVJSQVlfQlVGRkVSX0JJTkRJTkcgPSAweDg4OWY7XG5cbi8vIEN1bGxpbmdcbi8vIENvbnN0YW50cyBwYXNzZWQgdG8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LmN1bGxGYWNlKClcblxuLyoqXG4gKiBQYXNzZWQgdG8gZW5hYmxlL2Rpc2FibGUgdG8gdHVybiBvbi9vZmYgY3VsbGluZy4gQ2FuIGFsc28gYmUgdXNlZCB3aXRoIGdldFBhcmFtZXRlciB0byBmaW5kIHRoZSBjdXJyZW50IGN1bGxpbmcgbWV0aG9kXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENVTExfRkFDRSA9IDB4MGI0NDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gY3VsbEZhY2UgdG8gc3BlY2lmeSB0aGF0IG9ubHkgZnJvbnQgZmFjZXMgc2hvdWxkIGJlIGN1bGxlZFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUk9OVCA9IDB4MDQwNDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gY3VsbEZhY2UgdG8gc3BlY2lmeSB0aGF0IG9ubHkgYmFjayBmYWNlcyBzaG91bGQgYmUgY3VsbGVkXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJBQ0sgPSAweDA0MDU7XG5cbi8qKlxuICogUGFzc2VkIHRvIGN1bGxGYWNlIHRvIHNwZWNpZnkgdGhhdCBmcm9udCBhbmQgYmFjayBmYWNlcyBzaG91bGQgYmUgY3VsbGVkXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZST05UX0FORF9CQUNLID0gMHgwNDA4O1xuXG4vLyBFbmFibGluZyBhbmQgZGlzYWJsaW5nXG4vLyBDb25zdGFudHMgcGFzc2VkIHRvIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5lbmFibGUoKSBvciBXZWJHTFJlbmRlcmluZ0NvbnRleHQuZGlzYWJsZSgpXG5cbi8qKlxuICogUGFzc2VkIHRvIGVuYWJsZS9kaXNhYmxlIHRvIHR1cm4gb24vb2ZmIGJsZW5kaW5nLiBDYW4gYWxzbyBiZSB1c2VkIHdpdGggZ2V0UGFyYW1ldGVyIHRvIGZpbmQgdGhlIGN1cnJlbnQgYmxlbmRpbmcgbWV0aG9kXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJMRU5EID0gMHgwYmUyO1xuXG4vKipcbiAqIFBhc3NlZCB0byBlbmFibGUvZGlzYWJsZSB0byB0dXJuIG9uL29mZiB0aGUgZGVwdGggdGVzdC4gQ2FuIGFsc28gYmUgdXNlZCB3aXRoIGdldFBhcmFtZXRlciB0byBxdWVyeSB0aGUgZGVwdGggdGVzdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERVBUSF9URVNUID0gMHgwYjcxO1xuXG4vKipcbiAqIFBhc3NlZCB0byBlbmFibGUvZGlzYWJsZSB0byB0dXJuIG9uL29mZiBkaXRoZXJpbmcuIENhbiBhbHNvIGJlIHVzZWQgd2l0aCBnZXRQYXJhbWV0ZXIgdG8gZmluZCB0aGUgY3VycmVudCBkaXRoZXJpbmcgbWV0aG9kXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERJVEhFUiA9IDB4MGJkMDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZW5hYmxlL2Rpc2FibGUgdG8gdHVybiBvbi9vZmYgdGhlIHBvbHlnb24gb2Zmc2V0LiBVc2VmdWwgZm9yIHJlbmRlcmluZyBoaWRkZW4tbGluZSBpbWFnZXMsIGRlY2FscywgYW5kIG9yIHNvbGlkcyB3aXRoIGhpZ2hsaWdodGVkIGVkZ2VzLiBDYW4gYWxzbyBiZSB1c2VkIHdpdGggZ2V0UGFyYW1ldGVyIHRvIHF1ZXJ5IHRoZSBzY2lzc29yIHRlc3RcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUE9MWUdPTl9PRkZTRVRfRklMTCA9IDB4ODAzNztcblxuLyoqXG4gKiBQYXNzZWQgdG8gZW5hYmxlL2Rpc2FibGUgdG8gdHVybiBvbi9vZmYgdGhlIGFscGhhIHRvIGNvdmVyYWdlLiBVc2VkIGluIG11bHRpLXNhbXBsaW5nIGFscGhhIGNoYW5uZWxzXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNBTVBMRV9BTFBIQV9UT19DT1ZFUkFHRSA9IDB4ODA5ZTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZW5hYmxlL2Rpc2FibGUgdG8gdHVybiBvbi9vZmYgdGhlIHNhbXBsZSBjb3ZlcmFnZS4gVXNlZCBpbiBtdWx0aS1zYW1wbGluZ1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTQU1QTEVfQ09WRVJBR0UgPSAweDgwYTA7XG5cbi8qKlxuICogUGFzc2VkIHRvIGVuYWJsZS9kaXNhYmxlIHRvIHR1cm4gb24vb2ZmIHRoZSBzY2lzc29yIHRlc3QuIENhbiBhbHNvIGJlIHVzZWQgd2l0aCBnZXRQYXJhbWV0ZXIgdG8gcXVlcnkgdGhlIHNjaXNzb3IgdGVzdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTQ0lTU09SX1RFU1QgPSAweDBjMTE7XG5cbi8qKlxuICogUGFzc2VkIHRvIGVuYWJsZS9kaXNhYmxlIHRvIHR1cm4gb24vb2ZmIHRoZSBzdGVuY2lsIHRlc3QuIENhbiBhbHNvIGJlIHVzZWQgd2l0aCBnZXRQYXJhbWV0ZXIgdG8gcXVlcnkgdGhlIHN0ZW5jaWwgdGVzdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVEVOQ0lMX1RFU1QgPSAweDBiOTA7XG5cbi8vIEVycm9yc1xuLy8gQ29uc3RhbnRzIHJldHVybmVkIGZyb20gV2ViR0xSZW5kZXJpbmdDb250ZXh0LmdldEVycm9yKClcblxuLyoqXG4gKiBSZXR1cm5lZCBmcm9tIGdldEVycm9yXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE5PX0VSUk9SID0gMDtcblxuLyoqXG4gKiBSZXR1cm5lZCBmcm9tIGdldEVycm9yXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IElOVkFMSURfRU5VTSA9IDB4MDUwMDtcblxuLyoqXG4gKiBSZXR1cm5lZCBmcm9tIGdldEVycm9yXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IElOVkFMSURfVkFMVUUgPSAweDA1MDE7XG5cbi8qKlxuICogUmV0dXJuZWQgZnJvbSBnZXRFcnJvclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBJTlZBTElEX09QRVJBVElPTiA9IDB4MDUwMjtcblxuLyoqXG4gKiBSZXR1cm5lZCBmcm9tIGdldEVycm9yXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE9VVF9PRl9NRU1PUlkgPSAweDA1MDU7XG5cbi8qKlxuICogUmV0dXJuZWQgZnJvbSBnZXRFcnJvclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT05URVhUX0xPU1RfV0VCR0wgPSAweDkyNDI7XG5cbi8vIEZyb250IGZhY2UgZGlyZWN0aW9uc1xuLy8gQ29uc3RhbnRzIHBhc3NlZCB0byBXZWJHTFJlbmRlcmluZ0NvbnRleHQuZnJvbnRGYWNlKClcblxuLyoqXG4gKiBQYXNzZWQgdG8gZnJvbnRGYWNlIHRvIHNwZWNpZnkgdGhlIGZyb250IGZhY2Ugb2YgYSBwb2x5Z29uIGlzIGRyYXduIGluIHRoZSBjbG9ja3dpc2UgZGlyZWN0aW9uLFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDVyA9IDB4MDkwMDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZnJvbnRGYWNlIHRvIHNwZWNpZnkgdGhlIGZyb250IGZhY2Ugb2YgYSBwb2x5Z29uIGlzIGRyYXduIGluIHRoZSBjb3VudGVyIGNsb2Nrd2lzZSBkaXJlY3Rpb25cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ0NXID0gMHgwOTAxO1xuXG4vLyBIaW50c1xuLy8gQ29uc3RhbnRzIHBhc3NlZCB0byBXZWJHTFJlbmRlcmluZ0NvbnRleHQuaGludCgpXG5cbi8qKlxuICogVGhlcmUgaXMgbm8gcHJlZmVyZW5jZSBmb3IgdGhpcyBiZWhhdmlvclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBET05UX0NBUkUgPSAweDExMDA7XG5cbi8qKlxuICogVGhlIG1vc3QgZWZmaWNpZW50IGJlaGF2aW9yIHNob3VsZCBiZSB1c2VkXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZBU1RFU1QgPSAweDExMDE7XG5cbi8qKlxuICogVGhlIG1vc3QgY29ycmVjdCBvciB0aGUgaGlnaGVzdCBxdWFsaXR5IG9wdGlvbiBzaG91bGQgYmUgdXNlZFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBOSUNFU1QgPSAweDExMDI7XG5cbi8qKlxuICogSGludCBmb3IgdGhlIHF1YWxpdHkgb2YgZmlsdGVyaW5nIHdoZW4gZ2VuZXJhdGluZyBtaXBtYXAgaW1hZ2VzIHdpdGggV2ViR0xSZW5kZXJpbmdDb250ZXh0LmdlbmVyYXRlTWlwbWFwKClcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgR0VORVJBVEVfTUlQTUFQX0hJTlQgPSAweDgxOTI7XG5cbi8vIERhdGEgdHlwZXNcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJZVEUgPSAweDE0MDA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTlNJR05FRF9CWVRFID0gMHgxNDAxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU0hPUlQgPSAweDE0MDI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTlNJR05FRF9TSE9SVCA9IDB4MTQwMztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IElOVCA9IDB4MTQwNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0lOVCA9IDB4MTQwNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZMT0FUID0gMHgxNDA2O1xuXG4vLyBQaXhlbCBmb3JtYXRzXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERVBUSF9DT01QT05FTlQgPSAweDE5MDI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBBTFBIQSA9IDB4MTkwNjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQiA9IDB4MTkwNztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQkEgPSAweDE5MDg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBMVU1JTkFOQ0UgPSAweDE5MDk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBMVU1JTkFOQ0VfQUxQSEEgPSAweDE5MGE7XG5cbi8vIFBpeGVsIHR5cGVzXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTlNJR05FRF9TSE9SVF80XzRfNF80ID0gMHg4MDMzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5TSUdORURfU0hPUlRfNV81XzVfMSA9IDB4ODAzNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX1NIT1JUXzVfNl81ID0gMHg4MzYzO1xuXG4vLyBTaGFkZXJzXG4vLyBDb25zdGFudHMgcGFzc2VkIHRvIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5nZXRTaGFkZXJQYXJhbWV0ZXIoKVxuXG4vKipcbiAqIFBhc3NlZCB0byBjcmVhdGVTaGFkZXIgdG8gZGVmaW5lIGEgZnJhZ21lbnQgc2hhZGVyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQUdNRU5UX1NIQURFUiA9IDB4OGIzMDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gY3JlYXRlU2hhZGVyIHRvIGRlZmluZSBhIHZlcnRleCBzaGFkZXJcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVkVSVEVYX1NIQURFUiA9IDB4OGIzMTtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0U2hhZGVyUGFyYW10ZXIgdG8gZ2V0IHRoZSBzdGF0dXMgb2YgdGhlIGNvbXBpbGF0aW9uLiBSZXR1cm5zIGZhbHNlIGlmIHRoZSBzaGFkZXIgd2FzIG5vdCBjb21waWxlZC4gWW91IGNhbiB0aGVuIHF1ZXJ5IGdldFNoYWRlckluZm9Mb2cgdG8gZmluZCB0aGUgZXhhY3QgZXJyb3JcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUElMRV9TVEFUVVMgPSAweDhiODE7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFNoYWRlclBhcmFtdGVyIHRvIGRldGVybWluZSBpZiBhIHNoYWRlciB3YXMgZGVsZXRlZCB2aWEgZGVsZXRlU2hhZGVyLiBSZXR1cm5zIHRydWUgaWYgaXQgd2FzLCBmYWxzZSBvdGhlcndpc2VcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgREVMRVRFX1NUQVRVUyA9IDB4OGI4MDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UHJvZ3JhbVBhcmFtZXRlciBhZnRlciBjYWxsaW5nIGxpbmtQcm9ncmFtIHRvIGRldGVybWluZSBpZiBhIHByb2dyYW0gd2FzIGxpbmtlZCBjb3JyZWN0bHkuIFJldHVybnMgZmFsc2UgaWYgdGhlcmUgd2VyZSBlcnJvcnMuIFVzZSBnZXRQcm9ncmFtSW5mb0xvZyB0byBmaW5kIHRoZSBleGFjdCBlcnJvclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBMSU5LX1NUQVRVUyA9IDB4OGI4MjtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZ2V0UHJvZ3JhbVBhcmFtZXRlciBhZnRlciBjYWxsaW5nIHZhbGlkYXRlUHJvZ3JhbSB0byBkZXRlcm1pbmUgaWYgaXQgaXMgdmFsaWQuIFJldHVybnMgZmFsc2UgaWYgZXJyb3JzIHdlcmUgZm91bmRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVkFMSURBVEVfU1RBVFVTID0gMHg4YjgzO1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQcm9ncmFtUGFyYW1ldGVyIGFmdGVyIGNhbGxpbmcgYXR0YWNoU2hhZGVyIHRvIGRldGVybWluZSBpZiB0aGUgc2hhZGVyIHdhcyBhdHRhY2hlZCBjb3JyZWN0bHkuIFJldHVybnMgZmFsc2UgaWYgZXJyb3JzIG9jY3VycmVkXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEFUVEFDSEVEX1NIQURFUlMgPSAweDhiODU7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFByb2dyYW1QYXJhbWV0ZXIgdG8gZ2V0IHRoZSBudW1iZXIgb2YgYXR0cmlidXRlcyBhY3RpdmUgaW4gYSBwcm9ncmFtXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEFDVElWRV9BVFRSSUJVVEVTID0gMHg4Yjg5O1xuXG4vKipcbiAqIFBhc3NlZCB0byBnZXRQcm9ncmFtUGFyYW10ZXIgdG8gZ2V0IHRoZSBudW1iZXIgb2YgdW5pZm9ybXMgYWN0aXZlIGluIGEgcHJvZ3JhbVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBBQ1RJVkVfVU5JRk9STVMgPSAweDhiODY7XG5cbi8qKlxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGVudHJpZXMgcG9zc2libGUgaW4gdGhlIHZlcnRleCBhdHRyaWJ1dGUgbGlzdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVkVSVEVYX0FUVFJJQlMgPSAweDg4Njk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyA9IDB4OGRmYjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9WQVJZSU5HX1ZFQ1RPUlMgPSAweDhkZmM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyA9IDB4OGI0ZDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUyA9IDB4OGI0YztcblxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBkZXBlbmRlbnQgbnVtYmVyIG9mIG1heGltdW0gdGV4dHVyZSB1bml0cy4gQXQgbGVhc3QgOFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVEVYVFVSRV9JTUFHRV9VTklUUyA9IDB4ODg3MjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9GUkFHTUVOVF9VTklGT1JNX1ZFQ1RPUlMgPSAweDhkZmQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTSEFERVJfVFlQRSA9IDB4OGI0ZjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNIQURJTkdfTEFOR1VBR0VfVkVSU0lPTiA9IDB4OGI4YztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENVUlJFTlRfUFJPR1JBTSA9IDB4OGI4ZDtcblxuLy8gRGVwdGggb3Igc3RlbmNpbCB0ZXN0c1xuLy8gQ29uc3RhbnRzIHBhc3NlZCB0byBXZWJHTFJlbmRlcmluZ0NvbnRleHQuc3RlbmNpbEZ1bmMoKVxuXG4vKipcbiAqIFBhc3NlZCB0byBkZXB0aEZ1bmN0aW9uIG9yIHN0ZW5jaWxGdW5jdGlvbiB0byBzcGVjaWZ5IGRlcHRoIG9yIHN0ZW5jaWwgdGVzdHMgd2lsbCBuZXZlciBwYXNzLiBpLmUuIE5vdGhpbmcgd2lsbCBiZSBkcmF3blxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBORVZFUiA9IDB4MDIwMDtcblxuLyoqXG4gKiBQYXNzZWQgdG8gZGVwdGhGdW5jdGlvbiBvciBzdGVuY2lsRnVuY3Rpb24gdG8gc3BlY2lmeSBkZXB0aCBvciBzdGVuY2lsIHRlc3RzIHdpbGwgYWx3YXlzIHBhc3MuIGkuZS4gUGl4ZWxzIHdpbGwgYmUgZHJhd24gaW4gdGhlIG9yZGVyIHRoZXkgYXJlIGRyYXduXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEFMV0FZUyA9IDB4MDIwNztcblxuLyoqXG4gKiBQYXNzZWQgdG8gZGVwdGhGdW5jdGlvbiBvciBzdGVuY2lsRnVuY3Rpb24gdG8gc3BlY2lmeSBkZXB0aCBvciBzdGVuY2lsIHRlc3RzIHdpbGwgcGFzcyBpZiB0aGUgbmV3IGRlcHRoIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgc3RvcmVkIHZhbHVlXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IExFU1MgPSAweDAyMDE7XG5cbi8qKlxuICogUGFzc2VkIHRvIGRlcHRoRnVuY3Rpb24gb3Igc3RlbmNpbEZ1bmN0aW9uIHRvIHNwZWNpZnkgZGVwdGggb3Igc3RlbmNpbCB0ZXN0cyB3aWxsIHBhc3MgaWYgdGhlIG5ldyBkZXB0aCB2YWx1ZSBpcyBlcXVhbHMgdG8gdGhlIHN0b3JlZCB2YWx1ZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBFUVVBTCA9IDB4MDIwMjtcblxuLyoqXG4gKiAgUGFzc2VkIHRvIGRlcHRoRnVuY3Rpb24gb3Igc3RlbmNpbEZ1bmN0aW9uIHRvIHNwZWNpZnkgZGVwdGggb3Igc3RlbmNpbCB0ZXN0cyB3aWxsIHBhc3MgaWYgdGhlIG5ldyBkZXB0aCB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHN0b3JlZCB2YWx1ZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBMRVFVQUwgPSAweDAyMDM7XG5cbi8qKlxuICogUGFzc2VkIHRvIGRlcHRoRnVuY3Rpb24gb3Igc3RlbmNpbEZ1bmN0aW9uIHRvIHNwZWNpZnkgZGVwdGggb3Igc3RlbmNpbCB0ZXN0cyB3aWxsIHBhc3MgaWYgdGhlIG5ldyBkZXB0aCB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIHN0b3JlZCB2YWx1ZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBHUkVBVEVSID0gMHgwMjA0O1xuXG4vKipcbiAqIFBhc3NlZCB0byBkZXB0aEZ1bmN0aW9uIG9yIHN0ZW5jaWxGdW5jdGlvbiB0byBzcGVjaWZ5IGRlcHRoIG9yIHN0ZW5jaWwgdGVzdHMgd2lsbCBwYXNzIGlmIHRoZSBuZXcgZGVwdGggdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBzdG9yZWQgdmFsdWVcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgR0VRVUFMID0gMHgwMjA2O1xuXG4vKipcbiAqIFBhc3NlZCB0byBkZXB0aEZ1bmN0aW9uIG9yIHN0ZW5jaWxGdW5jdGlvbiB0byBzcGVjaWZ5IGRlcHRoIG9yIHN0ZW5jaWwgdGVzdHMgd2lsbCBwYXNzIGlmIHRoZSBuZXcgZGVwdGggdmFsdWUgaXMgbm90IGVxdWFsIHRvIHRoZSBzdG9yZWQgdmFsdWVcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTk9URVFVQUwgPSAweDAyMDU7XG5cbi8vIFN0ZW5jaWwgYWN0aW9uc1xuLy8gQ29uc3RhbnRzIHBhc3NlZCB0byBXZWJHTFJlbmRlcmluZ0NvbnRleHQuc3RlbmNpbE9wKClcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEtFRVAgPSAweDFlMDA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRVBMQUNFID0gMHgxZTAxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgSU5DUiA9IDB4MWUwMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERFQ1IgPSAweDFlMDM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBJTlZFUlQgPSAweDE1MGE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBJTkNSX1dSQVAgPSAweDg1MDc7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERUNSX1dSQVAgPSAweDg1MDg7XG5cbi8vIFRleHR1cmVzXG4vLyBDb25zdGFudHMgcGFzc2VkIHRvIFdlYkdMUmVuZGVyaW5nQ29udGV4dC50ZXhQYXJhbWV0ZXJpKCksIFdlYkdMUmVuZGVyaW5nQ29udGV4dC50ZXhQYXJhbWV0ZXJmKCksIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5iaW5kVGV4dHVyZSgpLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQudGV4SW1hZ2UyRCgpLCBhbmQgb3RoZXJzXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBORUFSRVNUID0gMHgyNjAwO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTElORUFSID0gMHgyNjAxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCA9IDB4MjcwMDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IExJTkVBUl9NSVBNQVBfTkVBUkVTVCA9IDB4MjcwMTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE5FQVJFU1RfTUlQTUFQX0xJTkVBUiA9IDB4MjcwMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IExJTkVBUl9NSVBNQVBfTElORUFSID0gMHgyNzAzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRV9NQUdfRklMVEVSID0gMHgyODAwO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRV9NSU5fRklMVEVSID0gMHgyODAxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRV9XUkFQX1MgPSAweDI4MDI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFX1dSQVBfVCA9IDB4MjgwMztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfMkQgPSAweDBkZTE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFID0gMHgxNzAyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRV9DVUJFX01BUCA9IDB4ODUxMztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfQklORElOR19DVUJFX01BUCA9IDB4ODUxNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCA9IDB4ODUxNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWCA9IDB4ODUxNjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWSA9IDB4ODUxNztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWSA9IDB4ODUxODtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWiA9IDB4ODUxOTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWiA9IDB4ODUxYTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUgPSAweDg1MWM7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTAgPSAweDg0YzA7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTEgPSAweDg0YzE7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTIgPSAweDg0YzI7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTMgPSAweDg0YzM7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTQgPSAweDg0YzQ7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTUgPSAweDg0YzU7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTYgPSAweDg0YzY7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTcgPSAweDg0Yzc7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTggPSAweDg0Yzg7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTkgPSAweDg0Yzk7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTEwID0gMHg4NGNhO1xuXG4vKipcbiAqIEEgdGV4dHVyZSB1bml0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkUxMSA9IDB4ODRjYjtcblxuLyoqXG4gKiBBIHRleHR1cmUgdW5pdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFMTIgPSAweDg0Y2M7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTEzID0gMHg4NGNkO1xuXG4vKipcbiAqIEEgdGV4dHVyZSB1bml0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkUxNCA9IDB4ODRjZTtcblxuLyoqXG4gKiBBIHRleHR1cmUgdW5pdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFMTUgPSAweDg0Y2Y7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTE2ID0gMHg4NGQwO1xuXG4vKipcbiAqIEEgdGV4dHVyZSB1bml0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkUxNyA9IDB4ODRkMTtcblxuLyoqXG4gKiBBIHRleHR1cmUgdW5pdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFMTggPSAweDg0ZDI7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTE5ID0gMHg4NGQzO1xuXG4vKipcbiAqIEEgdGV4dHVyZSB1bml0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkUyMCA9IDB4ODRkNDtcblxuLyoqXG4gKiBBIHRleHR1cmUgdW5pdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFMjEgPSAweDg0ZDU7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTIyID0gMHg4NGQ2O1xuXG4vKipcbiAqIEEgdGV4dHVyZSB1bml0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkUyMyA9IDB4ODRkNztcblxuLyoqXG4gKiBBIHRleHR1cmUgdW5pdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFMjQgPSAweDg0ZDg7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTI1ID0gMHg4NGQ5O1xuXG4vKipcbiAqIEEgdGV4dHVyZSB1bml0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkUyNiA9IDB4ODRkYTtcblxuLyoqXG4gKiBBIHRleHR1cmUgdW5pdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFMjcgPSAweDg0ZGI7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTI4ID0gMHg4NGRjO1xuXG4vKipcbiAqIEEgdGV4dHVyZSB1bml0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkUyOSA9IDB4ODRkZDtcblxuLyoqXG4gKiBBIHRleHR1cmUgdW5pdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFMzAgPSAweDg0ZGU7XG5cbi8qKlxuICogQSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRTMxID0gMHg4NGRmO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50IGFjdGl2ZSB0ZXh0dXJlIHVuaXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQUNUSVZFX1RFWFRVUkUgPSAweDg0ZTA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRVBFQVQgPSAweDI5MDE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDTEFNUF9UT19FREdFID0gMHg4MTJmO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUlSUk9SRURfUkVQRUFUID0gMHg4MzcwO1xuXG4vLyBVbmlmb3JtIHR5cGVzXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVF9WRUMyID0gMHg4YjUwO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRkxPQVRfVkVDMyA9IDB4OGI1MTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZMT0FUX1ZFQzQgPSAweDhiNTI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBJTlRfVkVDMiA9IDB4OGI1MztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IElOVF9WRUMzID0gMHg4YjU0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgSU5UX1ZFQzQgPSAweDhiNTU7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCT09MID0gMHg4YjU2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQk9PTF9WRUMyID0gMHg4YjU3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQk9PTF9WRUMzID0gMHg4YjU4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQk9PTF9WRUM0ID0gMHg4YjU5O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRkxPQVRfTUFUMiA9IDB4OGI1YTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZMT0FUX01BVDMgPSAweDhiNWI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVF9NQVQ0ID0gMHg4YjVjO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU0FNUExFUl8yRCA9IDB4OGI1ZTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNBTVBMRVJfQ1VCRSA9IDB4OGI2MDtcblxuLy8gU2hhZGVyIHByZWNpc2lvbi1zcGVjaWZpZWQgdHlwZXNcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IExPV19GTE9BVCA9IDB4OGRmMDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1FRElVTV9GTE9BVCA9IDB4OGRmMTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEhJR0hfRkxPQVQgPSAweDhkZjI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBMT1dfSU5UID0gMHg4ZGYzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUVESVVNX0lOVCA9IDB4OGRmNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEhJR0hfSU5UID0gMHg4ZGY1O1xuXG4vLyBGcmFtZWJ1ZmZlcnMgYW5kIHJlbmRlcmJ1ZmZlcnNcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQU1FQlVGRkVSID0gMHg4ZDQwO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkVOREVSQlVGRkVSID0gMHg4ZDQxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCQTQgPSAweDgwNTY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSR0I1X0ExID0gMHg4MDU3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCNTY1ID0gMHg4ZDYyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgREVQVEhfQ09NUE9ORU5UMTYgPSAweDgxYTU7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVEVOQ0lMX0lOREVYID0gMHgxOTAxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RFTkNJTF9JTkRFWDggPSAweDhkNDg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERVBUSF9TVEVOQ0lMID0gMHg4NGY5O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkVOREVSQlVGRkVSX1dJRFRIID0gMHg4ZDQyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkVOREVSQlVGRkVSX0hFSUdIVCA9IDB4OGQ0MztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJFTkRFUkJVRkZFUl9JTlRFUk5BTF9GT1JNQVQgPSAweDhkNDQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRU5ERVJCVUZGRVJfUkVEX1NJWkUgPSAweDhkNTA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRU5ERVJCVUZGRVJfR1JFRU5fU0laRSA9IDB4OGQ1MTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJFTkRFUkJVRkZFUl9CTFVFX1NJWkUgPSAweDhkNTI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRU5ERVJCVUZGRVJfQUxQSEFfU0laRSA9IDB4OGQ1MztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJFTkRFUkJVRkZFUl9ERVBUSF9TSVpFID0gMHg4ZDU0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkVOREVSQlVGRkVSX1NURU5DSUxfU0laRSA9IDB4OGQ1NTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfT0JKRUNUX1RZUEUgPSAweDhjZDA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9OQU1FID0gMHg4Y2QxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9URVhUVVJFX0xFVkVMID0gMHg4Y2QyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9URVhUVVJFX0NVQkVfTUFQX0ZBQ0UgPSAweDhjZDM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT0xPUl9BVFRBQ0hNRU5UMCA9IDB4OGNlMDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERFUFRIX0FUVEFDSE1FTlQgPSAweDhkMDA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVEVOQ0lMX0FUVEFDSE1FTlQgPSAweDhkMjA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgPSAweDgyMWE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBOT05FID0gMDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQU1FQlVGRkVSX0NPTVBMRVRFID0gMHg4Y2Q1O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlJBTUVCVUZGRVJfSU5DT01QTEVURV9BVFRBQ0hNRU5UID0gMHg4Y2Q2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlQgPSAweDhjZDc7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlMgPSAweDhjZDk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUkFNRUJVRkZFUl9VTlNVUFBPUlRFRCA9IDB4OGNkZDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQU1FQlVGRkVSX0JJTkRJTkcgPSAweDhjYTY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRU5ERVJCVUZGRVJfQklORElORyA9IDB4OGNhNztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9SRU5ERVJCVUZGRVJfU0laRSA9IDB4ODRlODtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IElOVkFMSURfRlJBTUVCVUZGRVJfT1BFUkFUSU9OID0gMHgwNTA2O1xuXG4vLyBQaXhlbCBzdG9yYWdlIG1vZGVzXG4vLyBDb25zdGFudHMgcGFzc2VkIHRvIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5waXhlbFN0b3JlaSgpXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTlBBQ0tfRkxJUF9ZX1dFQkdMID0gMHg5MjQwO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMID0gMHg5MjQxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCA9IDB4OTI0MztcblxuLy8gQWRkaXRpb25hbCBjb25zdGFudHMgZGVmaW5lZCBXZWJHTCAyXG4vLyBUaGVzZSBjb25zdGFudHMgYXJlIGRlZmluZWQgb24gdGhlIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgaW50ZXJmYWNlLiBBbGwgV2ViR0wgMSBjb25zdGFudHMgYXJlIGFsc28gYXZhaWxhYmxlIGluIGEgV2ViR0wgMiBjb250ZXh0XG5cbi8vIEdldHRpbmcgR0wgcGFyYW1ldGVyIGluZm9ybWF0aW9uXG4vLyBDb25zdGFudHMgcGFzc2VkIHRvIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5nZXRQYXJhbWV0ZXIoKSB0byBzcGVjaWZ5IHdoYXQgaW5mb3JtYXRpb24gdG8gcmV0dXJuXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRUFEX0JVRkZFUiA9IDB4MGMwMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOUEFDS19ST1dfTEVOR1RIID0gMHgwY2YyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5QQUNLX1NLSVBfUk9XUyA9IDB4MGNmMztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOUEFDS19TS0lQX1BJWEVMUyA9IDB4MGNmNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFBBQ0tfUk9XX0xFTkdUSCA9IDB4MGQwMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFBBQ0tfU0tJUF9ST1dTID0gMHgwZDAzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUEFDS19TS0lQX1BJWEVMUyA9IDB4MGQwNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfQklORElOR18zRCA9IDB4ODA2YTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOUEFDS19TS0lQX0lNQUdFUyA9IDB4ODA2ZDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOUEFDS19JTUFHRV9IRUlHSFQgPSAweDgwNmU7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfM0RfVEVYVFVSRV9TSVpFID0gMHg4MDczO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUFYX0VMRU1FTlRTX1ZFUlRJQ0VTID0gMHg4MGU4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUFYX0VMRU1FTlRTX0lORElDRVMgPSAweDgwZTk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVEVYVFVSRV9MT0RfQklBUyA9IDB4ODRmZDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9GUkFHTUVOVF9VTklGT1JNX0NPTVBPTkVOVFMgPSAweDhiNDk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVkVSVEVYX1VOSUZPUk1fQ09NUE9ORU5UUyA9IDB4OGI0YTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9BUlJBWV9URVhUVVJFX0xBWUVSUyA9IDB4ODhmZjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1JTl9QUk9HUkFNX1RFWEVMX09GRlNFVCA9IDB4ODkwNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9QUk9HUkFNX1RFWEVMX09GRlNFVCA9IDB4ODkwNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9WQVJZSU5HX0NPTVBPTkVOVFMgPSAweDhiNGI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUkFHTUVOVF9TSEFERVJfREVSSVZBVElWRV9ISU5UID0gMHg4YjhiO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkFTVEVSSVpFUl9ESVNDQVJEID0gMHg4Yzg5O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVkVSVEVYX0FSUkFZX0JJTkRJTkcgPSAweDg1YjU7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVkVSVEVYX09VVFBVVF9DT01QT05FTlRTID0gMHg5MTIyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUFYX0ZSQUdNRU5UX0lOUFVUX0NPTVBPTkVOVFMgPSAweDkxMjU7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfU0VSVkVSX1dBSVRfVElNRU9VVCA9IDB4OTExMTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9FTEVNRU5UX0lOREVYID0gMHg4ZDZiO1xuXG4vLyBUZXh0dXJlc1xuLy8gQ29uc3RhbnRzIHBhc3NlZCB0byBXZWJHTFJlbmRlcmluZ0NvbnRleHQudGV4UGFyYW1ldGVyaSgpLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQudGV4UGFyYW1ldGVyZigpLCBXZWJHTFJlbmRlcmluZ0NvbnRleHQuYmluZFRleHR1cmUoKSwgV2ViR0xSZW5kZXJpbmdDb250ZXh0LnRleEltYWdlMkQoKSwgYW5kIG90aGVyc1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkVEID0gMHgxOTAzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCOCA9IDB4ODA1MTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQkE4ID0gMHg4MDU4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCMTBfQTIgPSAweDgwNTk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFXzNEID0gMHg4MDZmO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRV9XUkFQX1IgPSAweDgwNzI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFX01JTl9MT0QgPSAweDgxM2E7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFX01BWF9MT0QgPSAweDgxM2I7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFX0JBU0VfTEVWRUwgPSAweDgxM2M7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFX01BWF9MRVZFTCA9IDB4ODEzZDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfQ09NUEFSRV9NT0RFID0gMHg4ODRjO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRV9DT01QQVJFX0ZVTkMgPSAweDg4NGQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTUkdCID0gMHg4YzQwO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1JHQjggPSAweDhjNDE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTUkdCOF9BTFBIQTggPSAweDhjNDM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QQVJFX1JFRl9UT19URVhUVVJFID0gMHg4ODRlO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCQTMyRiA9IDB4ODgxNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQjMyRiA9IDB4ODgxNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQkExNkYgPSAweDg4MWE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSR0IxNkYgPSAweDg4MWI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFXzJEX0FSUkFZID0gMHg4YzFhO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVEVYVFVSRV9CSU5ESU5HXzJEX0FSUkFZID0gMHg4YzFkO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUjExRl9HMTFGX0IxMEYgPSAweDhjM2E7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSR0I5X0U1ID0gMHg4YzNkO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCQTMyVUkgPSAweDhkNzA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSR0IzMlVJID0gMHg4ZDcxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCQTE2VUkgPSAweDhkNzY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSR0IxNlVJID0gMHg4ZDc3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCQThVSSA9IDB4OGQ3YztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQjhVSSA9IDB4OGQ3ZDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQkEzMkkgPSAweDhkODI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSR0IzMkkgPSAweDhkODM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSR0JBMTZJID0gMHg4ZDg4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCMTZJID0gMHg4ZDg5O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCQThJID0gMHg4ZDhlO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCOEkgPSAweDhkOGY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRURfSU5URUdFUiA9IDB4OGQ5NDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQl9JTlRFR0VSID0gMHg4ZDk4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCQV9JTlRFR0VSID0gMHg4ZDk5O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUjggPSAweDgyMjk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRzggPSAweDgyMmI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSMTZGID0gMHg4MjJkO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUjMyRiA9IDB4ODIyZTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHMTZGID0gMHg4MjJmO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkczMkYgPSAweDgyMzA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSOEkgPSAweDgyMzE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSOFVJID0gMHg4MjMyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUjE2SSA9IDB4ODIzMztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFIxNlVJID0gMHg4MjM0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUjMySSA9IDB4ODIzNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFIzMlVJID0gMHg4MjM2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkc4SSA9IDB4ODIzNztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHOFVJID0gMHg4MjM4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkcxNkkgPSAweDgyMzk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRzE2VUkgPSAweDgyM2E7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRzMySSA9IDB4ODIzYjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHMzJVSSA9IDB4ODIzYztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFI4X1NOT1JNID0gMHg4Zjk0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkc4X1NOT1JNID0gMHg4Zjk1O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCOF9TTk9STSA9IDB4OGY5NjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQkE4X1NOT1JNID0gMHg4Zjk3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCMTBfQTJVSSA9IDB4OTA2ZjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfSU1NVVRBQkxFX0ZPUk1BVCA9IDB4OTEyZjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRFWFRVUkVfSU1NVVRBQkxFX0xFVkVMUyA9IDB4ODJkZjtcblxuLy8gUGl4ZWwgdHlwZXNcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFViA9IDB4ODM2ODtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0lOVF8xMEZfMTFGXzExRl9SRVYgPSAweDhjM2I7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTlNJR05FRF9JTlRfNV85XzlfOV9SRVYgPSAweDhjM2U7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVF8zMl9VTlNJR05FRF9JTlRfMjRfOF9SRVYgPSAweDhkYWQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTlNJR05FRF9JTlRfMjRfOCA9IDB4ODRmYTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEhBTEZfRkxPQVQgPSAweDE0MGI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSRyA9IDB4ODIyNztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHX0lOVEVHRVIgPSAweDgyMjg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBJTlRfMl8xMF8xMF8xMF9SRVYgPSAweDhkOWY7XG5cbi8vIFF1ZXJpZXNcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENVUlJFTlRfUVVFUlkgPSAweDg4NjU7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBRVUVSWV9SRVNVTFQgPSAweDg4NjY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBRVUVSWV9SRVNVTFRfQVZBSUxBQkxFID0gMHg4ODY3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQU5ZX1NBTVBMRVNfUEFTU0VEID0gMHg4YzJmO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQU5ZX1NBTVBMRVNfUEFTU0VEX0NPTlNFUlZBVElWRSA9IDB4OGQ2YTtcblxuLy8gRHJhdyBidWZmZXJzXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfRFJBV19CVUZGRVJTID0gMHg4ODI0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVIwID0gMHg4ODI1O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVIxID0gMHg4ODI2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVIyID0gMHg4ODI3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVIzID0gMHg4ODI4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVI0ID0gMHg4ODI5O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVI1ID0gMHg4ODJhO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVI2ID0gMHg4ODJiO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVI3ID0gMHg4ODJjO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVI4ID0gMHg4ODJkO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVI5ID0gMHg4ODJlO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVIxMCA9IDB4ODgyZjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERSQVdfQlVGRkVSMTEgPSAweDg4MzA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEUkFXX0JVRkZFUjEyID0gMHg4ODMxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVIxMyA9IDB4ODgzMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERSQVdfQlVGRkVSMTQgPSAweDg4MzM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEUkFXX0JVRkZFUjE1ID0gMHg4ODM0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUFYX0NPTE9SX0FUVEFDSE1FTlRTID0gMHg4Y2RmO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDEgPSAweDhjZTE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT0xPUl9BVFRBQ0hNRU5UMiA9IDB4OGNlMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTE9SX0FUVEFDSE1FTlQzID0gMHg4Y2UzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDQgPSAweDhjZTQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT0xPUl9BVFRBQ0hNRU5UNSA9IDB4OGNlNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTE9SX0FUVEFDSE1FTlQ2ID0gMHg4Y2U2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDcgPSAweDhjZTc7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT0xPUl9BVFRBQ0hNRU5UOCA9IDB4OGNlODtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTE9SX0FUVEFDSE1FTlQ5ID0gMHg4Y2U5O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDEwID0gMHg4Y2VhO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDExID0gMHg4Y2ViO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDEyID0gMHg4Y2VjO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDEzID0gMHg4Y2VkO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDE0ID0gMHg4Y2VlO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDE1ID0gMHg4Y2VmO1xuXG4vLyBTYW1wbGVyc1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU0FNUExFUl8zRCA9IDB4OGI1ZjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNBTVBMRVJfMkRfU0hBRE9XID0gMHg4YjYyO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU0FNUExFUl8yRF9BUlJBWSA9IDB4OGRjMTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNBTVBMRVJfMkRfQVJSQVlfU0hBRE9XID0gMHg4ZGM0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU0FNUExFUl9DVUJFX1NIQURPVyA9IDB4OGRjNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IElOVF9TQU1QTEVSXzJEID0gMHg4ZGNhO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgSU5UX1NBTVBMRVJfM0QgPSAweDhkY2I7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBJTlRfU0FNUExFUl9DVUJFID0gMHg4ZGNjO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgSU5UX1NBTVBMRVJfMkRfQVJSQVkgPSAweDhkY2Y7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTlNJR05FRF9JTlRfU0FNUExFUl8yRCA9IDB4OGRkMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0lOVF9TQU1QTEVSXzNEID0gMHg4ZGQzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRSA9IDB4OGRkNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZID0gMHg4ZGQ3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUFYX1NBTVBMRVMgPSAweDhkNTc7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTQU1QTEVSX0JJTkRJTkcgPSAweDg5MTk7XG5cbi8vIEJ1ZmZlcnNcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFBJWEVMX1BBQ0tfQlVGRkVSID0gMHg4OGViO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUElYRUxfVU5QQUNLX0JVRkZFUiA9IDB4ODhlYztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFBJWEVMX1BBQ0tfQlVGRkVSX0JJTkRJTkcgPSAweDg4ZWQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBQSVhFTF9VTlBBQ0tfQlVGRkVSX0JJTkRJTkcgPSAweDg4ZWY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT1BZX1JFQURfQlVGRkVSID0gMHg4ZjM2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09QWV9XUklURV9CVUZGRVIgPSAweDhmMzc7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT1BZX1JFQURfQlVGRkVSX0JJTkRJTkcgPSAweDhmMzY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT1BZX1dSSVRFX0JVRkZFUl9CSU5ESU5HID0gMHg4ZjM3O1xuXG4vLyBEYXRhIHR5cGVzXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVF9NQVQyWDMgPSAweDhiNjU7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVF9NQVQyWDQgPSAweDhiNjY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVF9NQVQzWDIgPSAweDhiNjc7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVF9NQVQzWDQgPSAweDhiNjg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVF9NQVQ0WDIgPSAweDhiNjk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGTE9BVF9NQVQ0WDMgPSAweDhiNmE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTlNJR05FRF9JTlRfVkVDMiA9IDB4OGRjNjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOU0lHTkVEX0lOVF9WRUMzID0gMHg4ZGM3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5TSUdORURfSU5UX1ZFQzQgPSAweDhkYzg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTlNJR05FRF9OT1JNQUxJWkVEID0gMHg4YzE3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU0lHTkVEX05PUk1BTElaRUQgPSAweDhmOWM7XG5cbi8vIFZlcnRleCBhdHRyaWJ1dGVzXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBWRVJURVhfQVRUUklCX0FSUkFZX0lOVEVHRVIgPSAweDg4ZmQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBWRVJURVhfQVRUUklCX0FSUkFZX0RJVklTT1IgPSAweDg4ZmU7XG5cbi8vIFRyYW5zZm9ybSBmZWVkYmFja1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUl9NT0RFID0gMHg4YzdmO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUFYX1RSQU5TRk9STV9GRUVEQkFDS19TRVBBUkFURV9DT01QT05FTlRTID0gMHg4YzgwO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVFJBTlNGT1JNX0ZFRURCQUNLX1ZBUllJTkdTID0gMHg4YzgzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUl9TVEFSVCA9IDB4OGM4NDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVJfU0laRSA9IDB4OGM4NTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TRk9STV9GRUVEQkFDS19QUklNSVRJVkVTX1dSSVRURU4gPSAweDhjODg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVFJBTlNGT1JNX0ZFRURCQUNLX0lOVEVSTEVBVkVEX0NPTVBPTkVOVFMgPSAweDhjOGE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfVFJBTlNGT1JNX0ZFRURCQUNLX1NFUEFSQVRFX0FUVFJJQlMgPSAweDhjOGI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBJTlRFUkxFQVZFRF9BVFRSSUJTID0gMHg4YzhjO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU0VQQVJBVEVfQVRUUklCUyA9IDB4OGM4ZDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVIgPSAweDhjOGU7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX0JJTkRJTkcgPSAweDhjOGY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBUUkFOU0ZPUk1fRkVFREJBQ0sgPSAweDhlMjI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBUUkFOU0ZPUk1fRkVFREJBQ0tfUEFVU0VEID0gMHg4ZTIzO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVFJBTlNGT1JNX0ZFRURCQUNLX0FDVElWRSA9IDB4OGUyNDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TRk9STV9GRUVEQkFDS19CSU5ESU5HID0gMHg4ZTI1O1xuXG4vLyBGcmFtZWJ1ZmZlcnMgYW5kIHJlbmRlcmJ1ZmZlcnNcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQ09MT1JfRU5DT0RJTkcgPSAweDgyMTA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0NPTVBPTkVOVF9UWVBFID0gMHg4MjExO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9SRURfU0laRSA9IDB4ODIxMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfR1JFRU5fU0laRSA9IDB4ODIxMztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQkxVRV9TSVpFID0gMHg4MjE0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9BTFBIQV9TSVpFID0gMHg4MjE1O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9ERVBUSF9TSVpFID0gMHg4MjE2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9TVEVOQ0lMX1NJWkUgPSAweDgyMTc7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUkFNRUJVRkZFUl9ERUZBVUxUID0gMHg4MjE4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgREVQVEgyNF9TVEVOQ0lMOCA9IDB4ODhmMDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERSQVdfRlJBTUVCVUZGRVJfQklORElORyA9IDB4OGNhNjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJFQURfRlJBTUVCVUZGRVIgPSAweDhjYTg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEUkFXX0ZSQU1FQlVGRkVSID0gMHg4Y2E5O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkVBRF9GUkFNRUJVRkZFUl9CSU5ESU5HID0gMHg4Y2FhO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkVOREVSQlVGRkVSX1NBTVBMRVMgPSAweDhjYWI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1RFWFRVUkVfTEFZRVIgPSAweDhjZDQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01VTFRJU0FNUExFID0gMHg4ZDU2O1xuXG4vLyBVbmlmb3Jtc1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5JRk9STV9CVUZGRVIgPSAweDhhMTE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTklGT1JNX0JVRkZFUl9CSU5ESU5HID0gMHg4YTI4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5JRk9STV9CVUZGRVJfU1RBUlQgPSAweDhhMjk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTklGT1JNX0JVRkZFUl9TSVpFID0gMHg4YTJhO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgTUFYX1ZFUlRFWF9VTklGT1JNX0JMT0NLUyA9IDB4OGEyYjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9GUkFHTUVOVF9VTklGT1JNX0JMT0NLUyA9IDB4OGEyZDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9DT01CSU5FRF9VTklGT1JNX0JMT0NLUyA9IDB4OGEyZTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9VTklGT1JNX0JVRkZFUl9CSU5ESU5HUyA9IDB4OGEyZjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9VTklGT1JNX0JMT0NLX1NJWkUgPSAweDhhMzA7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfQ09NQklORURfVkVSVEVYX1VOSUZPUk1fQ09NUE9ORU5UUyA9IDB4OGEzMTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9DT01CSU5FRF9GUkFHTUVOVF9VTklGT1JNX0NPTVBPTkVOVFMgPSAweDhhMzM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTklGT1JNX0JVRkZFUl9PRkZTRVRfQUxJR05NRU5UID0gMHg4YTM0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQUNUSVZFX1VOSUZPUk1fQkxPQ0tTID0gMHg4YTM2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5JRk9STV9UWVBFID0gMHg4YTM3O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5JRk9STV9TSVpFID0gMHg4YTM4O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5JRk9STV9CTE9DS19JTkRFWCA9IDB4OGEzYTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOSUZPUk1fT0ZGU0VUID0gMHg4YTNiO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5JRk9STV9BUlJBWV9TVFJJREUgPSAweDhhM2M7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTklGT1JNX01BVFJJWF9TVFJJREUgPSAweDhhM2Q7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTklGT1JNX0lTX1JPV19NQUpPUiA9IDB4OGEzZTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOSUZPUk1fQkxPQ0tfQklORElORyA9IDB4OGEzZjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOSUZPUk1fQkxPQ0tfREFUQV9TSVpFID0gMHg4YTQwO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5JRk9STV9CTE9DS19BQ1RJVkVfVU5JRk9STVMgPSAweDhhNDI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTklGT1JNX0JMT0NLX0FDVElWRV9VTklGT1JNX0lORElDRVMgPSAweDhhNDM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTklGT1JNX0JMT0NLX1JFRkVSRU5DRURfQllfVkVSVEVYX1NIQURFUiA9IDB4OGE0NDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOSUZPUk1fQkxPQ0tfUkVGRVJFTkNFRF9CWV9GUkFHTUVOVF9TSEFERVIgPSAweDhhNDY7XG5cbi8vIFN5bmMgb2JqZWN0c1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgT0JKRUNUX1RZUEUgPSAweDkxMTI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTWU5DX0NPTkRJVElPTiA9IDB4OTExMztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNZTkNfU1RBVFVTID0gMHg5MTE0O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1lOQ19GTEFHUyA9IDB4OTExNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNZTkNfRkVOQ0UgPSAweDkxMTY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTWU5DX0dQVV9DT01NQU5EU19DT01QTEVURSA9IDB4OTExNztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOU0lHTkFMRUQgPSAweDkxMTg7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTSUdOQUxFRCA9IDB4OTExOTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEFMUkVBRFlfU0lHTkFMRUQgPSAweDkxMWE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBUSU1FT1VUX0VYUElSRUQgPSAweDkxMWI7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT05ESVRJT05fU0FUSVNGSUVEID0gMHg5MTFjO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgV0FJVF9GQUlMRUQgPSAweDkxMWQ7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTWU5DX0ZMVVNIX0NPTU1BTkRTX0JJVCA9IDB4MDAwMDAwMDE7XG5cbi8vIE1pc2NlbGxhbmVvdXMgY29uc3RhbnRzXG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT0xPUiA9IDB4MTgwMDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERFUFRIID0gMHgxODAxO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RFTkNJTCA9IDB4MTgwMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1JTiA9IDB4ODAwNztcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWCA9IDB4ODAwODtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERFUFRIX0NPTVBPTkVOVDI0ID0gMHg4MWE2O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RSRUFNX1JFQUQgPSAweDg4ZTE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTVFJFQU1fQ09QWSA9IDB4ODhlMjtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNUQVRJQ19SRUFEID0gMHg4OGU1O1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1RBVElDX0NPUFkgPSAweDg4ZTY7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEWU5BTUlDX1JFQUQgPSAweDg4ZTk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEWU5BTUlDX0NPUFkgPSAweDg4ZWE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERVBUSF9DT01QT05FTlQzMkYgPSAweDhjYWM7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBERVBUSDMyRl9TVEVOQ0lMOCA9IDB4OGNhZDtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IElOVkFMSURfSU5ERVggPSAweGZmZmZmZmZmO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVElNRU9VVF9JR05PUkVEID0gLTE7XG5cbi8qKlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfQ0xJRU5UX1dBSVRfVElNRU9VVF9XRUJHTCA9IDB4OTI0NztcblxuLy8gQ29uc3RhbnRzIGRlZmluZWQgaW4gV2ViR0wgZXh0ZW5zaW9uc1xuXG4vLyBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXG4vLyBUaGUgQU5HTEVfaW5zdGFuY2VkX2FycmF5cyBleHRlbnNpb24gaXMgcGFydCBvZiB0aGUgV2ViR0wgQVBJIGFuZCBhbGxvd3MgdG8gZHJhdyB0aGUgc2FtZSBvYmplY3QsIG9yIGdyb3VwcyBvZiBzaW1pbGFyIG9iamVjdHMgbXVsdGlwbGUgdGltZXMsIGlmIHRoZXkgc2hhcmUgdGhlIHNhbWUgdmVydGV4IGRhdGEsIHByaW1pdGl2ZSBjb3VudCBhbmQgdHlwZVxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGZyZXF1ZW5jeSBkaXZpc29yIHVzZWQgZm9yIGluc3RhbmNlZCByZW5kZXJpbmdcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVkVSVEVYX0FUVFJJQl9BUlJBWV9ESVZJU09SX0FOR0xFID0gMHg4OGZlO1xuXG4vLyBXRUJHTF9kZWJ1Z19yZW5kZXJlcl9pbmZvXG4vLyBUaGUgV0VCR0xfZGVidWdfcmVuZGVyZXJfaW5mbyBleHRlbnNpb24gaXMgcGFydCBvZiB0aGUgV2ViR0wgQVBJIGFuZCBleHBvc2VzIHR3byBjb25zdGFudHMgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZ3JhcGhpY3MgZHJpdmVyIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXNcbi8qKlxuICogUGFzc2VkIHRvIGdldFBhcmFtZXRlciB0byBnZXQgdGhlIHZlbmRvciBzdHJpbmcgb2YgdGhlIGdyYXBoaWNzIGRyaXZlclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBVTk1BU0tFRF9WRU5ET1JfV0VCR0wgPSAweDkyNDU7XG5cbi8qKlxuICogUGFzc2VkIHRvIGdldFBhcmFtZXRlciB0byBnZXQgdGhlIHJlbmRlcmVyIHN0cmluZyBvZiB0aGUgZ3JhcGhpY3MgZHJpdmVyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFVOTUFTS0VEX1JFTkRFUkVSX1dFQkdMID0gMHg5MjQ2O1xuXG4vLyBFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcbi8vIFRoZSBFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMgZXh0ZW5zaW9uIGlzIHBhcnQgb2YgdGhlIFdlYkdMIEFQSSBhbmQgZXhwb3NlcyB0d28gY29uc3RhbnRzIGZvciBhbmlzb3Ryb3BpYyBmaWx0ZXJpbmcgKEFGKVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIGF2YWlsYWJsZSBhbmlzb3Ryb3B5XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCA9IDB4ODRmZjtcblxuLyoqXG4gKiBQYXNzZWQgdG8gdGV4UGFyYW1ldGVyIHRvIHNldCB0aGUgZGVzaXJlZCBtYXhpbXVtIGFuaXNvdHJvcHkgZm9yIGEgdGV4dHVyZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCA9IDB4ODRmZTtcblxuLy8gV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcbi8vIFRoZSBXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YyBleHRlbnNpb24gaXMgcGFydCBvZiB0aGUgV2ViR0wgQVBJIGFuZCBleHBvc2VzIGZvdXIgUzNUQyBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0c1xuLyoqXG4gKiBBIERYVDEtY29tcHJlc3NlZCBpbWFnZSBpbiBhbiBSR0IgaW1hZ2UgZm9ybWF0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQgPSAweDgzZjA7XG5cbi8qKlxuICogQSBEWFQxLWNvbXByZXNzZWQgaW1hZ2UgaW4gYW4gUkdCIGltYWdlIGZvcm1hdCB3aXRoIGEgc2ltcGxlIG9uL29mZiBhbHBoYSB2YWx1ZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCA9IDB4ODNmMTtcblxuLyoqXG4gKiBBIERYVDMtY29tcHJlc3NlZCBpbWFnZSBpbiBhbiBSR0JBIGltYWdlIGZvcm1hdC4gQ29tcGFyZWQgdG8gYSAzMi1iaXQgUkdCQSB0ZXh0dXJlLCBpdCBvZmZlcnMgNDoxIGNvbXByZXNzaW9uXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUID0gMHg4M2YyO1xuXG4vKipcbiAqIEEgRFhUNS1jb21wcmVzc2VkIGltYWdlIGluIGFuIFJHQkEgaW1hZ2UgZm9ybWF0LiBJdCBhbHNvIHByb3ZpZGVzIGEgNDoxIGNvbXByZXNzaW9uLCBidXQgZGlmZmVycyB0byB0aGUgRFhUMyBjb21wcmVzc2lvbiBpbiBob3cgdGhlIGFscGhhIGNvbXByZXNzaW9uIGlzIGRvbmVcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQgPSAweDgzZjM7XG5cbi8vIFdFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjX3NyZ2Jcbi8vIFRoZSBXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y19zcmdiIGV4dGVuc2lvbiBpcyBwYXJ0IG9mIHRoZSBXZWJHTCBBUEkgYW5kIGV4cG9zZXMgZm91ciBTM1RDIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXRzIGZvciB0aGUgc1JHQiBjb2xvcnNwYWNlXG4vKipcbiAqIEEgRFhUMS1jb21wcmVzc2VkIGltYWdlIGluIGFuIHNSR0IgaW1hZ2UgZm9ybWF0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQl9TM1RDX0RYVDFfRVhUID0gMHg4YzRjO1xuXG4vKipcbiAqIEEgRFhUMS1jb21wcmVzc2VkIGltYWdlIGluIGFuIHNSR0IgaW1hZ2UgZm9ybWF0IHdpdGggYSBzaW1wbGUgb24vb2ZmIGFscGhhIHZhbHVlXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDFfRVhUID0gMHg4YzRkO1xuXG4vKipcbiAqIEEgRFhUMy1jb21wcmVzc2VkIGltYWdlIGluIGFuIHNSR0JBIGltYWdlIGZvcm1hdFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQzX0VYVCA9IDB4OGM0ZTtcblxuLyoqXG4gKiBBIERYVDUtY29tcHJlc3NlZCBpbWFnZSBpbiBhbiBzUkdCQSBpbWFnZSBmb3JtYXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUNV9FWFQgPSAweDhjNGY7XG5cbi8vIFdFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGNcbi8vIFRoZSBXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjIGV4dGVuc2lvbiBpcyBwYXJ0IG9mIHRoZSBXZWJHTCBBUEkgYW5kIGV4cG9zZXMgMTAgRVRDL0VBQyBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0c1xuLyoqXG4gKiBPbmUtY2hhbm5lbCAocmVkKSB1bnNpZ25lZCBmb3JtYXQgY29tcHJlc3Npb25cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SMTFfRUFDID0gMHg5MjcwO1xuXG4vKipcbiAqIE9uZS1jaGFubmVsIChyZWQpIHNpZ25lZCBmb3JtYXQgY29tcHJlc3Npb25cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9TSUdORURfUjExX0VBQyA9IDB4OTI3MTtcblxuLyoqXG4gKiBUd28tY2hhbm5lbCAocmVkIGFuZCBncmVlbikgdW5zaWduZWQgZm9ybWF0IGNvbXByZXNzaW9uXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfUkcxMV9FQUMgPSAweDkyNzI7XG5cbi8qKlxuICogVHdvLWNoYW5uZWwgKHJlZCBhbmQgZ3JlZW4pIHNpZ25lZCBmb3JtYXQgY29tcHJlc3Npb25cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9TSUdORURfUkcxMV9FQUMgPSAweDkyNzM7XG5cbi8qKlxuICogQ29tcHJlc3NlcyBSQkc4IGRhdGEgd2l0aCBubyBhbHBoYSBjaGFubmVsXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfUkdCOF9FVEMyID0gMHg5Mjc0O1xuXG4vKipcbiAqIENvbXByZXNzZXMgUkdCQTggZGF0YS4gVGhlIFJHQiBwYXJ0IGlzIGVuY29kZWQgdGhlIHNhbWUgYXMgUkdCX0VUQzIsIGJ1dCB0aGUgYWxwaGEgcGFydCBpcyBlbmNvZGVkIHNlcGFyYXRlbHlcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBOF9FVEMyX0VBQyA9IDB4OTI3NTtcblxuLyoqXG4gKiBDb21wcmVzc2VzIHNSQkc4IGRhdGEgd2l0aCBubyBhbHBoYSBjaGFubmVsXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfRVRDMiA9IDB4OTI3NjtcblxuLyoqXG4gKiBDb21wcmVzc2VzIHNSR0JBOCBkYXRhLiBUaGUgc1JHQiBwYXJ0IGlzIGVuY29kZWQgdGhlIHNhbWUgYXMgU1JHQl9FVEMyLCBidXQgdGhlIGFscGhhIHBhcnQgaXMgZW5jb2RlZCBzZXBhcmF0ZWx5XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDID0gMHg5Mjc3O1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gUkdCOF9FVEMsIGJ1dCB3aXRoIGFiaWxpdHkgdG8gcHVuY2ggdGhyb3VnaCB0aGUgYWxwaGEgY2hhbm5lbCwgd2hpY2ggbWVhbnMgdG8gbWFrZSBpdCBjb21wbGV0ZWx5IG9wYXF1ZSBvciB0cmFuc3BhcmVudFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyID0gMHg5Mjc4O1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gU1JHQjhfRVRDLCBidXQgd2l0aCBhYmlsaXR5IHRvIHB1bmNoIHRocm91Z2ggdGhlIGFscGhhIGNoYW5uZWwsIHdoaWNoIG1lYW5zIHRvIG1ha2UgaXQgY29tcGxldGVseSBvcGFxdWUgb3IgdHJhbnNwYXJlbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9TUkdCOF9QVU5DSFRIUk9VR0hfQUxQSEExX0VUQzIgPSAweDkyNzk7XG5cbi8vIFdFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1xuLy8gVGhlIFdFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YyBleHRlbnNpb24gaXMgcGFydCBvZiB0aGUgV2ViR0wgQVBJIGFuZCBleHBvc2VzIGZvdXIgUFZSVEMgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdHNcbi8qKlxuICogUkdCIGNvbXByZXNzaW9uIGluIDQtYml0IG1vZGUuIE9uZSBibG9jayBmb3IgZWFjaCA0w5c0IHBpeGVsc1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HID0gMHg4YzAwO1xuXG4vKipcbiAqIFJHQkEgY29tcHJlc3Npb24gaW4gNC1iaXQgbW9kZS4gT25lIGJsb2NrIGZvciBlYWNoIDTDlzQgcGl4ZWxzXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HID0gMHg4YzAyO1xuXG4vKipcbiAqIFJHQiBjb21wcmVzc2lvbiBpbiAyLWJpdCBtb2RlLiBPbmUgYmxvY2sgZm9yIGVhY2ggOMOXNCBwaXhlbHNcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRyA9IDB4OGMwMTtcblxuLyoqXG4gKiBSR0JBIGNvbXByZXNzaW9uIGluIDItYml0IG1vZGUuIE9uZSBibG9jayBmb3IgZWFjaCA4w5c0IHBpeGVsc1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRyA9IDB4OGMwMztcblxuLy8gV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzFcbi8vIFRoZSBXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMSBleHRlbnNpb24gaXMgcGFydCBvZiB0aGUgV2ViR0wgQVBJIGFuZCBleHBvc2VzIHRoZSBFVEMxIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXRcbi8qKlxuICogQ29tcHJlc3NlcyAyNC1iaXQgUkdCIGRhdGEgd2l0aCBubyBhbHBoYSBjaGFubmVsXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0wgPSAweDhkNjQ7XG5cbi8vIFdFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hdGNcbi8vIFRoZSBXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXRjIGV4dGVuc2lvbiBpcyBwYXJ0IG9mIHRoZSBXZWJHTCBBUEkgYW5kIGV4cG9zZXMgMyBBVEMgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdHMuIEFUQyBpcyBhIHByb3ByaWV0YXJ5IGNvbXByZXNzaW9uIGFsZ29yaXRobSBmb3IgY29tcHJlc3NpbmcgdGV4dHVyZXMgb24gaGFuZGhlbGQgZGV2aWNlc1xuLyoqXG4gKiBDb21wcmVzc2VzIFJHQiB0ZXh0dXJlcyB3aXRoIG5vIGFscGhhIGNoYW5uZWxcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JfQVRDX1dFQkdMID0gMHg4YzkyO1xuXG4vKipcbiAqIENvbXByZXNzZXMgUkdCQSB0ZXh0dXJlcyB1c2luZyBleHBsaWNpdCBhbHBoYSBlbmNvZGluZyAodXNlZnVsIHdoZW4gYWxwaGEgdHJhbnNpdGlvbnMgYXJlIHNoYXJwKVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1JHQkFfQVRDX0VYUExJQ0lUX0FMUEhBX1dFQkdMID0gMHg4YzkyO1xuXG4vKipcbiAqIENvbXByZXNzZXMgUkdCQSB0ZXh0dXJlcyB1c2luZyBpbnRlcnBvbGF0ZWQgYWxwaGEgZW5jb2RpbmcgKHVzZWZ1bCB3aGVuIGFscGhhIHRyYW5zaXRpb25zIGFyZSBncmFkaWVudClcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FUQ19JTlRFUlBPTEFURURfQUxQSEFfV0VCR0wgPSAweDg3ZWU7XG5cbi8vIFdFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjXG4vLyBUaGUgV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMgZXh0ZW5zaW9uIGlzIHBhcnQgb2YgdGhlIFdlYkdMIEFQSSBhbmQgZXhwb3NlcyBBZGFwdGl2ZSBTY2FsYWJsZSBUZXh0dXJlIENvbXByZXNzaW9uIChBU1RDKSBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0cyB0byBXZWJHTFxuLy8gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0Yy9cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm52aWRpYS5jb20vYXN0Yy10ZXh0dXJlLWNvbXByZXNzaW9uLWZvci1nYW1lLWFzc2V0c1xuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiA0eDRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfNFg0X0tIUiA9IDB4OTNiMDtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiA1eDRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfNVg0X0tIUiA9IDB4OTNiMTtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiA1eDVcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfNVg1X0tIUiA9IDB4OTNiMjtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiA2eDVcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfNlg1X0tIUiA9IDB4OTNiMztcblxuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiA2eDZcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfNlg2X0tIUiA9IDB4OTNiNDtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiA4eDVcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfOFg1X0tIUiA9IDB4OTNiNTtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiA4eDZcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfOFg2X0tIUiA9IDB4OTNiNjtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiA4eDhcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfOFg4X0tIUiA9IDB4OTNiNztcblxuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiAxMHg1XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfUkdCQV9BU1RDXzEwWDVfS0hSID0gMHg5M2I4O1xuXG4vKipcbiAqIENvbXByZXNzZXMgUkdCQSB0ZXh0dXJlcyB1c2luZyBBU1RDIGNvbXByZXNzaW9uIGluIGEgYmxvY2tzaXplIG9mIDEweDZcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfMTBYNl9LSFIgPSAweDkzYjk7XG5cbi8qKlxuICogQ29tcHJlc3NlcyBSR0JBIHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgMTB4OFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1JHQkFfQVNUQ18xMFg4X0tIUiA9IDB4OTNiYTtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFJHQkEgdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiAxMHgxMFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1JHQkFfQVNUQ18xMFgxMF9LSFIgPSAweDkzYmI7XG5cbi8qKlxuICogQ29tcHJlc3NlcyBSR0JBIHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgMTJ4MTBcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJYMTBfS0hSID0gMHg5M2JjO1xuXG4vKipcbiAqIENvbXByZXNzZXMgUkdCQSB0ZXh0dXJlcyB1c2luZyBBU1RDIGNvbXByZXNzaW9uIGluIGEgYmxvY2tzaXplIG9mIDEyeDEyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfUkdCQV9BU1RDXzEyWDEyX0tIUiA9IDB4OTNiZDtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgNHg0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNFg0X0tIUiA9IDB4OTNkMDtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgNXg0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNVg0X0tIUiA9IDB4OTNkMTtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgNXg1XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNVg1X0tIUiA9IDB4OTNkMjtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgNng1XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNlg1X0tIUiA9IDB4OTNkMztcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgNng2XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNlg2X0tIUiA9IDB4OTNkNDtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgOHg1XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOFg1X0tIUiA9IDB4OTNkNTtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgOHg2XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOFg2X0tIUiA9IDB4OTNkNjtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgOHg4XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOFg4X0tIUiA9IDB4OTNkNztcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgMTB4NVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEwWDVfS0hSID0gMHg5M2Q4O1xuXG4vKipcbiAqIENvbXByZXNzZXMgU1JHQjggdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiAxMHg2XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTBYNl9LSFIgPSAweDkzZDk7XG5cbi8qKlxuICogQ29tcHJlc3NlcyBTUkdCOCB0ZXh0dXJlcyB1c2luZyBBU1RDIGNvbXByZXNzaW9uIGluIGEgYmxvY2tzaXplIG9mIDEweDhcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMFg4X0tIUiA9IDB4OTNkYTtcblxuLyoqXG4gKiBDb21wcmVzc2VzIFNSR0I4IHRleHR1cmVzIHVzaW5nIEFTVEMgY29tcHJlc3Npb24gaW4gYSBibG9ja3NpemUgb2YgMTB4MTBcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMFgxMF9LSFIgPSAweDkzZGI7XG5cbi8qKlxuICogQ29tcHJlc3NlcyBTUkdCOCB0ZXh0dXJlcyB1c2luZyBBU1RDIGNvbXByZXNzaW9uIGluIGEgYmxvY2tzaXplIG9mIDEyeDEwXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJYMTBfS0hSID0gMHg5M2RjO1xuXG4vKipcbiAqIENvbXByZXNzZXMgU1JHQjggdGV4dHVyZXMgdXNpbmcgQVNUQyBjb21wcmVzc2lvbiBpbiBhIGJsb2Nrc2l6ZSBvZiAxMngxMlxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyWDEyX0tIUiA9IDB4OTNkZDtcblxuLy8gV0VCR0xfZGVwdGhfdGV4dHVyZVxuLy8gVGhlIFdFQkdMX2RlcHRoX3RleHR1cmUgZXh0ZW5zaW9uIGlzIHBhcnQgb2YgdGhlIFdlYkdMIEFQSSBhbmQgZGVmaW5lcyAyRCBkZXB0aCBhbmQgZGVwdGgtc3RlbmNpbCB0ZXh0dXJlc1xuLyoqXG4gKiBVbnNpZ25lZCBpbnRlZ2VyIHR5cGUgZm9yIDI0LWJpdCBkZXB0aCB0ZXh0dXJlIGRhdGFcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5TSUdORURfSU5UXzI0XzhfV0VCR0wgPSAweDg0ZmE7XG5cbi8vIE9FU190ZXh0dXJlX2hhbGZfZmxvYXRcbi8vIFRoZSBPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0IGV4dGVuc2lvbiBpcyBwYXJ0IG9mIHRoZSBXZWJHTCBBUEkgYW5kIGFkZHMgdGV4dHVyZSBmb3JtYXRzIHdpdGggMTYtIChha2EgaGFsZiBmbG9hdCkgYW5kIDMyLWJpdCBmbG9hdGluZy1wb2ludCBjb21wb25lbnRzXG4vKipcbiAqIEhhbGYgZmxvYXRpbmctcG9pbnQgdHlwZSAoMTYtYml0KVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBIQUxGX0ZMT0FUX09FUyA9IDB4OGQ2MTtcblxuLy8gV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0XG4vLyBUaGUgV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0IGV4dGVuc2lvbiBpcyBwYXJ0IG9mIHRoZSBXZWJHTCBBUEkgYW5kIGFkZHMgdGhlIGFiaWxpdHkgdG8gcmVuZGVyIHRvIDMyLWJpdCBmbG9hdGluZy1wb2ludCBjb2xvciBidWZmZXJzXG4vKipcbiAqIFJHQkEgMzItYml0IGZsb2F0aW5nLXBvaW50IGNvbG9yLXJlbmRlcmFibGUgZm9ybWF0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJHQkEzMkZfRVhUID0gMHg4ODE0O1xuXG4vKipcbiAqIFJHQiAzMi1iaXQgZmxvYXRpbmctcG9pbnQgY29sb3ItcmVuZGVyYWJsZSBmb3JtYXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUkdCMzJGX0VYVCA9IDB4ODgxNTtcblxuLyoqXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQ09NUE9ORU5UX1RZUEVfRVhUID0gMHg4MjExO1xuXG4vKipcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVU5TSUdORURfTk9STUFMSVpFRF9FWFQgPSAweDhjMTc7XG5cbi8vIEVYVF9ibGVuZF9taW5tYXhcbi8vIFRoZSBFWFRfYmxlbmRfbWlubWF4IGV4dGVuc2lvbiBpcyBwYXJ0IG9mIHRoZSBXZWJHTCBBUEkgYW5kIGV4dGVuZHMgYmxlbmRpbmcgY2FwYWJpbGl0aWVzIGJ5IGFkZGluZyB0d28gbmV3IGJsZW5kIGVxdWF0aW9uczogdGhlIG1pbmltdW0gb3IgbWF4aW11bSBjb2xvciBjb21wb25lbnRzIG9mIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGNvbG9yc1xuLyoqXG4gKiBQcm9kdWNlcyB0aGUgbWluaW11bSBjb2xvciBjb21wb25lbnRzIG9mIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGNvbG9yc1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNSU5fRVhUID0gMHg4MDA3O1xuXG4vKipcbiAqIFByb2R1Y2VzIHRoZSBtYXhpbXVtIGNvbG9yIGNvbXBvbmVudHMgb2YgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gY29sb3JzXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9FWFQgPSAweDgwMDg7XG5cbi8vIEVYVF9zUkdCXG4vLyBUaGUgRVhUX3NSR0IgZXh0ZW5zaW9uIGlzIHBhcnQgb2YgdGhlIFdlYkdMIEFQSSBhbmQgYWRkcyBzUkdCIHN1cHBvcnQgdG8gdGV4dHVyZXMgYW5kIGZyYW1lYnVmZmVyIG9iamVjdHNcbi8qKlxuICogVW5zaXplZCBzUkdCIGZvcm1hdCB0aGF0IGxlYXZlcyB0aGUgcHJlY2lzaW9uIHVwIHRvIHRoZSBkcml2ZXJcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgU1JHQl9FWFQgPSAweDhjNDA7XG5cbi8qKlxuICogVW5zaXplZCBzUkdCIGZvcm1hdCB3aXRoIHVuc2l6ZWQgYWxwaGEgY29tcG9uZW50XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFNSR0JfQUxQSEFfRVhUID0gMHg4YzQyO1xuXG4vKipcbiAqIFNpemVkICg4LWJpdCkgc1JHQiBhbmQgYWxwaGEgZm9ybWF0c1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBTUkdCOF9BTFBIQThfRVhUID0gMHg4YzQzO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZyYW1lYnVmZmVyIGNvbG9yIGVuY29kaW5nXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQ09MT1JfRU5DT0RJTkdfRVhUID0gMHg4MjEwO1xuXG4vLyBPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcbi8vIFRoZSBPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgZXh0ZW5zaW9uIGlzIHBhcnQgb2YgdGhlIFdlYkdMIEFQSSBhbmQgYWRkcyB0aGUgR0xTTCBkZXJpdmF0aXZlIGZ1bmN0aW9ucyBkRmR4LCBkRmR5LCBhbmQgZndpZHRoXG4vKipcbiAqIEluZGljYXRlcyB0aGUgYWNjdXJhY3kgb2YgdGhlIGRlcml2YXRpdmUgY2FsY3VsYXRpb24gZm9yIHRoZSBHTFNMIGJ1aWx0LWluIGZ1bmN0aW9uczogZEZkeCwgZEZkeSwgYW5kIGZ3aWR0aFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBGUkFHTUVOVF9TSEFERVJfREVSSVZBVElWRV9ISU5UX09FUyA9IDB4OGI4YjtcblxuLy8gV0VCR0xfZHJhd19idWZmZXJzXG4vLyBUaGUgV0VCR0xfZHJhd19idWZmZXJzIGV4dGVuc2lvbiBpcyBwYXJ0IG9mIHRoZSBXZWJHTCBBUEkgYW5kIGVuYWJsZXMgYSBmcmFnbWVudCBzaGFkZXIgdG8gd3JpdGUgdG8gc2V2ZXJhbCB0ZXh0dXJlcywgd2hpY2ggaXMgdXNlZnVsIGZvciBkZWZlcnJlZCBzaGFkaW5nLCBmb3IgZXhhbXBsZVxuLyoqXG4gKiBGcmFtZWJ1ZmZlciBjb2xvciBhdHRhY2htZW50IHBvaW50XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTE9SX0FUVEFDSE1FTlQwX1dFQkdMID0gMHg4Y2UwO1xuXG4vKipcbiAqIEZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgcG9pbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDFfV0VCR0wgPSAweDhjZTE7XG5cbi8qKlxuICogRnJhbWVidWZmZXIgY29sb3IgYXR0YWNobWVudCBwb2ludFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT0xPUl9BVFRBQ0hNRU5UMl9XRUJHTCA9IDB4OGNlMjtcblxuLyoqXG4gKiBGcmFtZWJ1ZmZlciBjb2xvciBhdHRhY2htZW50IHBvaW50XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTE9SX0FUVEFDSE1FTlQzX1dFQkdMID0gMHg4Y2UzO1xuXG4vKipcbiAqIEZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgcG9pbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDRfV0VCR0wgPSAweDhjZTQ7XG5cbi8qKlxuICogRnJhbWVidWZmZXIgY29sb3IgYXR0YWNobWVudCBwb2ludFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT0xPUl9BVFRBQ0hNRU5UNV9XRUJHTCA9IDB4OGNlNTtcblxuLyoqXG4gKiBGcmFtZWJ1ZmZlciBjb2xvciBhdHRhY2htZW50IHBvaW50XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTE9SX0FUVEFDSE1FTlQ2X1dFQkdMID0gMHg4Y2U2O1xuXG4vKipcbiAqIEZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgcG9pbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDdfV0VCR0wgPSAweDhjZTc7XG5cbi8qKlxuICogRnJhbWVidWZmZXIgY29sb3IgYXR0YWNobWVudCBwb2ludFxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT0xPUl9BVFRBQ0hNRU5UOF9XRUJHTCA9IDB4OGNlODtcblxuLyoqXG4gKiBGcmFtZWJ1ZmZlciBjb2xvciBhdHRhY2htZW50IHBvaW50XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTE9SX0FUVEFDSE1FTlQ5X1dFQkdMID0gMHg4Y2U5O1xuXG4vKipcbiAqIEZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgcG9pbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDEwX1dFQkdMID0gMHg4Y2VhO1xuXG4vKipcbiAqIEZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgcG9pbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDExX1dFQkdMID0gMHg4Y2ViO1xuXG4vKipcbiAqIEZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgcG9pbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDEyX1dFQkdMID0gMHg4Y2VjO1xuXG4vKipcbiAqIEZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgcG9pbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDEzX1dFQkdMID0gMHg4Y2VkO1xuXG4vKipcbiAqIEZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgcG9pbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDE0X1dFQkdMID0gMHg4Y2VlO1xuXG4vKipcbiAqIEZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgcG9pbnRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQ09MT1JfQVRUQUNITUVOVDE1X1dFQkdMID0gMHg4Y2VmO1xuXG4vKipcbiAqIERyYXcgYnVmZmVyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERSQVdfQlVGRkVSMF9XRUJHTCA9IDB4ODgyNTtcblxuLyoqXG4gKiBEcmF3IGJ1ZmZlclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEUkFXX0JVRkZFUjFfV0VCR0wgPSAweDg4MjY7XG5cbi8qKlxuICogRHJhdyBidWZmZXJcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVIyX1dFQkdMID0gMHg4ODI3O1xuXG4vKipcbiAqIERyYXcgYnVmZmVyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERSQVdfQlVGRkVSM19XRUJHTCA9IDB4ODgyODtcblxuLyoqXG4gKiBEcmF3IGJ1ZmZlclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEUkFXX0JVRkZFUjRfV0VCR0wgPSAweDg4Mjk7XG5cbi8qKlxuICogRHJhdyBidWZmZXJcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVI1X1dFQkdMID0gMHg4ODJhO1xuXG4vKipcbiAqIERyYXcgYnVmZmVyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERSQVdfQlVGRkVSNl9XRUJHTCA9IDB4ODgyYjtcblxuLyoqXG4gKiBEcmF3IGJ1ZmZlclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEUkFXX0JVRkZFUjdfV0VCR0wgPSAweDg4MmM7XG5cbi8qKlxuICogRHJhdyBidWZmZXJcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVI4X1dFQkdMID0gMHg4ODJkO1xuXG4vKipcbiAqIERyYXcgYnVmZmVyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERSQVdfQlVGRkVSOV9XRUJHTCA9IDB4ODgyZTtcblxuLyoqXG4gKiBEcmF3IGJ1ZmZlclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEUkFXX0JVRkZFUjEwX1dFQkdMID0gMHg4ODJmO1xuXG4vKipcbiAqIERyYXcgYnVmZmVyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERSQVdfQlVGRkVSMTFfV0VCR0wgPSAweDg4MzA7XG5cbi8qKlxuICogRHJhdyBidWZmZXJcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVIxMl9XRUJHTCA9IDB4ODgzMTtcblxuLyoqXG4gKiBEcmF3IGJ1ZmZlclxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBEUkFXX0JVRkZFUjEzX1dFQkdMID0gMHg4ODMyO1xuXG4vKipcbiAqIERyYXcgYnVmZmVyXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IERSQVdfQlVGRkVSMTRfV0VCR0wgPSAweDg4MzM7XG5cbi8qKlxuICogRHJhdyBidWZmZXJcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgRFJBV19CVUZGRVIxNV9XRUJHTCA9IDB4ODgzNDtcblxuLyoqXG4gKiBNYXhpbXVtIG51bWJlciBvZiBmcmFtZWJ1ZmZlciBjb2xvciBhdHRhY2htZW50IHBvaW50c1xuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfQ09MT1JfQVRUQUNITUVOVFNfV0VCR0wgPSAweDhjZGY7XG5cbi8qKlxuICogTWF4aW11bSBudW1iZXIgb2YgZHJhdyBidWZmZXJzXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9EUkFXX0JVRkZFUlNfV0VCR0wgPSAweDg4MjQ7XG5cbi8vIE9FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0XG4vLyBUaGUgT0VTX3ZlcnRleF9hcnJheV9vYmplY3QgZXh0ZW5zaW9uIGlzIHBhcnQgb2YgdGhlIFdlYkdMIEFQSSBhbmQgcHJvdmlkZXMgdmVydGV4IGFycmF5IG9iamVjdHMgKFZBT3MpIHdoaWNoIGVuY2Fwc3VsYXRlIHZlcnRleCBhcnJheSBzdGF0ZXMuIFRoZXNlIG9iamVjdHMga2VlcCBwb2ludGVycyB0byB2ZXJ0ZXggZGF0YSBhbmQgcHJvdmlkZSBuYW1lcyBmb3IgZGlmZmVyZW50IHNldHMgb2YgdmVydGV4IGRhdGFcbi8qKlxuICogVGhlIGJvdW5kIHZlcnRleCBhcnJheSBvYmplY3QgKFZBTylcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgVkVSVEVYX0FSUkFZX0JJTkRJTkdfT0VTID0gMHg4NWI1O1xuXG4vLyBFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlcbi8vIFRoZSBFWFRfZGlzam9pbnRfdGltZXJfcXVlcnkgZXh0ZW5zaW9uIGlzIHBhcnQgb2YgdGhlIFdlYkdMIEFQSSBhbmQgcHJvdmlkZXMgYSB3YXkgdG8gbWVhc3VyZSB0aGUgZHVyYXRpb24gb2YgYSBzZXQgb2YgR0wgY29tbWFuZHMsIHdpdGhvdXQgc3RhbGxpbmcgdGhlIHJlbmRlcmluZyBwaXBlbGluZVxuLyoqXG4gKiBUaGUgbnVtYmVyIG9mIGJpdHMgdXNlZCB0byBob2xkIHRoZSBxdWVyeSByZXN1bHQgZm9yIHRoZSBnaXZlbiB0YXJnZXRcbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgUVVFUllfQ09VTlRFUl9CSVRTX0VYVCA9IDB4ODg2NDtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBxdWVyeVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDVVJSRU5UX1FVRVJZX0VYVCA9IDB4ODg2NTtcblxuLyoqXG4gKiBUaGUgcXVlcnkgcmVzdWx0XG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFFVRVJZX1JFU1VMVF9FWFQgPSAweDg4NjY7XG5cbi8qKlxuICogQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgYSBxdWVyeSByZXN1bHQgaXMgYXZhaWxhYmxlXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFFVRVJZX1JFU1VMVF9BVkFJTEFCTEVfRVhUID0gMHg4ODY3O1xuXG4vKipcbiAqIEVsYXBzZWQgdGltZSAoaW4gbmFub3NlY29uZHMpXG4gKiBAY29uc3RhbnQge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFRJTUVfRUxBUFNFRF9FWFQgPSAweDg4YmY7XG5cbi8qKlxuICogVGhlIGN1cnJlbnQgdGltZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBUSU1FU1RBTVBfRVhUID0gMHg4ZTI4O1xuXG4vKipcbiAqIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90IHRoZSBHUFUgcGVyZm9ybWVkIGFueSBkaXNqb2ludCBvcGVyYXRpb25cbiAqIEBjb25zdGFudCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgR1BVX0RJU0pPSU5UX0VYVCA9IDB4OGZiYjtcblxuLy8gQ29uc3RhbnRzIGRlZmluZWQgaW4gV2ViR0wgZHJhZnQgZXh0ZW5zaW9uc1xuXG4vLyBLSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGVcbi8vIFRoZSBLSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGUgZXh0ZW5zaW9uIGlzIHBhcnQgb2YgdGhlIFdlYkdMIGRyYWZ0IEFQSSBhbmQgcHJvdmlkZXMgbXVsdGl0aHJlYWRlZCBhc3luY2hyb25vdXMgc2hhZGVyIGNvbXBpbGF0aW9uXG4vKipcbiAqIFF1ZXJ5IHRvIGRldGVybWluZSBpZiB0aGUgY29tcGlsYXRpb24gcHJvY2VzcyBpcyBjb21wbGV0ZVxuICogQGNvbnN0YW50IHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QTEVUSU9OX1NUQVRVU19LSFIgPSAweDkxYjE7XG4iLCJpbXBvcnQgeyBXSURUSCwgSEVJR0hUIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgKiBhcyBHTCBmcm9tIFwiLi93ZWJnbC1jb25zdGFudHNcIjtcbmltcG9ydCB0eXBlIHsgRnJhbWVidWZmZXIgfSBmcm9tIFwiLi9mcmFtZWJ1ZmZlclwiO1xuXG5jb25zdCBQQUxFVFRFX1NJWkUgPSA0O1xuXG5leHBvcnQgY2xhc3MgV2ViR0xDb21wb3NpdG9yIHtcbiAgICB0YWJsZTogVWludDMyQXJyYXk7XG4gICAgY29sb3JCdWZmZXI6IFVpbnQzMkFycmF5O1xuICAgIHBhbGV0dGVCdWZmZXI6IEZsb2F0MzJBcnJheTtcbiAgICBsYXN0UGFsZXR0ZTogbnVtYmVyW107XG4gICAgcGFsZXR0ZUxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiB8IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvciAocHVibGljIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb2xvckJ1ZmZlciA9IG5ldyBVaW50MzJBcnJheShXSURUSCAqIEhFSUdIVCA+PiAyKTtcbiAgICAgICAgdGhpcy5wYWxldHRlQnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheSgzICogUEFMRVRURV9TSVpFKTtcbiAgICAgICAgdGhpcy5sYXN0UGFsZXR0ZSA9IEFycmF5KFBBTEVUVEVfU0laRSk7XG4gICAgICAgIHRoaXMucGFsZXR0ZUxvY2F0aW9uID0gbnVsbDtcblxuICAgICAgICAvLyBDcmVhdGUgYSBsb29rdXAgdGFibGUgZm9yIGVhY2ggYnl0ZSBtYXBwaW5nIHRvIDQgYnl0ZXM6XG4gICAgICAgIC8vIDBieHh5eXp6d3cgLS0+IDBieHgwMDAwMDBfeXkwMDAwMDBfenowMDAwMDBfd3cwMDAwMDBcbiAgICAgICAgY29uc3QgdGFibGUgPSBuZXcgVWludDMyQXJyYXkoMjU2KTtcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IDI1NjsgKytpaSkge1xuICAgICAgICAgICAgY29uc3QgeHggPSAoaWkgPj4gNikgJiAzO1xuICAgICAgICAgICAgY29uc3QgeXkgPSAoaWkgPj4gNCkgJiAzO1xuICAgICAgICAgICAgY29uc3QgenogPSAoaWkgPj4gMikgJiAzO1xuICAgICAgICAgICAgY29uc3Qgd3cgPSBpaSAmIDM7XG4gICAgICAgICAgICB0YWJsZVtpaV0gPSAoeHggPDwgMzApIHwgKHl5IDw8IDIyKSB8ICh6eiA8PCAxNCkgfCAod3cgPDwgNik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xuXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGdsLmNhbnZhcztcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dHJlc3RvcmVkXCIsICgpID0+IHsgdGhpcy5pbml0R0woKSB9KTtcblxuICAgICAgICB0aGlzLmluaXRHTCgpO1xuXG4gICAgICAgIC8vIC8vIFRlc3QgV2ViR0wgY29udGV4dCBsb3NzXG4gICAgICAgIC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsICgpID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFwiTG9zaW5nIGNvbnRleHRcIik7XG4gICAgICAgIC8vICAgICBjb25zdCBleHQgPSBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2xvc2VfY29udGV4dCcpO1xuICAgICAgICAvLyAgICAgZXh0Lmxvc2VDb250ZXh0KCk7XG4gICAgICAgIC8vICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gICAgICAgICBleHQucmVzdG9yZUNvbnRleHQoKTtcbiAgICAgICAgLy8gICAgIH0sIDApO1xuICAgICAgICAvLyB9KVxuICAgIH1cblxuICAgIGluaXRHTCAoKSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcblxuICAgICAgICB0aGlzLmxhc3RQYWxldHRlID0gQXJyYXkoUEFMRVRURV9TSVpFKTtcblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVTaGFkZXIgKHR5cGU6IG51bWJlciwgc291cmNlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKSE7XG5cbiAgICAgICAgICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgICAgICAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG4gICAgICAgICAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIEdMLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcikgKyAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2hhZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlVGV4dHVyZSAoc2xvdDogbnVtYmVyKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShzbG90KTtcbiAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKEdMLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShHTC5URVhUVVJFXzJELCBHTC5URVhUVVJFX1dSQVBfUywgR0wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKEdMLlRFWFRVUkVfMkQsIEdMLlRFWFRVUkVfV1JBUF9ULCBHTC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoR0wuVEVYVFVSRV8yRCwgR0wuVEVYVFVSRV9NQUdfRklMVEVSLCBHTC5ORUFSRVNUKTtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoR0wuVEVYVFVSRV8yRCwgR0wuVEVYVFVSRV9NSU5fRklMVEVSLCBHTC5ORUFSRVNUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IGNyZWF0ZVNoYWRlcihHTC5WRVJURVhfU0hBREVSLCBgXG4gICAgICAgICAgICBhdHRyaWJ1dGUgdmVjMiBwb3M7XG4gICAgICAgICAgICB2YXJ5aW5nIHZlYzIgZnJhbWVidWZmZXJDb29yZDtcblxuICAgICAgICAgICAgdm9pZCBtYWluICgpIHtcbiAgICAgICAgICAgICAgICBmcmFtZWJ1ZmZlckNvb3JkID0gcG9zKnZlYzIoMC41LCAtMC41KSArIDAuNTtcbiAgICAgICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zLCAwLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYCk7XG5cbiAgICAgICAgY29uc3QgbG9va3VwQmxvY2sgPSBBcnJheS5mcm9tKHtsZW5ndGg6IFBBTEVUVEVfU0laRSAtIDF9LFxuICAgICAgICAgICAgICAgIChfLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgcCA9IG1peChwLCBwYWxldHRlWyR7aSArIDF9XSwgIHN0ZXAoJHsoKGkgKyAxKSAvIFBBTEVUVEVfU0laRSkudG9GaXhlZCgyKX0sIGluZGV4KSk7YFxuICAgICAgICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gY3JlYXRlU2hhZGVyKEdMLkZSQUdNRU5UX1NIQURFUiwgYFxuICAgICAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzMgcGFsZXR0ZVske1BBTEVUVEVfU0laRX1dO1xuICAgICAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgZnJhbWVidWZmZXI7XG4gICAgICAgICAgICB2YXJ5aW5nIHZlYzIgZnJhbWVidWZmZXJDb29yZDtcblxuICAgICAgICAgICAgdmVjMyBsb29rdXAoZmxvYXQgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2ZWMzIHAgPSBwYWxldHRlWzBdO1xuICAgICAgICAgICAgICAgICR7bG9va3VwQmxvY2t9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZvaWQgbWFpbiAoKSB7XG4gICAgICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChsb29rdXAodGV4dHVyZTJEKGZyYW1lYnVmZmVyLCBmcmFtZWJ1ZmZlckNvb3JkKS5yKSwgMS4pO1xuICAgICAgICAgICAgfVxuICAgICAgICBgKTtcblxuICAgICAgICAvLyBTZXR1cCBzaGFkZXJzXG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCkhO1xuXG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgICAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIEdMLkxJTktfU1RBVFVTKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pICsgJycpO1xuICAgICAgICB9XG4gICAgICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XG5cbiAgICAgICAgLy8gU2V0dXAgdW5pZm9ybXNcbiAgICAgICAgdGhpcy5wYWxldHRlTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgXCJwYWxldHRlXCIpO1xuICAgICAgICBnbC51bmlmb3JtMWkoZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIFwiZnJhbWVidWZmZXJcIiksIDApO1xuXG4gICAgICAgIC8vIENsZWFudXAgc2hhZGVyc1xuICAgICAgICBnbC5kZXRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gICAgICAgIGdsLmRldGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG4gICAgICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGZyYW1lYnVmZmVyIHRleHR1cmVcbiAgICAgICAgY3JlYXRlVGV4dHVyZShHTC5URVhUVVJFMCk7XG4gICAgICAgIGdsLnRleEltYWdlMkQoR0wuVEVYVFVSRV8yRCwgMCwgR0wuTFVNSU5BTkNFLCBXSURUSCwgSEVJR0hULCAwLCBHTC5MVU1JTkFOQ0UsIEdMLlVOU0lHTkVEX0JZVEUsIG51bGwpO1xuXG4gICAgICAgIC8vIFNldHVwIHN0YXRpYyBnZW9tZXRyeVxuICAgICAgICBjb25zdCBwb3NpdGlvbkF0dHJpYiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIFwicG9zXCIpO1xuICAgICAgICBjb25zdCBwb3NpdGlvbkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBjb25zdCBwb3NpdGlvbkRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgICAgIC0xLCAtMSwgLTEsICsxLCArMSwgKzEsXG4gICAgICAgICAgICArMSwgKzEsICsxLCAtMSwgLTEsIC0xLFxuICAgICAgICBdKTtcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihHTC5BUlJBWV9CVUZGRVIsIHBvc2l0aW9uQnVmZmVyKTtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShHTC5BUlJBWV9CVUZGRVIsIHBvc2l0aW9uRGF0YSwgR0wuU1RBVElDX0RSQVcpO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShwb3NpdGlvbkF0dHJpYik7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIocG9zaXRpb25BdHRyaWIsIDIsIEdMLkZMT0FULCBmYWxzZSwgMCwgMCk7XG4gICAgfVxuXG4gICAgY29tcG9zaXRlIChwYWxldHRlOiBVaW50MzJBcnJheSwgZnJhbWVidWZmZXI6IEZyYW1lYnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIGJ5dGVzID0gZnJhbWVidWZmZXIuYnl0ZXMsXG4gICAgICAgICAgICBjb2xvckJ1ZmZlciA9IHRoaXMuY29sb3JCdWZmZXIsXG4gICAgICAgICAgICB0YWJsZSA9IHRoaXMudGFibGUsXG4gICAgICAgICAgICBsYXN0UGFsZXR0ZSA9IHRoaXMubGFzdFBhbGV0dGUsXG4gICAgICAgICAgICByZ2IgPSB0aGlzLnBhbGV0dGVCdWZmZXI7XG5cbiAgICAgICAgLy8gVXBsb2FkIHBhbGV0dGUgd2hlbiBuZWVkZWRcbiAgICAgICAgbGV0IHN5bmNQYWxldHRlID0gZmFsc2U7XG5cbiAgICAgICAgZm9yIChsZXQgaWkgPSAwLCBuID0gMDsgaWkgPCBQQUxFVFRFX1NJWkU7ICsraWkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ2IgPSBwYWxldHRlW2lpXTtcblxuICAgICAgICAgICAgc3luY1BhbGV0dGUgPSBzeW5jUGFsZXR0ZSB8fCBsYXN0UGFsZXR0ZVtpaV0gIT09IGFyZ2I7XG5cbiAgICAgICAgICAgIHJnYltuKytdID0gKChhcmdiID4+IDE2KSAmIDB4ZmYpIC8gMHhmZjtcbiAgICAgICAgICAgIHJnYltuKytdID0gKChhcmdiID4+IDgpICYgMHhmZikgLyAweGZmO1xuICAgICAgICAgICAgcmdiW24rK10gPSAoYXJnYiAmIDB4ZmYpIC8gMHhmZjtcblxuICAgICAgICAgICAgbGFzdFBhbGV0dGVbaWldID0gYXJnYjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzeW5jUGFsZXR0ZSkge1xuICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLnBhbGV0dGVMb2NhdGlvbiwgdGhpcy5wYWxldHRlQnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVucGFjayB0aGUgZnJhbWVidWZmZXIgaW50byBvbmUgYnl0ZSBwZXIgcGl4ZWxcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IFdJRFRIKkhFSUdIVCA+PiAyOyArK2lpKSB7XG4gICAgICAgICAgICBjb2xvckJ1ZmZlcltpaV0gPSB0YWJsZVtieXRlc1tpaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBsb2FkIGZyYW1lYnVmZmVyXG4gICAgICAgIGdsLnRleEltYWdlMkQoR0wuVEVYVFVSRV8yRCwgMCwgR0wuTFVNSU5BTkNFLCBXSURUSCwgSEVJR0hULCAwLCBHTC5MVU1JTkFOQ0UsIEdMLlVOU0lHTkVEX0JZVEUsIG5ldyBVaW50OEFycmF5KGNvbG9yQnVmZmVyLmJ1ZmZlcikpO1xuXG4gICAgICAgIC8vIERyYXcgdGhlIGZ1bGxzY3JlZW4gcXVhZFxuICAgICAgICBnbC5kcmF3QXJyYXlzKEdMLlRSSUFOR0xFUywgMCwgNik7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgY29uc3RhbnRzIGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0ICogYXMgejg1IGZyb20gXCIuL3o4NVwiO1xuaW1wb3J0IHsgQVBVIH0gZnJvbSBcIi4vYXB1XCI7XG5pbXBvcnQgeyBGcmFtZWJ1ZmZlciB9IGZyb20gXCIuL2ZyYW1lYnVmZmVyXCI7XG5pbXBvcnQgeyBXZWJHTENvbXBvc2l0b3IgfSBmcm9tIFwiLi9jb21wb3NpdG9yXCI7XG5pbXBvcnQgKiBhcyBkZXZraXQgZnJvbSBcIi4vZGV2a2l0XCI7XG5cbmV4cG9ydCBjbGFzcyBSdW50aW1lIHtcbiAgICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIG1lbW9yeTogV2ViQXNzZW1ibHkuTWVtb3J5O1xuICAgIGFwdTogQVBVO1xuICAgIGNvbXBvc2l0b3I6IFdlYkdMQ29tcG9zaXRvcjtcbiAgICBkYXRhOiBEYXRhVmlldztcbiAgICBmcmFtZWJ1ZmZlcjogRnJhbWVidWZmZXI7XG4gICAgcGF1c2VTdGF0ZTogbnVtYmVyO1xuICAgIHdhc21CdWZmZXI6IFVpbnQ4QXJyYXkgfCBudWxsID0gbnVsbDtcbiAgICB3YXNtQnVmZmVyQnl0ZUxlbjogbnVtYmVyO1xuICAgIHdhc206IFdlYkFzc2VtYmx5Lkluc3RhbmNlIHwgbnVsbCA9IG51bGw7XG4gICAgd2FybmVkRmlsZVNpemUgPSBmYWxzZTtcblxuICAgIGRpc2tOYW1lOiBzdHJpbmc7XG4gICAgZGlza0J1ZmZlcjogQXJyYXlCdWZmZXI7XG4gICAgZGlza1NpemU6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yIChkaXNrTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGNvbnN0YW50cy5XSURUSDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGNvbnN0YW50cy5IRUlHSFQ7XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuXG4gICAgICAgIGNvbnN0IGdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiLCB7XG4gICAgICAgICAgICBhbHBoYTogZmFsc2UsXG4gICAgICAgICAgICBkZXB0aDogZmFsc2UsXG4gICAgICAgICAgICBhbnRpYWxpYXM6IGZhbHNlLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZighZ2wpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignd2ViLXJ1bnRpbWU6IGNvdWxkIG5vdCBjcmVhdGUgd2VnbCBjb250ZXh0JykgIC8vIFRPRE8oMjAyMS0wOC0wMSk6IEZhbGxiYWNrIHRvIENhbnZhczJEQ29tcG9zaXRvclxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb21wb3NpdG9yID0gbmV3IFdlYkdMQ29tcG9zaXRvcihnbCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmFwdSA9IG5ldyBBUFUoKTtcblxuICAgICAgICB0aGlzLmRpc2tOYW1lID0gZGlza05hbWU7XG4gICAgICAgIHRoaXMuZGlza0J1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihjb25zdGFudHMuU1RPUkFHRV9TSVpFKTtcblxuICAgICAgICAvLyBUcnkgdG8gbG9hZCBmcm9tIGxvY2FsU3RvcmFnZVxuICAgICAgICBsZXQgc3RyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oZGlza05hbWUpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHJlYWRpbmcgZGlza1wiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNrU2l6ZSA9IChzdHIgIT0gbnVsbClcbiAgICAgICAgICAgID8gejg1LmRlY29kZShzdHIsIG5ldyBVaW50OEFycmF5KHRoaXMuZGlza0J1ZmZlcikpXG4gICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgdGhpcy5tZW1vcnkgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHtpbml0aWFsOiAxLCBtYXhpbXVtOiAxfSk7XG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBEYXRhVmlldyh0aGlzLm1lbW9yeS5idWZmZXIpO1xuXG4gICAgICAgIHRoaXMuZnJhbWVidWZmZXIgPSBuZXcgRnJhbWVidWZmZXIodGhpcy5tZW1vcnkuYnVmZmVyKTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgdGhpcy5wYXVzZVN0YXRlID0gMDtcbiAgICAgICAgdGhpcy53YXNtQnVmZmVyQnl0ZUxlbiA9IDA7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXB1LmluaXQoKTtcbiAgICB9XG5cbiAgICBzZXRNb3VzZSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIGJ1dHRvbnM6IG51bWJlcikge1xuICAgICAgICB0aGlzLmRhdGEuc2V0SW50MTYoY29uc3RhbnRzLkFERFJfTU9VU0VfWCwgeCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZGF0YS5zZXRJbnQxNihjb25zdGFudHMuQUREUl9NT1VTRV9ZLCB5LCB0cnVlKTtcbiAgICAgICAgdGhpcy5kYXRhLnNldFVpbnQ4KGNvbnN0YW50cy5BRERSX01PVVNFX0JVVFRPTlMsIGJ1dHRvbnMpO1xuICAgIH1cblxuICAgIHNldEdhbWVwYWQgKGlkeDogbnVtYmVyLCBidXR0b25zOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5kYXRhLnNldFVpbnQ4KGNvbnN0YW50cy5BRERSX0dBTUVQQUQxICsgaWR4LCBidXR0b25zKTtcbiAgICB9XG5cbiAgICBzZXROZXRwbGF5IChsb2NhbFBsYXllcklkeDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZGF0YS5zZXRVaW50OChjb25zdGFudHMuQUREUl9ORVRQTEFZLCAwYjEwMCB8IChsb2NhbFBsYXllcklkeCAmIDBiMTEpKTtcbiAgICB9XG5cbiAgICBnZXRTeXN0ZW1GbGFnIChtYXNrOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5nZXRVaW50OChjb25zdGFudHMuQUREUl9TWVNURU1fRkxBR1MpICYgbWFzaztcbiAgICB9XG5cbiAgICB1bmxvY2tBdWRpbyAoKSB7XG4gICAgICAgIHRoaXMuYXB1LnVubG9ja0F1ZGlvKCk7XG4gICAgfVxuXG4gICAgcGF1c2VBdWRpbygpIHtcbiAgICAgICAgdGhpcy5hcHUucGF1c2VBdWRpbygpO1xuICAgIH1cblxuICAgIHJlc2V0ICh6ZXJvTWVtb3J5PzogYm9vbGVhbikge1xuICAgICAgICAvLyBJbml0aWFsaXplIGRlZmF1bHQgY29sb3IgdGFibGUgYW5kIHBhbGV0dGVcbiAgICAgICAgY29uc3QgbWVtMzIgPSBuZXcgVWludDMyQXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgaWYgKHplcm9NZW1vcnkpIHtcbiAgICAgICAgICAgIG1lbTMyLmZpbGwoMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXVzZVN0YXRlICY9IH5jb25zdGFudHMuUEFVU0VfQ1JBU0hFRDtcbiAgICAgICAgbWVtMzIuc2V0KGNvbnN0YW50cy5DT0xPUlMsIGNvbnN0YW50cy5BRERSX1BBTEVUVEUgPj4gMik7XG4gICAgICAgIHRoaXMuZGF0YS5zZXRVaW50MTYoY29uc3RhbnRzLkFERFJfRFJBV19DT0xPUlMsIDB4MTIwMywgdHJ1ZSk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgbW91c2Ugb2ZmIHNjcmVlblxuICAgICAgICB0aGlzLmRhdGEuc2V0SW50MTYoY29uc3RhbnRzLkFERFJfTU9VU0VfWCwgMHg3ZmZmLCB0cnVlKTtcbiAgICAgICAgdGhpcy5kYXRhLnNldEludDE2KGNvbnN0YW50cy5BRERSX01PVVNFX1ksIDB4N2ZmZiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZCAod2FzbUJ1ZmZlcjogVWludDhBcnJheSwgZW5mb3JjZVNpemVMaW1pdCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgbGltaXQgPSAxIDw8IDE2O1xuICAgICAgICB0aGlzLndhc21CdWZmZXIgPSB3YXNtQnVmZmVyO1xuICAgICAgICB0aGlzLndhc21CdWZmZXJCeXRlTGVuID0gd2FzbUJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICB0aGlzLndhc20gPSBudWxsO1xuXG4gICAgICAgIGlmICh3YXNtQnVmZmVyLmJ5dGVMZW5ndGggPiBsaW1pdCkge1xuICAgICAgICAgICAgaWYgKGNvbnN0YW50cy5HQU1FREVWX01PREUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2FybmVkRmlsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53YXJuZWRGaWxlU2l6ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpbnQoYFdhcm5pbmc6IENhcnQgaXMgbGFyZ2VyIHRoYW4gJHtsaW1pdH0gYnl0ZXMuIEVuc3VyZSB0aGUgcmVsZWFzZSBidWlsZCBvZiB5b3VyIGNhcnQgaXMgc21hbGwgZW5vdWdoIHRvIGJlIGJ1bmRsZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbmZvcmNlU2l6ZUxpbWl0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FydCB0b28gYmlnIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVudiA9IHtcbiAgICAgICAgICAgIG1lbW9yeTogdGhpcy5tZW1vcnksXG5cbiAgICAgICAgICAgIHJlY3Q6IHRoaXMuZnJhbWVidWZmZXIuZHJhd1JlY3QuYmluZCh0aGlzLmZyYW1lYnVmZmVyKSxcbiAgICAgICAgICAgIG92YWw6IHRoaXMuZnJhbWVidWZmZXIuZHJhd092YWwuYmluZCh0aGlzLmZyYW1lYnVmZmVyKSxcbiAgICAgICAgICAgIGxpbmU6IHRoaXMuZnJhbWVidWZmZXIuZHJhd0xpbmUuYmluZCh0aGlzLmZyYW1lYnVmZmVyKSxcblxuICAgICAgICAgICAgaGxpbmU6IHRoaXMuZnJhbWVidWZmZXIuZHJhd0hMaW5lLmJpbmQodGhpcy5mcmFtZWJ1ZmZlciksXG4gICAgICAgICAgICB2bGluZTogdGhpcy5mcmFtZWJ1ZmZlci5kcmF3VkxpbmUuYmluZCh0aGlzLmZyYW1lYnVmZmVyKSxcblxuICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0LmJpbmQodGhpcyksXG4gICAgICAgICAgICB0ZXh0VXRmODogdGhpcy50ZXh0VXRmOC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGV4dFV0ZjE2OiB0aGlzLnRleHRVdGYxNi5iaW5kKHRoaXMpLFxuXG4gICAgICAgICAgICBibGl0OiB0aGlzLmJsaXQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGJsaXRTdWI6IHRoaXMuYmxpdFN1Yi5iaW5kKHRoaXMpLFxuXG4gICAgICAgICAgICB0b25lOiB0aGlzLmFwdS50b25lLmJpbmQodGhpcy5hcHUpLFxuXG4gICAgICAgICAgICBkaXNrcjogdGhpcy5kaXNrci5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZGlza3c6IHRoaXMuZGlza3cuYmluZCh0aGlzKSxcblxuICAgICAgICAgICAgdHJhY2U6IHRoaXMudHJhY2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRyYWNlVXRmODogdGhpcy50cmFjZVV0ZjguYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRyYWNlVXRmMTY6IHRoaXMudHJhY2VVdGYxNi5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdHJhY2VmOiB0aGlzLnRyYWNlZi5iaW5kKHRoaXMpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGF3YWl0IHRoaXMuYmx1ZXNjcmVlbk9uRXJyb3IoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbW9kdWxlID0gYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUod2FzbUJ1ZmZlciwgeyBlbnYgfSk7XG4gICAgICAgICAgICB0aGlzLndhc20gPSBtb2R1bGUuaW5zdGFuY2U7XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIFdBU0kgX3N0YXJ0L19pbml0aWFsaXplIGZ1bmN0aW9uIChkaWZmZXJlbnQgZnJvbSBXQVNNLTQncyBzdGFydCBjYWxsYmFjayEpXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMud2FzbS5leHBvcnRzW1wiX3N0YXJ0XCJdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53YXNtLmV4cG9ydHMuX3N0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMud2FzbS5leHBvcnRzW1wiX2luaXRpYWxpemVcIl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhc20uZXhwb3J0cy5faW5pdGlhbGl6ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBibHVlc2NyZWVuT25FcnJvciAoZm46IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBmbigpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yRXhwbGFuYXRpb24gPSBlcnJvclRvQmx1ZVNjcmVlblRleHQoZXJyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJsdWVTY3JlZW4oZXJyb3JFeHBsYW5hdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmludFRvU2VydmVyKGVyci5zdGFjayA/PyAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRleHQgKHRleHRQdHI6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IG5ldyBVaW50OEFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlciwgdGV4dFB0cik7XG4gICAgICAgIHRoaXMuZnJhbWVidWZmZXIuZHJhd1RleHQodGV4dCwgeCwgeSk7XG4gICAgfVxuXG4gICAgdGV4dFV0ZjggKHRleHRQdHI6IG51bWJlciwgYnl0ZUxlbmd0aDogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCB0ZXh0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyLCB0ZXh0UHRyLCBieXRlTGVuZ3RoKTtcbiAgICAgICAgdGhpcy5mcmFtZWJ1ZmZlci5kcmF3VGV4dCh0ZXh0LCB4LCB5KTtcbiAgICB9XG5cbiAgICB0ZXh0VXRmMTYgKHRleHRQdHI6IG51bWJlciwgYnl0ZUxlbmd0aDogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCB0ZXh0ID0gbmV3IFVpbnQxNkFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlciwgdGV4dFB0ciwgYnl0ZUxlbmd0aCA+PiAxKTtcbiAgICAgICAgdGhpcy5mcmFtZWJ1ZmZlci5kcmF3VGV4dCh0ZXh0LCB4LCB5KTtcbiAgICB9XG5cbiAgICBibGl0IChzcHJpdGVQdHI6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBmbGFnczogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuYmxpdFN1YihzcHJpdGVQdHIsIHgsIHksIHdpZHRoLCBoZWlnaHQsIDAsIDAsIHdpZHRoLCBmbGFncyk7XG4gICAgfVxuXG4gICAgYmxpdFN1YiAoc3ByaXRlUHRyOiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgc3JjWDogbnVtYmVyLCBzcmNZOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLCBmbGFnczogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHNwcml0ZSA9IG5ldyBVaW50OEFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlciwgc3ByaXRlUHRyKTtcbiAgICAgICAgY29uc3QgYnBwMiA9IChmbGFncyAmIDEpO1xuICAgICAgICBjb25zdCBmbGlwWCA9IChmbGFncyAmIDIpO1xuICAgICAgICBjb25zdCBmbGlwWSA9IChmbGFncyAmIDQpO1xuICAgICAgICBjb25zdCByb3RhdGUgPSAoZmxhZ3MgJiA4KTtcblxuICAgICAgICB0aGlzLmZyYW1lYnVmZmVyLmJsaXQoc3ByaXRlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBzcmNYLCBzcmNZLCBzdHJpZGUsIGJwcDIsIGZsaXBYLCBmbGlwWSwgcm90YXRlKTtcbiAgICB9XG5cbiAgICBkaXNrciAoZGVzdFB0cjogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBieXRlc1JlYWQgPSBNYXRoLm1pbihzaXplLCB0aGlzLmRpc2tTaXplKTtcbiAgICAgICAgY29uc3Qgc3JjID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kaXNrQnVmZmVyLCAwLCBieXRlc1JlYWQpO1xuICAgICAgICBjb25zdCBkZXN0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyLCBkZXN0UHRyKTtcblxuICAgICAgICBkZXN0LnNldChzcmMpO1xuICAgICAgICByZXR1cm4gYnl0ZXNSZWFkO1xuICAgIH1cblxuICAgIGRpc2t3IChzcmNQdHI6IG51bWJlciwgc2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgYnl0ZXNXcml0dGVuID0gTWF0aC5taW4oc2l6ZSwgY29uc3RhbnRzLlNUT1JBR0VfU0laRSk7XG4gICAgICAgIGNvbnN0IHNyYyA9IG5ldyBVaW50OEFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlciwgc3JjUHRyLCBieXRlc1dyaXR0ZW4pO1xuICAgICAgICBjb25zdCBkZXN0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kaXNrQnVmZmVyKTtcblxuICAgICAgICAvLyBUcnkgdG8gc2F2ZSB0byBsb2NhbFN0b3JhZ2VcbiAgICAgICAgY29uc3Qgc3RyID0gejg1LmVuY29kZShzcmMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5kaXNrTmFtZSwgc3RyKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFRPRE8oMjAyMi0wMi0xMyk6IFNob3cgYSB3YXJuaW5nIHRvIHRoZSB1c2VyIHRoYXQgc3RvcmFnZSBpcyBub3QgcGVyc2lzdGVkXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd3JpdGluZyBkaXNrXCIsIGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlc3Quc2V0KHNyYyk7XG4gICAgICAgIHRoaXMuZGlza1NpemUgPSBieXRlc1dyaXR0ZW47XG4gICAgICAgIHJldHVybiBieXRlc1dyaXR0ZW47XG4gICAgfVxuXG4gICAgZ2V0Q1N0cmluZyAocHRyOiBudW1iZXIpIHtcbiAgICAgICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSB0aGlzLmRhdGEuZ2V0VWludDgocHRyKyspO1xuICAgICAgICAgICAgaWYgKGMgPT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICBwcmludCAoc3RyOiBzdHJpbmcgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHN0cik7XG4gICAgICAgIHRoaXMucHJpbnRUb1NlcnZlcihzdHIpO1xuICAgIH1cblxuICAgIHByaW50VG9TZXJ2ZXIgKHN0cjogc3RyaW5nKSB7XG4gICAgICAgIGlmIChkZXZraXQud2Vic29ja2V0ICE9IG51bGwgJiYgZGV2a2l0LndlYnNvY2tldC5yZWFkeVN0YXRlID09IDEpIHtcbiAgICAgICAgICAgIGRldmtpdC53ZWJzb2NrZXQuc2VuZChzdHIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJhY2UgKGNzdHJQdHI6IG51bWJlcikge1xuICAgICAgICB0aGlzLnByaW50KHRoaXMuZ2V0Q1N0cmluZyhjc3RyUHRyKSk7XG4gICAgfVxuXG4gICAgdHJhY2VVdGY4IChzdHJVdGY4UHRyOiBudW1iZXIsIGJ5dGVMZW5ndGg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBzdHJVdGY4ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyLCBzdHJVdGY4UHRyLCBieXRlTGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgc3RyID0gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHN0clV0ZjgpO1xuICAgICAgICB0aGlzLnByaW50KHN0cik7XG4gICAgfVxuXG4gICAgdHJhY2VVdGYxNiAoc3RyVXRmMTZQdHI6IG51bWJlciwgYnl0ZUxlbmd0aDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHN0clV0ZjE2ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyLCBzdHJVdGYxNlB0ciwgYnl0ZUxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHN0ciA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi0xNlwiKS5kZWNvZGUoc3RyVXRmMTYpO1xuICAgICAgICB0aGlzLnByaW50KHN0cik7XG4gICAgfVxuXG4gICAgdHJhY2VmIChmbXRQdHI6IG51bWJlciwgYXJnUHRyOiBudW1iZXIpIHtcbiAgICAgICAgbGV0IG91dHB1dCA9IFwiXCI7XG4gICAgICAgIGxldCBjaDtcbiAgICAgICAgd2hpbGUgKChjaCA9IHRoaXMuZGF0YS5nZXRVaW50OChmbXRQdHIrKykpKSB7XG4gICAgICAgICAgICBpZiAoY2ggPT0gMzcpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoID0gdGhpcy5kYXRhLmdldFVpbnQ4KGZtdFB0cisrKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMzc6IC8vICVcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IFwiJVwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk5OiAvLyBjXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMuZGF0YS5nZXRJbnQzMihhcmdQdHIsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgYXJnUHRyICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTAwOiAvLyBkXG4gICAgICAgICAgICAgICAgY2FzZSAxMjA6IC8vIHhcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IHRoaXMuZGF0YS5nZXRJbnQzMihhcmdQdHIsIHRydWUpLnRvU3RyaW5nKGNoID09IDEwMCA/IDEwIDogMTYpO1xuICAgICAgICAgICAgICAgICAgICBhcmdQdHIgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMTU6IC8vIHNcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IHRoaXMuZ2V0Q1N0cmluZyh0aGlzLmRhdGEuZ2V0VWludDMyKGFyZ1B0ciwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBhcmdQdHIgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDI6IC8vIGZcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IHRoaXMuZGF0YS5nZXRGbG9hdDY0KGFyZ1B0ciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGFyZ1B0ciArPSA4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAvLyB1bmtub3duXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSBcIiVcIiArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaW50KG91dHB1dCk7XG4gICAgfVxuXG4gICAgc3RhcnQgKCkge1xuICAgICAgICBsZXQgc3RhcnRfZnVuY3Rpb24gPSB0aGlzLndhc20hLmV4cG9ydHNbXCJzdGFydFwiXTtcbiAgICAgICAgaWYgKHR5cGVvZiBzdGFydF9mdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmJsdWVzY3JlZW5PbkVycm9yKHN0YXJ0X2Z1bmN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZSAoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhdXNlU3RhdGUgIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmdldFN5c3RlbUZsYWcoY29uc3RhbnRzLlNZU1RFTV9QUkVTRVJWRV9GUkFNRUJVRkZFUikpIHtcbiAgICAgICAgICAgIHRoaXMuZnJhbWVidWZmZXIuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1cGRhdGVfZnVuY3Rpb24gPSB0aGlzLndhc20hLmV4cG9ydHNbXCJ1cGRhdGVcIl07XG4gICAgICAgIGlmICh0eXBlb2YgdXBkYXRlX2Z1bmN0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYmx1ZXNjcmVlbk9uRXJyb3IodXBkYXRlX2Z1bmN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFwdS50aWNrKCk7XG4gICAgfVxuXG4gICAgYmx1ZVNjcmVlbiAodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucGF1c2VTdGF0ZSB8PSBjb25zdGFudHMuUEFVU0VfQ1JBU0hFRDtcblxuICAgICAgICBjb25zdCBDT0xPUlMgPSBbXG4gICAgICAgICAgICAweDExMTFlZSwgLy8gYmx1ZVxuICAgICAgICAgICAgMHg4NmMwNmMsXG4gICAgICAgICAgICAweGFhYWFhYSwgLy8gZ3JleVxuICAgICAgICAgICAgMHhmZmZmZmYsIC8vIHdoaXRlXG4gICAgICAgIF07XG5cbiAgICAgICAgY29uc3QgdG9DaGFyQXJyID0gKHM6IHN0cmluZykgPT4gWy4uLnNdLm1hcCh4ID0+IHguY2hhckNvZGVBdCgwKSk7XG5cbiAgICAgICAgY29uc3QgdGl0bGUgPSBgICR7Y29uc3RhbnRzLkNSQVNIX1RJVExFfSBgO1xuICAgICAgICBjb25zdCBoZWFkZXJUaXRsZSA9IHRpdGxlO1xuICAgICAgICBjb25zdCBoZWFkZXJXaWR0aCA9ICg4ICogdGl0bGUubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgaGVhZGVyWCA9ICgxNjAgLSAoOCAqIHRpdGxlLmxlbmd0aCkpIC8gMjtcbiAgICAgICAgY29uc3QgaGVhZGVyWSA9IDIwO1xuICAgICAgICBjb25zdCBtZXNzYWdlWCA9IDk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VZID0gNjA7XG5cbiAgICAgICAgY29uc3QgbWVtMzIgPSBuZXcgVWludDMyQXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgbWVtMzIuc2V0KENPTE9SUywgY29uc3RhbnRzLkFERFJfUEFMRVRURSA+PiAyKTtcbiAgICAgICAgdGhpcy5kYXRhLnNldFVpbnQxNihjb25zdGFudHMuQUREUl9EUkFXX0NPTE9SUywgMHgxMjAzLCB0cnVlKTtcbiAgICAgICAgdGhpcy5mcmFtZWJ1ZmZlci5jbGVhcigpO1xuICAgICAgICB0aGlzLmZyYW1lYnVmZmVyLmRyYXdITGluZShoZWFkZXJYLCBoZWFkZXJZLTEsIGhlYWRlcldpZHRoKTtcbiAgICAgICAgdGhpcy5kYXRhLnNldFVpbnQxNihjb25zdGFudHMuQUREUl9EUkFXX0NPTE9SUywgMHgxMTMxLCB0cnVlKTtcbiAgICAgICAgdGhpcy5mcmFtZWJ1ZmZlci5kcmF3VGV4dCh0b0NoYXJBcnIoaGVhZGVyVGl0bGUpLCBoZWFkZXJYLCBoZWFkZXJZKTtcbiAgICAgICAgdGhpcy5kYXRhLnNldFVpbnQxNihjb25zdGFudHMuQUREUl9EUkFXX0NPTE9SUywgMHgxMjAzLCB0cnVlKTtcbiAgICAgICAgdGhpcy5mcmFtZWJ1ZmZlci5kcmF3VGV4dCh0b0NoYXJBcnIodGV4dCksIG1lc3NhZ2VYLCBtZXNzYWdlWSk7XG4gICAgICAgIHRoaXMuY29tcG9zaXRlKCk7XG4gICAgfVxuXG4gICAgY29tcG9zaXRlICgpIHtcbiAgICAgICAgY29uc3QgcGFsZXR0ZSA9IG5ldyBVaW50MzJBcnJheSh0aGlzLm1lbW9yeS5idWZmZXIsIGNvbnN0YW50cy5BRERSX1BBTEVUVEUsIDQpO1xuXG4gICAgICAgIHRoaXMuY29tcG9zaXRvci5jb21wb3NpdGUocGFsZXR0ZSwgdGhpcy5mcmFtZWJ1ZmZlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBlcnJvclRvQmx1ZVNjcmVlblRleHQoZXJyOiBFcnJvcikge1xuICAgIC8vIGhhbmQgd3JpdHRlbiBtZXNzYWdlcyBmb3Igc3BlY2lmaWMgZXJyb3JzXG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcikge1xuICAgICAgICBsZXQgbWVzc2FnZTtcbiAgICAgICAgaWYgKGVyci5tZXNzYWdlLm1hdGNoKC91bnJlYWNoYWJsZS8pKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gXCJUaGUgY2FydHJpZGdlIGhhc1xcbnJlYWNoZWQgYSBjb2RlIFxcbnNlZ21lbnQgbWFya2VkIGFzXFxudW5yZWFjaGFibGUuXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyLm1lc3NhZ2UubWF0Y2goL291dCBvZiBib3VuZHMvKSkge1xuICAgICAgICAgICAgbWVzc2FnZSA9IFwiVGhlIGNhcnRyaWRnZSBoYXNcXG5hdHRlbXB0ZWQgYSBtZW1vcnlcXG5hY2Nlc3MgdGhhdCBpc1xcbm91dCBvZiBib3VuZHMuXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UgKyBcIlxcblxcblxcblxcblxcbkhpdCBSIHRvIHJlYm9vdC5cIjtcbiAgICB9IGVsc2UgaWYgKGVyciBpbnN0YW5jZW9mIFdlYkFzc2VtYmx5LkxpbmtFcnJvcikge1xuICAgICAgICByZXR1cm4gXCJUaGUgY2FydHJpZGdlIGhhc1xcbnRyaWVkIHRvIGltcG9ydFxcbmEgbWlzc2luZyBmdW5jdGlvbi5cXG5cXG5cXG5cXG5TZWUgY29uc29sZSBmb3JcXG5tb3JlIGRldGFpbHMuXCI7XG4gICAgfSBlbHNlIGlmIChlcnIgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5Db21waWxlRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFwiVGhlIGNhcnRyaWRnZSBpc1xcbmNvcnJ1cHRlZC5cXG5cXG5cXG5cXG5TZWUgY29uc29sZSBmb3JcXG5tb3JlIGRldGFpbHMuXCI7XG4gICAgfSBlbHNlIGlmIChlcnIgaW5zdGFuY2VvZiBXYXNtNEVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnIud2FzbTRNZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4gXCJVbmtub3duIGVycm9yLlxcblxcblxcblxcblNlZSBjb25zb2xlIGZvclxcbm1vcmUgZGV0YWlscy5cIjtcbn1cblxuY2xhc3MgV2FzbTRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICB3YXNtNE1lc3NhZ2U6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcih3NE1lc3NhZ2U6IHN0cmluZykge1xuICAgICAgICBzdXBlcih3NE1lc3NhZ2UucmVwbGFjZSgnXFxuJywgJyAnKSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiV2FzbTRFcnJvclwiO1xuICAgICAgICB0aGlzLndhc200TWVzc2FnZSA9IHc0TWVzc2FnZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBodG1sLCBjc3MgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBzdGF0ZSwgcXVlcnkgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5cbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgKiBhcyBkZXZraXQgZnJvbSBcIi4uL2RldmtpdFwiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIHo4NSBmcm9tIFwiLi4vejg1XCI7XG5pbXBvcnQgeyBOZXRwbGF5LCBERVZfTkVUUExBWSB9IGZyb20gXCIuLi9uZXRwbGF5XCI7XG5pbXBvcnQgeyBSdW50aW1lIH0gZnJvbSBcIi4uL3J1bnRpbWVcIjtcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlXCI7XG5cbmltcG9ydCB7IE1lbnVPdmVybGF5IH0gZnJvbSBcIi4vbWVudS1vdmVybGF5XCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zIH0gZnJvbSBcIi4vbm90aWZpY2F0aW9uc1wiO1xuXG5jbGFzcyBJbnB1dFN0YXRlIHtcbiAgICBnYW1lcGFkID0gWzAsIDAsIDAsIDBdO1xuICAgIG1vdXNlWCA9IDA7XG4gICAgbW91c2VZID0gMDtcbiAgICBtb3VzZUJ1dHRvbnMgPSAwO1xufVxuXG5AY3VzdG9tRWxlbWVudChcIndhc200LWFwcFwiKVxuZXhwb3J0IGNsYXNzIEFwcCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuICAgICAgICAgICAgdG91Y2gtYWN0aW9uOiBub25lO1xuICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAgICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcblxuICAgICAgICAgICAgYmFja2dyb3VuZDogIzIwMjAyMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jb250ZW50IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDB2bWluO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDB2bWluO1xuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBOdWRnZSB0aGUgZ2FtZSB1cHdhcmRzIGEgYml0IGluIHBvcnRyYWl0IHRvIG1ha2Ugc3BhY2UgZm9yIHRoZSB2aXJ0dWFsIGdhbWVwYWQuICovXG4gICAgICAgIEBtZWRpYSAocG9pbnRlcjogY29hcnNlKSBhbmQgKG1heC1hc3BlY3QtcmF0aW86IDIvMykge1xuICAgICAgICAgICAgLmNvbnRlbnQge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICB0b3A6IGNhbGMoKDEwMCUgLSAyMjBweCAtIDEwMHZtaW4pLzIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAuY29udGVudCBjYW52YXMge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICBpbWFnZS1yZW5kZXJpbmc6IHBpeGVsYXRlZDtcbiAgICAgICAgICAgIGltYWdlLXJlbmRlcmluZzogY3Jpc3AtZWRnZXM7XG4gICAgICAgIH1cbiAgICBgO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBydW50aW1lOiBSdW50aW1lO1xuXG4gICAgQHN0YXRlKCkgcHJpdmF0ZSBoaWRlR2FtZXBhZE92ZXJsYXkgPSBmYWxzZTtcbiAgICBAc3RhdGUoKSBwcml2YXRlIHNob3dNZW51ID0gZmFsc2U7XG5cbiAgICBAcXVlcnkoXCJ3YXNtNC1tZW51LW92ZXJsYXlcIikgcHJpdmF0ZSBtZW51T3ZlcmxheT86IE1lbnVPdmVybGF5O1xuICAgIEBxdWVyeShcIndhc200LW5vdGlmaWNhdGlvbnNcIikgcHJpdmF0ZSBub3RpZmljYXRpb25zITogTm90aWZpY2F0aW9ucztcblxuICAgIHByaXZhdGUgc2F2ZWRHYW1lU3RhdGU/OiBTdGF0ZTtcblxuICAgIHJlYWRvbmx5IGlucHV0U3RhdGUgPSBuZXcgSW5wdXRTdGF0ZSgpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2FtZXBhZFVuYXZhaWxhYmxlV2FybmVkID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgICBwcml2YXRlIG5ldHBsYXk/OiBOZXRwbGF5O1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBkaXNrUHJlZml4OiBzdHJpbmc7XG5cbiAgICByZWFkb25seSBvblBvaW50ZXJVcCA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5wb2ludGVyVHlwZSA9PSBcInRvdWNoXCIpIHtcbiAgICAgICAgICAgIC8vIFRyeSB0byBnbyBmdWxsc2NyZWVuIG9uIG1vYmlsZVxuICAgICAgICAgICAgdXRpbHMucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyeSB0byBiZWdpbiBwbGF5aW5nIGF1ZGlvXG4gICAgICAgIHRoaXMucnVudGltZS51bmxvY2tBdWRpbygpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmRpc2tQcmVmaXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndhc200LWRpc2stcHJlZml4XCIpPy50ZXh0Q29udGVudCA/PyB1dGlscy5nZXRVcmxQYXJhbShcImRpc2stcHJlZml4XCIpIGFzIHN0cmluZztcbiAgICAgICAgdGhpcy5ydW50aW1lID0gbmV3IFJ1bnRpbWUoYCR7dGhpcy5kaXNrUHJlZml4fS1kaXNrYCk7XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCAoKSB7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGxvYWRDYXJ0V2FzbSAoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgICAgICAgICBjb25zdCBjYXJ0SnNvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid2FzbTQtY2FydC1qc29uXCIpO1xuXG4gICAgICAgICAgICAvLyBJcyBjYXJ0IGlubGluZWQ/XG4gICAgICAgICAgICBpZiAoY2FydEpzb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IFdBU000X0NBUlQsIFdBU000X0NBUlRfU0laRSB9ID0gSlNPTi5wYXJzZShjYXJ0SnNvbi50ZXh0Q29udGVudCA/PyAnJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBUaGUgY2FydCB3YXMgYnVuZGxlZCBpbiB0aGUgaHRtbCwgZGVjb2RlIGl0XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoV0FTTTRfQ0FSVF9TSVpFKTtcbiAgICAgICAgICAgICAgICB6ODUuZGVjb2RlKFdBU000X0NBUlQsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBMb2FkIHRoZSBjYXJ0IGZyb20gYSB1cmxcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgY29uc3QgY2FydFVybCA9IHV0aWxzLmdldFVybFBhcmFtKFwidXJsXCIpID8/IGdsb2JhbFRoaXNbXCJXQVNNNF9DQVJUX1VSTFwiXSA/PyBcImNhcnQud2FzbVwiOyBcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChjYXJ0VXJsKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCByZXMuYXJyYXlCdWZmZXIoKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgbG9hZCBjYXJ0IGF0IHVybDogJHtjYXJ0VXJsfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJ1bnRpbWUgPSB0aGlzLnJ1bnRpbWU7XG4gICAgICAgIGF3YWl0IHJ1bnRpbWUuaW5pdCgpO1xuXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IHJ1bnRpbWUuY2FudmFzO1xuXG4gICAgICAgIGNvbnN0IGhvc3RQZWVySWQgPSB1dGlscy5nZXRVcmxQYXJhbShcIm5ldHBsYXlcIik7XG4gICAgICAgIGlmIChob3N0UGVlcklkKSB7XG4gICAgICAgICAgICB0aGlzLm5ldHBsYXkgPSB0aGlzLmNyZWF0ZU5ldHBsYXkoKTtcbiAgICAgICAgICAgIHRoaXMubmV0cGxheS5qb2luKGhvc3RQZWVySWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgcnVudGltZS5sb2FkKGF3YWl0IGxvYWRDYXJ0V2FzbSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkZXZ0b29sc01hbmFnZXIgPSB7XG4gICAgICAgICAgICB0b2dnbGVEZXZ0b29scyAoKSB7XG4gICAgICAgICAgICAgICAgLy8gTm90aGluZ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVwZGF0ZUNvbXBsZXRlZCAoLi4uYXJnczogdW5rbm93bltdKSB7XG4gICAgICAgICAgICAgICAgLy8gTm90aGluZ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGNvbnN0YW50cy5HQU1FREVWX01PREUpIHtcbiAgICAgICAgICAgIGRldnRvb2xzTWFuYWdlciA9IGF3YWl0IGltcG9ydCgnQHdhc200L3dlYi1kZXZ0b29scycpLnRoZW4oKHsgRGV2dG9vbHNNYW5hZ2VyfSkgPT4gbmV3IERldnRvb2xzTWFuYWdlcigpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5uZXRwbGF5KSB7XG4gICAgICAgICAgICBydW50aW1lLnN0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoREVWX05FVFBMQVkpIHtcbiAgICAgICAgICAgIHRoaXMuY29weU5ldHBsYXlMaW5rKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uc3RhbnRzLkdBTUVERVZfTU9ERSkge1xuICAgICAgICAgICAgZGV2a2l0LndlYnNvY2tldD8uYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgYXN5bmMgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyZWxvYWRcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldENhcnQoYXdhaXQgbG9hZENhcnRXYXNtKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiaG90c3dhcFwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0Q2FydChhd2FpdCBsb2FkQ2FydFdhc20oKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdGFrZVNjcmVlbnNob3QgKCkge1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byByZW5kZXIgYSBmcmFtZSBmaXJzdFxuICAgICAgICAgICAgcnVudGltZS5jb21wb3NpdGUoKTtcblxuICAgICAgICAgICAgY2FudmFzLnRvQmxvYihibG9iID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IhKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgICAgICAgICBhbmNob3IuaHJlZiA9IHVybDtcbiAgICAgICAgICAgICAgICBhbmNob3IuZG93bmxvYWQgPSBcIndhc200LXNjcmVlbnNob3QucG5nXCI7XG4gICAgICAgICAgICAgICAgYW5jaG9yLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmlkZW9SZWNvcmRlcjogTWVkaWFSZWNvcmRlciB8IG51bGwgPSBudWxsO1xuICAgICAgICBmdW5jdGlvbiByZWNvcmRWaWRlbyAoKSB7XG4gICAgICAgICAgICBpZiAodmlkZW9SZWNvcmRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBTdGlsbCByZWNvcmRpbmcsIGlnbm9yZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtaW1lVHlwZSA9IFwidmlkZW8vd2VibVwiO1xuICAgICAgICAgICAgY29uc3QgdmlkZW9TdHJlYW0gPSBjYW52YXMuY2FwdHVyZVN0cmVhbSgpO1xuICAgICAgICAgICAgdmlkZW9SZWNvcmRlciA9IG5ldyBNZWRpYVJlY29yZGVyKHZpZGVvU3RyZWFtLCB7XG4gICAgICAgICAgICAgICAgbWltZVR5cGUsXG4gICAgICAgICAgICAgICAgdmlkZW9CaXRzUGVyU2Vjb25kOiAyNTAwMDAwMCxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBjaHVua3M6IEJsb2JbXSA9IFtdO1xuICAgICAgICAgICAgdmlkZW9SZWNvcmRlci5vbmRhdGFhdmFpbGFibGUgPSBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgY2h1bmtzLnB1c2goZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2aWRlb1JlY29yZGVyLm9uc3RvcCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoY2h1bmtzLCB7IHR5cGU6IG1pbWVUeXBlIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgICAgICAgICAgYW5jaG9yLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICAgICAgYW5jaG9yLmRvd25sb2FkID0gXCJ3YXNtNC1hbmltYXRpb24ud2VibVwiO1xuICAgICAgICAgICAgICAgIGFuY2hvci5jbGljaygpO1xuICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZpZGVvUmVjb3JkZXIuc3RhcnQoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHZpZGVvUmVjb3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9SZWNvcmRlci5yZXF1ZXN0RGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB2aWRlb1JlY29yZGVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9SZWNvcmRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgNDAwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvbk1vdXNlRXZlbnQgPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gVW5oaWRlIHRoZSBjdXJzb3IgaWYgaXQgd2FzIGhpZGRlbiBieSB0aGUga2V5Ym9hcmQgaGFuZGxlclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcIlwiO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnQuaXNQcmltYXJ5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYm91bmRzID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dFN0YXRlO1xuICAgICAgICAgICAgICAgIGlucHV0Lm1vdXNlWCA9IE1hdGguZnJvdW5kKGNvbnN0YW50cy5XSURUSCAqIChldmVudC5jbGllbnRYIC0gYm91bmRzLmxlZnQpIC8gYm91bmRzLndpZHRoKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5tb3VzZVkgPSBNYXRoLmZyb3VuZChjb25zdGFudHMuSEVJR0hUICogKGV2ZW50LmNsaWVudFkgLSBib3VuZHMudG9wKSAvIGJvdW5kcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIGlucHV0Lm1vdXNlQnV0dG9ucyA9IGV2ZW50LmJ1dHRvbnMgJiAwYjExMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCBvbk1vdXNlRXZlbnQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCBvbk1vdXNlRXZlbnQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIG9uTW91c2VFdmVudCk7XG5cbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBIT1RLRVlTOiBSZWNvcmQ8c3RyaW5nLCAoLi4uYXJnczphbnlbXSkgPT4gYW55PiA9IHtcbiAgICAgICAgICAgIFwiMlwiOiB0aGlzLnNhdmVHYW1lU3RhdGUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIFwiNFwiOiB0aGlzLmxvYWRHYW1lU3RhdGUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIFwiclwiOiB0aGlzLnJlc2V0Q2FydC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgXCJSXCI6IHRoaXMucmVzZXRDYXJ0LmJpbmQodGhpcyksXG4gICAgICAgICAgICBcIkY4XCI6IGRldnRvb2xzTWFuYWdlci50b2dnbGVEZXZ0b29scyxcbiAgICAgICAgICAgIFwiRjlcIjogdGFrZVNjcmVlbnNob3QsXG4gICAgICAgICAgICBcIkYxMFwiOiByZWNvcmRWaWRlbyxcbiAgICAgICAgICAgIFwiRjExXCI6IHV0aWxzLnJlcXVlc3RGdWxsc2NyZWVuLFxuICAgICAgICAgICAgXCJFbnRlclwiOiB0aGlzLm9uTWVudUJ1dHRvblByZXNzZWQuYmluZCh0aGlzKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBvbktleWJvYXJkRXZlbnQgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gSWdub3JlIGN0cmwvYWx0IG1vZGlmaWVkIGtleSBwcmVzc2VzIGJlY2F1c2UgdGhleSBtYXkgYmUgdGhlIHVzZXIgdHJ5aW5nIHRvIG5hdmlnYXRlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChldmVudC5zcmNFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgZXZlbnQuc3JjRWxlbWVudC50YWdOYW1lID09IFwiSU5QVVRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gSWdub3JlIGlmIHdlIGhhdmUgYW4gaW5wdXQgZWxlbWVudCBmb2N1c2VkXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRvd24gPSAoZXZlbnQudHlwZSA9PSBcImtleWRvd25cIik7XG5cbiAgICAgICAgICAgIC8vIFBva2UgV2ViQXVkaW9cbiAgICAgICAgICAgIHJ1bnRpbWUudW5sb2NrQXVkaW8oKTtcblxuICAgICAgICAgICAgLy8gV2UncmUgdXNpbmcgdGhlIGtleWJvYXJkIG5vdywgaGlkZSB0aGUgbW91c2UgY3Vyc29yIGZvciBleHRyYSBpbW1lcnNpb25cbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJub25lXCI7XG5cbiAgICAgICAgICAgIGlmIChkb3duKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaG90a2V5Rm4gPSBIT1RLRVlTW2V2ZW50LmtleV07XG4gICAgICAgICAgICAgICAgaWYgKGhvdGtleUZuKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvdGtleUZuKCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBwbGF5ZXJJZHggPSAwO1xuICAgICAgICAgICAgbGV0IG1hc2sgPSAwO1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5jb2RlKSB7XG4gICAgICAgICAgICAvLyBQbGF5ZXIgMVxuICAgICAgICAgICAgY2FzZSBcIktleVhcIjogY2FzZSBcIktleVZcIjogY2FzZSBcIlNwYWNlXCI6IGNhc2UgXCJQZXJpb2RcIjpcbiAgICAgICAgICAgICAgICBtYXNrID0gY29uc3RhbnRzLkJVVFRPTl9YO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIktleVpcIjogY2FzZSBcIktleUNcIjogY2FzZSBcIkNvbW1hXCI6XG4gICAgICAgICAgICAgICAgbWFzayA9IGNvbnN0YW50cy5CVVRUT05fWjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICAgICAgICAgICAgbWFzayA9IGNvbnN0YW50cy5CVVRUT05fVVA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgICAgICAgICAgbWFzayA9IGNvbnN0YW50cy5CVVRUT05fRE9XTjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgICAgICAgICBtYXNrID0gY29uc3RhbnRzLkJVVFRPTl9MRUZUO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgICAgICAgICBtYXNrID0gY29uc3RhbnRzLkJVVFRPTl9SSUdIVDtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gUGxheWVyIDJcbiAgICAgICAgICAgIGNhc2UgXCJLZXlBXCI6IGNhc2UgXCJLZXlRXCI6XG4gICAgICAgICAgICAgICAgcGxheWVySWR4ID0gMTtcbiAgICAgICAgICAgICAgICBtYXNrID0gY29uc3RhbnRzLkJVVFRPTl9YO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlNoaWZ0TGVmdFwiOiBjYXNlIFwiVGFiXCI6XG4gICAgICAgICAgICAgICAgcGxheWVySWR4ID0gMTtcbiAgICAgICAgICAgICAgICBtYXNrID0gY29uc3RhbnRzLkJVVFRPTl9aO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIktleUVcIjpcbiAgICAgICAgICAgICAgICBwbGF5ZXJJZHggPSAxO1xuICAgICAgICAgICAgICAgIG1hc2sgPSBjb25zdGFudHMuQlVUVE9OX1VQO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIktleURcIjpcbiAgICAgICAgICAgICAgICBwbGF5ZXJJZHggPSAxO1xuICAgICAgICAgICAgICAgIG1hc2sgPSBjb25zdGFudHMuQlVUVE9OX0RPV047XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiS2V5U1wiOlxuICAgICAgICAgICAgICAgIHBsYXllcklkeCA9IDE7XG4gICAgICAgICAgICAgICAgbWFzayA9IGNvbnN0YW50cy5CVVRUT05fTEVGVDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJLZXlGXCI6XG4gICAgICAgICAgICAgICAgcGxheWVySWR4ID0gMTtcbiAgICAgICAgICAgICAgICBtYXNrID0gY29uc3RhbnRzLkJVVFRPTl9SSUdIVDtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gUGxheWVyIDNcbiAgICAgICAgICAgIGNhc2UgXCJOdW1wYWRNdWx0aXBseVwiOiBjYXNlIFwiTnVtcGFkRGVjaW1hbFwiOlxuICAgICAgICAgICAgICAgIHBsYXllcklkeCA9IDI7XG4gICAgICAgICAgICAgICAgbWFzayA9IGNvbnN0YW50cy5CVVRUT05fWDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJOdW1wYWRTdWJ0cmFjdFwiOiBjYXNlIFwiTnVtcGFkRW50ZXJcIjpcbiAgICAgICAgICAgICAgICBwbGF5ZXJJZHggPSAyO1xuICAgICAgICAgICAgICAgIG1hc2sgPSBjb25zdGFudHMuQlVUVE9OX1o7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiTnVtcGFkOFwiOlxuICAgICAgICAgICAgICAgIHBsYXllcklkeCA9IDI7XG4gICAgICAgICAgICAgICAgbWFzayA9IGNvbnN0YW50cy5CVVRUT05fVVA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiTnVtcGFkNVwiOlxuICAgICAgICAgICAgICAgIHBsYXllcklkeCA9IDI7XG4gICAgICAgICAgICAgICAgbWFzayA9IGNvbnN0YW50cy5CVVRUT05fRE9XTjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJOdW1wYWQ0XCI6XG4gICAgICAgICAgICAgICAgcGxheWVySWR4ID0gMjtcbiAgICAgICAgICAgICAgICBtYXNrID0gY29uc3RhbnRzLkJVVFRPTl9MRUZUO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIk51bXBhZDZcIjpcbiAgICAgICAgICAgICAgICBwbGF5ZXJJZHggPSAyO1xuICAgICAgICAgICAgICAgIG1hc2sgPSBjb25zdGFudHMuQlVUVE9OX1JJR0hUO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWFzayAhPSAwKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBvciBjbGVhciB0aGUgYnV0dG9uIGJpdCBmcm9tIHRoZSBuZXh0IGlucHV0IHN0YXRlXG4gICAgICAgICAgICAgICAgY29uc3QgZ2FtZXBhZCA9IHRoaXMuaW5wdXRTdGF0ZS5nYW1lcGFkO1xuICAgICAgICAgICAgICAgIGlmIChkb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWVwYWRbcGxheWVySWR4XSB8PSBtYXNrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWVwYWRbcGxheWVySWR4XSAmPSB+bWFzaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBvbktleWJvYXJkRXZlbnQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIG9uS2V5Ym9hcmRFdmVudCk7XG5cbiAgICAgICAgLy8gQWxzbyBsaXN0ZW4gdG8gdGhlIHRvcCBmcmFtZSB3aGVuIHdlJ3JlIGVtYmVkZGVkIGluIGFuIGlmcmFtZVxuICAgICAgICBpZiAodG9wICYmIHRvcCAhPSB3aW5kb3cpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdG9wLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5Ym9hcmRFdmVudCk7XG4gICAgICAgICAgICAgICAgdG9wLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBvbktleWJvYXJkRXZlbnQpO1xuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIGlmcmFtZSBzZWN1cml0eSBlcnJvcnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBvbGxQaHlzaWNhbEdhbWVwYWRzID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIEJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGdhbWVwYWRzXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgZ2FtZXBhZCBvZiBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKSkge1xuICAgICAgICAgICAgICAgIGlmIChnYW1lcGFkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIERpc2Nvbm5lY3RlZCBnYW1lcGFkXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChnYW1lcGFkLm1hcHBpbmcgIT0gXCJzdGFuZGFyZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBnYW1lcGFkIGlzIGF2YWlsYWJsZSwgYnV0IG5vbnN0YW5kYXJkLCBzbyB3ZSBkb24ndCBhY3R1YWxseSBrbm93IGhvdyB0byByZWFkIGl0LlxuICAgICAgICAgICAgICAgICAgICAvLyBMZXQncyB3YXJuIG9uY2UsIGFuZCBub3QgdXNlIHRoaXMgZ2FtZXBhZCBhZnRlcndhcmRzLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2FtZXBhZFVuYXZhaWxhYmxlV2FybmVkLmhhcyhnYW1lcGFkLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lcGFkVW5hdmFpbGFibGVXYXJuZWQuYWRkKGdhbWVwYWQuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnNob3coXCJVbnN1cHBvcnRlZCBnYW1lcGFkOiBcIiArIGdhbWVwYWQuaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9nYW1lcGFkLyNyZW1hcHBpbmdcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b25zID0gZ2FtZXBhZC5idXR0b25zO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4ZXMgPSBnYW1lcGFkLmF4ZXM7XG5cbiAgICAgICAgICAgICAgICBsZXQgbWFzayA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbnNbMTJdLnByZXNzZWQgfHwgYXhlc1sxXSA8IC0wLjUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFzayB8PSBjb25zdGFudHMuQlVUVE9OX1VQO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uc1sxM10ucHJlc3NlZCB8fCBheGVzWzFdID4gMC41KSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgfD0gY29uc3RhbnRzLkJVVFRPTl9ET1dOO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uc1sxNF0ucHJlc3NlZCB8fCBheGVzWzBdIDwgLTAuNSkge1xuICAgICAgICAgICAgICAgICAgICBtYXNrIHw9IGNvbnN0YW50cy5CVVRUT05fTEVGVDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbnNbMTVdLnByZXNzZWQgfHwgYXhlc1swXSA+IDAuNSkge1xuICAgICAgICAgICAgICAgICAgICBtYXNrIHw9IGNvbnN0YW50cy5CVVRUT05fUklHSFQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChidXR0b25zWzBdLnByZXNzZWQgfHwgYnV0dG9uc1szXS5wcmVzc2VkIHx8IGJ1dHRvbnNbNV0ucHJlc3NlZCB8fCBidXR0b25zWzddLnByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFzayB8PSBjb25zdGFudHMuQlVUVE9OX1g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChidXR0b25zWzFdLnByZXNzZWQgfHwgYnV0dG9uc1syXS5wcmVzc2VkIHx8IGJ1dHRvbnNbNF0ucHJlc3NlZCB8fCBidXR0b25zWzZdLnByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFzayB8PSBjb25zdGFudHMuQlVUVE9OX1o7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbnNbOV0ucHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dNZW51ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0U3RhdGUuZ2FtZXBhZFtnYW1lcGFkLmluZGV4ICUgNF0gPSBtYXNrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hlbiB3ZSBzaG91bGQgcGVyZm9ybSB0aGUgbmV4dCB1cGRhdGVcbiAgICAgICAgbGV0IHRpbWVOZXh0VXBkYXRlID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIC8vIFRyYWNrIHRoZSB0aW1lc3RhbXAgb2YgdGhlIGxhc3QgZnJhbWVcbiAgICAgICAgbGV0IGxhc3RUaW1lRnJhbWVTdGFydCA9IHRpbWVOZXh0VXBkYXRlO1xuXG4gICAgICAgIGNvbnN0IG9uRnJhbWUgPSAodGltZUZyYW1lU3RhcnQ6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9uRnJhbWUpO1xuXG4gICAgICAgICAgICBwb2xsUGh5c2ljYWxHYW1lcGFkcygpO1xuICAgICAgICAgICAgbGV0IGlucHV0ID0gdGhpcy5pbnB1dFN0YXRlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5tZW51T3ZlcmxheSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZW51T3ZlcmxheS5hcHBseUlucHV0KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBQYXVzZSB3aGlsZSB0aGUgbWVudSBpcyBvcGVuLCB1bmxlc3MgbmV0cGxheSBpcyBhY3RpdmVcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uZXRwbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgaW5wdXRzIG9uIHRoZSBtZW51IGZyb20gYmVpbmcgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGdhbWVcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBuZXcgSW5wdXRTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gUGF1c2UgdXBkYXRlcyBhbmQgcmVuZGVyaW5nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY2FsbGVkVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIFByZXZlbnQgdGltZUZyYW1lU3RhcnQgZnJvbSBnZXR0aW5nIHRvbyBmYXIgYWhlYWQgYW5kIGRlYXRoIHNwaXJhbGxpbmdcbiAgICAgICAgICAgIGlmICh0aW1lRnJhbWVTdGFydCAtIHRpbWVOZXh0VXBkYXRlID49IDIwMCkge1xuICAgICAgICAgICAgICAgIHRpbWVOZXh0VXBkYXRlID0gdGltZUZyYW1lU3RhcnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlICh0aW1lRnJhbWVTdGFydCA+PSB0aW1lTmV4dFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRpbWVOZXh0VXBkYXRlICs9IDEwMDAvNjA7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uZXRwbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5ldHBsYXkudXBkYXRlKGlucHV0LmdhbWVwYWRbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBQYXNzIGlucHV0cyBpbnRvIHJ1bnRpbWUgbWVtb3J5XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBsYXllcklkeCA9IDA7IHBsYXllcklkeCA8IDQ7ICsrcGxheWVySWR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lLnNldEdhbWVwYWQocGxheWVySWR4LCBpbnB1dC5nYW1lcGFkW3BsYXllcklkeF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJ1bnRpbWUuc2V0TW91c2UoaW5wdXQubW91c2VYLCBpbnB1dC5tb3VzZVksIGlucHV0Lm1vdXNlQnV0dG9ucyk7XG4gICAgICAgICAgICAgICAgICAgIHJ1bnRpbWUudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2FsbGVkVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlR2FtZXBhZE92ZXJsYXkgPSAhIXJ1bnRpbWUuZ2V0U3lzdGVtRmxhZyhjb25zdGFudHMuU1lTVEVNX0hJREVfR0FNRVBBRF9PVkVSTEFZKTtcblxuICAgICAgICAgICAgICAgIHJ1bnRpbWUuY29tcG9zaXRlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29uc3RhbnRzLkdBTUVERVZfTU9ERSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBGSVhFRCgyMDIzLTEyLTEzKTogUGFzcyB0aGUgY29ycmVjdCBGUFMgZm9yIGRpc3BsYXkgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc01hbmFnZXIudXBkYXRlQ29tcGxldGVkKHJ1bnRpbWUsIHRpbWVGcmFtZVN0YXJ0IC0gbGFzdFRpbWVGcmFtZVN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRpbWVGcmFtZVN0YXJ0ID0gdGltZUZyYW1lU3RhcnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShvbkZyYW1lKTtcbiAgICB9XG5cbiAgICBvbk1lbnVCdXR0b25QcmVzc2VkICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvd01lbnUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBwYXVzZSBtZW51IGlzIGFscmVhZHkgb3BlbiwgdHJlYXQgaXQgYXMgYW4gWCBidXR0b25cbiAgICAgICAgICAgIHRoaXMuaW5wdXRTdGF0ZS5nYW1lcGFkWzBdIHw9IGNvbnN0YW50cy5CVVRUT05fWDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd01lbnUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VNZW51ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvd01lbnUpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd01lbnUgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gS2luZCBvZiBhIGhhY2sgdG8gcHJldmVudCB0aGUgYnV0dG9uIHByZXNzIHRvIGNsb3NlIHRoZSBtZW51IGZyb20gYmVpbmcgcGFzc2VkXG4gICAgICAgICAgICAvLyB0aHJvdWdoIHRvIHRoZSBnYW1lXG4gICAgICAgICAgICBmb3IgKGxldCBwbGF5ZXJJZHggPSAwOyBwbGF5ZXJJZHggPCA0OyArK3BsYXllcklkeCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRTdGF0ZS5nYW1lcGFkW3BsYXllcklkeF0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2F2ZUdhbWVTdGF0ZSAoKSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc2F2ZWRHYW1lU3RhdGU7XG4gICAgICAgIGlmIChzdGF0ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IHRoaXMuc2F2ZWRHYW1lU3RhdGUgPSBuZXcgU3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5yZWFkKHRoaXMucnVudGltZSk7XG5cbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnNob3coXCJTdGF0ZSBzYXZlZFwiKTtcbiAgICB9XG5cbiAgICBsb2FkR2FtZVN0YXRlICgpIHtcbiAgICAgICAgaWYgKHRoaXMubmV0cGxheSkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnNob3coXCJTdGF0ZSBsb2FkaW5nIGRpc2FibGVkIGR1cmluZyBuZXRwbGF5XCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnNhdmVkR2FtZVN0YXRlO1xuICAgICAgICBpZiAoc3RhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhdGUud3JpdGUodGhpcy5ydW50aW1lKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5zaG93KFwiU3RhdGUgbG9hZGVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnNob3coXCJOZWVkIHRvIHNhdmUgYSBzdGF0ZSBmaXJzdFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydEdhbWVEaXNrICgpIHtcbiAgICAgICAgaWYodGhpcy5ydW50aW1lLmRpc2tTaXplIDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5zaG93KFwiRGlzayBpcyBlbXB0eVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRpc2sgPSBuZXcgVWludDhBcnJheSh0aGlzLnJ1bnRpbWUuZGlza0J1ZmZlcikuc2xpY2UoMCwgdGhpcy5ydW50aW1lLmRpc2tTaXplKTtcbiAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtkaXNrXSwgeyB0eXBlOiBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiIH0pO1xuICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG5cbiAgICAgICAgbGluay5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIGxpbmsuZG93bmxvYWQgPSBgJHt0aGlzLmRpc2tQcmVmaXh9LmRpc2tgO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgfVxuXG4gICAgaW1wb3J0R2FtZURpc2sgKCkge1xuICAgICAgICBpZiAodGhpcy5uZXRwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMuc2hvdyhcIkRpc2sgaW1wb3J0aW5nIGRpc2FibGVkIGR1cmluZyBuZXRwbGF5XCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXBwID0gdGhpcztcbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cbiAgICAgICAgaW5wdXQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICBpbnB1dC50eXBlID0gXCJmaWxlXCI7XG4gICAgICAgIGlucHV0LmFjY2VwdCA9IFwiLmRpc2tcIjtcbiAgICAgICAgaW5wdXQubXVsdGlwbGUgPSBmYWxzZTtcblxuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVzID0gaW5wdXQuZmlsZXMgYXMgRmlsZUxpc3Q7XG4gICAgICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkocmVhZGVyLnJlc3VsdCBhcyBBcnJheUJ1ZmZlcikuc2xpY2UoMCwgY29uc3RhbnRzLlNUT1JBR0VfU0laRSk7XG4gICAgICAgICAgICAgICAgbGV0IGRpc2sgPSBuZXcgVWludDhBcnJheShjb25zdGFudHMuU1RPUkFHRV9TSVpFKTtcblxuICAgICAgICAgICAgICAgIGRpc2suc2V0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgYXBwLnJ1bnRpbWUuZGlza0J1ZmZlciA9IGRpc2suYnVmZmVyO1xuICAgICAgICAgICAgICAgIHRoaXMucnVudGltZS5kaXNrU2l6ZSA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyID0gejg1LmVuY29kZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMucnVudGltZS5kaXNrTmFtZSwgc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwLm5vdGlmaWNhdGlvbnMuc2hvdyhcIkRpc2sgaW1wb3J0ZWRcIik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwLm5vdGlmaWNhdGlvbnMuc2hvdyhcIkVycm9yIGltcG9ydGluZyBkaXNrXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW1wb3J0aW5nIGRpc2tcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFwcC5jbG9zZU1lbnUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZXNbMF0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICAgICAgaW5wdXQuY2xpY2soKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpbnB1dCk7XG4gICAgfVxuXG4gICAgY2xlYXJHYW1lRGlzayAoKSB7XG4gICAgICAgIGlmICh0aGlzLm5ldHBsYXkpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5zaG93KFwiRGlzayBjbGVhcmluZyBkaXNhYmxlZCBkdXJpbmcgbmV0cGxheVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucnVudGltZS5kaXNrQnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGNvbnN0YW50cy5TVE9SQUdFX1NJWkUpO1xuICAgICAgICB0aGlzLnJ1bnRpbWUuZGlza1NpemUgPSAwO1xuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMucnVudGltZS5kaXNrTmFtZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMuc2hvdyhcIkVycm9yIGNsZWFyaW5nIGRpc2tcIik7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY2xlYXJpbmcgZGlza1wiLCBlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMuc2hvdyhcIkRpc2sgY2xlYXJlZFwiKTtcbiAgICB9XG5cbiAgICBhc3luYyBjb3B5TmV0cGxheUxpbmsgKCkge1xuICAgICAgICBpZiAoIXRoaXMubmV0cGxheSkge1xuICAgICAgICAgICAgdGhpcy5uZXRwbGF5ID0gdGhpcy5jcmVhdGVOZXRwbGF5KCk7XG4gICAgICAgICAgICB0aGlzLm5ldHBsYXkuaG9zdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXRpbHMuY29weVRvQ2xpcGJvYXJkKGF3YWl0IHRoaXMubmV0cGxheS5nZXRJbnZpdGVMaW5rKCkpO1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMuc2hvdyhcIk5ldHBsYXkgbGluayBjb3BpZWQgdG8gY2xpcGJvYXJkXCIpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlc2V0Q2FydCAod2FzbUJ1ZmZlcj86IFVpbnQ4QXJyYXksIHByZXNlcnZlU3RhdGU6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5uZXRwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMuc2hvdyhcIlJlc2V0IGRpc2FibGVkIGR1cmluZyBuZXRwbGF5XCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF3YXNtQnVmZmVyKSB7XG4gICAgICAgICAgICB3YXNtQnVmZmVyID0gdGhpcy5ydW50aW1lLndhc21CdWZmZXIhO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0YXRlO1xuICAgICAgICBpZiAocHJlc2VydmVTdGF0ZSkge1xuICAgICAgICAgICAgLy8gVGFrZSBhIHNuYXBzaG90XG4gICAgICAgICAgICBzdGF0ZSA9IG5ldyBTdGF0ZSgpO1xuICAgICAgICAgICAgc3RhdGUucmVhZCh0aGlzLnJ1bnRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucnVudGltZS5yZXNldCh0cnVlKTtcblxuXG4gICAgICAgIHRoaXMucnVudGltZS5wYXVzZVN0YXRlIHw9IGNvbnN0YW50cy5QQVVTRV9SRUJPT1RJTkc7XG4gICAgICAgIGF3YWl0IHRoaXMucnVudGltZS5sb2FkKHdhc21CdWZmZXIpO1xuICAgICAgICB0aGlzLnJ1bnRpbWUucGF1c2VTdGF0ZSAmPSB+Y29uc3RhbnRzLlBBVVNFX1JFQk9PVElORztcblxuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIC8vIFJlc3RvcmUgdGhlIHByZXZpb3VzIHNuYXBzaG90XG4gICAgICAgICAgICBzdGF0ZS53cml0ZSh0aGlzLnJ1bnRpbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ydW50aW1lLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZU5ldHBsYXkgKCk6IE5ldHBsYXkge1xuICAgICAgICBjb25zdCBuZXRwbGF5ID0gbmV3IE5ldHBsYXkodGhpcy5ydW50aW1lKTtcbiAgICAgICAgbmV0cGxheS5vbnN0YXJ0ID0gcGxheWVySWR4ID0+IHRoaXMubm90aWZpY2F0aW9ucy5zaG93KGBKb2luZWQgYXMgcGxheWVyICR7cGxheWVySWR4KzF9YCk7XG4gICAgICAgIG5ldHBsYXkub25qb2luID0gcGxheWVySWR4ID0+IHRoaXMubm90aWZpY2F0aW9ucy5zaG93KGBQbGF5ZXIgJHtwbGF5ZXJJZHgrMX0gam9pbmVkYCk7XG4gICAgICAgIG5ldHBsYXkub25sZWF2ZSA9IHBsYXllcklkeCA9PiB0aGlzLm5vdGlmaWNhdGlvbnMuc2hvdyhgUGxheWVyICR7cGxheWVySWR4KzF9IGxlZnRgKTtcbiAgICAgICAgcmV0dXJuIG5ldHBsYXk7XG4gICAgfVxuXG4gICAgZ2V0TmV0cGxheVN1bW1hcnkgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXRwbGF5ID8gdGhpcy5uZXRwbGF5LmdldFN1bW1hcnkoKSA6IFtdO1xuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrICgpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLm9uUG9pbnRlclVwKTtcbiAgICB9XG5cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjayAoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMub25Qb2ludGVyVXApO1xuXG4gICAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyICgpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxuICAgICAgICAgICAgICAgICR7dGhpcy5zaG93TWVudSA/IGh0bWxgPHdhc200LW1lbnUtb3ZlcmxheSAuYXBwPSR7dGhpc30gLz5gOiBcIlwifVxuICAgICAgICAgICAgICAgIDx3YXNtNC1ub3RpZmljYXRpb25zPjwvd2FzbTQtbm90aWZpY2F0aW9ucz5cbiAgICAgICAgICAgICAgICAke3RoaXMucnVudGltZS5jYW52YXN9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICR7IXRoaXMuaGlkZUdhbWVwYWRPdmVybGF5ID8gaHRtbGA8d2FzbTQtdmlydHVhbC1nYW1lcGFkIC5hcHA9JHt0aGlzfSAvPmAgOiBcIlwifVxuICAgICAgICBgO1xuICAgIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBIVE1MRWxlbWVudFRhZ05hbWVNYXAge1xuICAgICAgICBcIndhc200LWFwcFwiOiBBcHA7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5mdW5jdGlvbipvKG8sZil7aWYodm9pZCAwIT09byl7bGV0IGk9MDtmb3IoY29uc3QgdCBvZiBvKXlpZWxkIGYodCxpKyspfX1leHBvcnR7byBhcyBtYXB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcFxuIiwiaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCwgY3NzIH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgc3RhdGUgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9tYXAuanMnO1xuXG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IG9wdGlvbkNvbnRleHQgPSB7XG4gICAgREVGQVVMVDogMCxcbiAgICBESVNLOiAxLFxufTtcblxuY29uc3Qgb3B0aW9uSW5kZXggPSBbXG4gICAge1xuICAgICAgICBDT05USU5VRTogMCxcbiAgICAgICAgU0FWRV9TVEFURTogMSxcbiAgICAgICAgTE9BRF9TVEFURTogMixcbiAgICAgICAgRElTS19PUFRJT05TOiAzLFxuICAgICAgICAvLyBPUFRJT05TOiBudWxsLFxuICAgICAgICBDT1BZX05FVFBMQVlfTElOSzogNCxcbiAgICAgICAgUkVTRVRfQ0FSVDogNSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgQkFDSzogMCxcbiAgICAgICAgRVhQT1JUX0RJU0s6IDEsXG4gICAgICAgIElNUE9SVF9ESVNLOiAyLFxuICAgICAgICBDTEVBUl9ESVNLOiAzLFxuICAgIH1cbl07XG5cbmNvbnN0IG9wdGlvbnMgPSBbXG4gICAgW1xuICAgICAgICBcIkNPTlRJTlVFXCIsXG4gICAgICAgIFwiU0FWRSBTVEFURVwiLFxuICAgICAgICBcIkxPQUQgU1RBVEVcIixcbiAgICAgICAgXCJESVNLIE9QVElPTlNcIixcbiAgICAgICAgLy8gXCJPUFRJT05TXCIsXG4gICAgICAgIFwiQ09QWSBORVRQTEFZIFVSTFwiLFxuICAgICAgICBcIlJFU0VUIENBUlRcIixcbiAgICBdLFxuICAgIFtcbiAgICAgICAgXCJCQUNLXCIsXG4gICAgICAgIFwiRVhQT1JUIERJU0tcIixcbiAgICAgICAgXCJJTVBPUlQgRElTS1wiLFxuICAgICAgICBcIkNMRUFSIERJU0tcIixcbiAgICBdXG5dO1xuXG5AY3VzdG9tRWxlbWVudChcIndhc200LW1lbnUtb3ZlcmxheVwiKVxuZXhwb3J0IGNsYXNzIE1lbnVPdmVybGF5IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgc3RhdGljIHN0eWxlcyA9IGNzc2BcbiAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgd2lkdGg6IDEwMHZtaW47XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMHZtaW47XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgICAgICAgICAgIGNvbG9yOiAjYTBhMGEwO1xuICAgICAgICAgICAgZm9udDogMTZweCB3YXNtNC1mb250O1xuXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjg1KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC52ZXJzaW9uIHtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDFlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5tZW51IHtcbiAgICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICNmMGYwZjA7XG4gICAgICAgICAgICBwYWRkaW5nOiAwIDFlbSAwIDFlbTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyZW07XG4gICAgICAgIH1cblxuICAgICAgICAubmV0cGxheS1zdW1tYXJ5IHtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDJlbTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjVlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5waW5nLXlvdSB7XG4gICAgICAgICAgICBjb2xvcjogI2YwZjBmMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5waW5nLWdvb2Qge1xuICAgICAgICAgICAgY29sb3I6IGdyZWVuO1xuICAgICAgICB9XG5cbiAgICAgICAgLnBpbmctb2sge1xuICAgICAgICAgICAgY29sb3I6IHllbGxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIC5waW5nLWJhZCB7XG4gICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdWwge1xuICAgICAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDFlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpOjpiZWZvcmUge1xuICAgICAgICAgICAgY29udGVudDogXCJcXFxcMDBhMFxcXFwwMGEwXCI7XG4gICAgICAgIH1cbiAgICAgICAgbGkuc2VsZWN0ZWQ6OmJlZm9yZSB7XG4gICAgICAgICAgICBjb250ZW50OiBcIj4gXCI7XG4gICAgICAgIH1cbiAgICAgICAgbGkuc2VsZWN0ZWQge1xuICAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIH1cbiAgICBgO1xuXG4gICAgYXBwITogQXBwO1xuXG4gICAgcHJpdmF0ZSBsYXN0R2FtZXBhZCA9IDA7XG5cbiAgICBAc3RhdGUoKSBwcml2YXRlIHNlbGVjdGVkSWR4ID0gMDtcbiAgICBAc3RhdGUoKSBwcml2YXRlIG5ldHBsYXlTdW1tYXJ5OiB7IHBsYXllcklkeDogbnVtYmVyLCBwaW5nOiBudW1iZXIgfVtdID0gW107XG5cbiAgICBwcml2YXRlIG5ldHBsYXlQb2xsSW50ZXJ2YWw/OiBudW1iZXI7XG5cbiAgICBwcml2YXRlIG9wdGlvbkNvbnRleHQ6IG51bWJlciA9IDA7XG5cbiAgICBwcml2YXRlIG9wdGlvbkNvbnRleHRIaXN0b3J5OiB7Y29udGV4dDogbnVtYmVyLCBpbmRleDogbnVtYmVyfVtdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgZ2V0IG9wdGlvbkluZGV4ICgpOiBhbnkge1xuICAgICAgICByZXR1cm4gb3B0aW9uSW5kZXhbdGhpcy5vcHRpb25Db250ZXh0XTtcbiAgICB9XG5cbiAgICBnZXQgb3B0aW9ucyAoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gb3B0aW9uc1t0aGlzLm9wdGlvbkNvbnRleHRdO1xuICAgIH1cblxuICAgIHByZXZpb3VzQ29udGV4dCAoKSB7XG4gICAgICAgIGlmKHRoaXMub3B0aW9uQ29udGV4dEhpc3RvcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNDb250ZXh0ID0gdGhpcy5vcHRpb25Db250ZXh0SGlzdG9yeS5wb3AoKSBhcyB7Y29udGV4dDogbnVtYmVyLCBpbmRleDogbnVtYmVyfTtcblxuICAgICAgICAgICAgdGhpcy5yZXNldElucHV0KCk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbkNvbnRleHQgPSBwcmV2aW91c0NvbnRleHQuY29udGV4dDtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJZHggPSBwcmV2aW91c0NvbnRleHQuaW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2hDb250ZXh0IChjb250ZXh0OiBudW1iZXIsIGluZGV4OiBudW1iZXIgPSAwKSB7XG4gICAgICAgIHRoaXMub3B0aW9uQ29udGV4dEhpc3RvcnkucHVzaCh7XG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzLm9wdGlvbkNvbnRleHQsIFxuICAgICAgICAgICAgaW5kZXg6IHRoaXMuc2VsZWN0ZWRJZHhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5yZXNldElucHV0KCk7XG4gICAgICAgIHRoaXMub3B0aW9uQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJZHggPSBpbmRleDtcbiAgICB9XG5cbiAgICByZXNldElucHV0ICgpIHtcbiAgICAgICAgdGhpcy5hcHAuaW5wdXRTdGF0ZS5nYW1lcGFkWzBdID0gMDtcbiAgICB9XG5cbiAgICBhcHBseUlucHV0ICgpIHtcbiAgICAgICAgLy8gTWl4IGFsbCBwbGF5ZXIncyBnYW1lcGFkcyB0b2dldGhlciBmb3IgdGhlIHB1cnBvc2VzIG9mIG1lbnUgaW5wdXRcbiAgICAgICAgbGV0IGdhbWVwYWQgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IHBsYXllciBvZiB0aGlzLmFwcC5pbnB1dFN0YXRlLmdhbWVwYWQpIHtcbiAgICAgICAgICAgIGdhbWVwYWQgfD0gcGxheWVyO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJlc3NlZFRoaXNGcmFtZSA9IGdhbWVwYWQgJiAoZ2FtZXBhZCBeIHRoaXMubGFzdEdhbWVwYWQpO1xuICAgICAgICB0aGlzLmxhc3RHYW1lcGFkID0gZ2FtZXBhZDtcblxuICAgICAgICBpZiAocHJlc3NlZFRoaXNGcmFtZSAmIChjb25zdGFudHMuQlVUVE9OX1ggfCBjb25zdGFudHMuQlVUVE9OX1opKSB7XG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbkNvbnRleHQgPT09IG9wdGlvbkNvbnRleHQuREVGQVVMVCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zZWxlY3RlZElkeCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHRoaXMub3B0aW9uSW5kZXguQ09OVElOVUU6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5jbG9zZU1lbnUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHRoaXMub3B0aW9uSW5kZXguU0FWRV9TVEFURTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnNhdmVHYW1lU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNsb3NlTWVudSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5vcHRpb25JbmRleC5MT0FEX1NUQVRFOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAubG9hZEdhbWVTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuY2xvc2VNZW51KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0aGlzLm9wdGlvbkluZGV4LkRJU0tfT1BUSU9OUzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoQ29udGV4dChvcHRpb25Db250ZXh0LkRJU0spO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5vcHRpb25JbmRleC5DT1BZX05FVFBMQVlfTElOSzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNvcHlOZXRwbGF5TGluaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuY2xvc2VNZW51KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0aGlzLm9wdGlvbkluZGV4LlJFU0VUX0NBUlQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5yZXNldENhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNsb3NlTWVudSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZih0aGlzLm9wdGlvbkNvbnRleHQgPT09IG9wdGlvbkNvbnRleHQuRElTSykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zZWxlY3RlZElkeCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHRoaXMub3B0aW9uSW5kZXguQkFDSzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSB0aGlzLm9wdGlvbkluZGV4LkVYUE9SVF9ESVNLOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuZXhwb3J0R2FtZURpc2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNsb3NlTWVudSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5vcHRpb25JbmRleC5JTVBPUlRfRElTSzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRJbnB1dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuaW1wb3J0R2FtZURpc2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHRoaXMub3B0aW9uSW5kZXguQ0xFQVJfRElTSzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNsZWFyR2FtZURpc2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNsb3NlTWVudSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXNzZWRUaGlzRnJhbWUgJiBjb25zdGFudHMuQlVUVE9OX0RPV04pIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJZHgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlc3NlZFRoaXNGcmFtZSAmIGNvbnN0YW50cy5CVVRUT05fVVApIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJZHgtLTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGVkSWR4ID0gKHRoaXMuc2VsZWN0ZWRJZHggKyB0aGlzLm9wdGlvbnMubGVuZ3RoKSAlIHRoaXMub3B0aW9ucy5sZW5ndGg7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuXG4gICAgICAgIGNvbnN0IHVwZGF0ZU5ldHBsYXlTdW1tYXJ5ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5uZXRwbGF5U3VtbWFyeSA9IHRoaXMuYXBwLmdldE5ldHBsYXlTdW1tYXJ5KCk7XG4gICAgICAgIH07XG4gICAgICAgIHVwZGF0ZU5ldHBsYXlTdW1tYXJ5KCk7XG4gICAgICAgIHRoaXMubmV0cGxheVBvbGxJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh1cGRhdGVOZXRwbGF5U3VtbWFyeSwgMTAwMCk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLm5ldHBsYXlQb2xsSW50ZXJ2YWwpO1xuXG4gICAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyICgpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmVyc2lvblwiPlxuICAgICAgICAgICAgICAgIFdBU00tNCB2JHtXQVNNNF9WRVJTSU9OfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVudVwiPlxuICAgICAgICAgICAgICAgIDx1bCBzdHlsZT1cImRpc3BsYXk6JHt0aGlzLm9wdGlvbkNvbnRleHQgPT09IG9wdGlvbkNvbnRleHQuREVGQVVMVD8gXCJpbmhlcml0XCI6IFwibm9uZVwifVwiPlxuICAgICAgICAgICAgICAgICAgICAke21hcChvcHRpb25zW29wdGlvbkNvbnRleHQuREVGQVVMVF0sIChvcHRpb24sIGlkeCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxgPGxpIGNsYXNzPVwiJHt0aGlzLnNlbGVjdGVkSWR4ID09IGlkeCA/IFwic2VsZWN0ZWRcIiA6IFwiXCJ9XCJ9PiR7b3B0aW9ufTwvbGk+YCl9XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICA8dWwgc3R5bGU9XCJkaXNwbGF5OiR7dGhpcy5vcHRpb25Db250ZXh0ID09PSBvcHRpb25Db250ZXh0LkRJU0s/IFwiaW5oZXJpdFwiOiBcIm5vbmVcIn1cIj5cbiAgICAgICAgICAgICAgICAgICAgJHttYXAob3B0aW9uc1tvcHRpb25Db250ZXh0LkRJU0tdLCAob3B0aW9uLCBpZHgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sYDxsaSBjbGFzcz1cIiR7dGhpcy5zZWxlY3RlZElkeCA9PSBpZHggPyBcInNlbGVjdGVkXCIgOiBcIlwifVwifT4ke29wdGlvbn08L2xpPmApfVxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuZXRwbGF5LXN1bW1hcnlcIj5cbiAgICAgICAgICAgICAgICAke21hcCh0aGlzLm5ldHBsYXlTdW1tYXJ5LCBwbGF5ZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaW5nQ2xhc3MgPSBwbGF5ZXIucGluZyA8IDEwMCA/IFwiZ29vZFwiIDogcGxheWVyLnBpbmcgPCAyMDAgPyBcIm9rXCIgOiBcImJhZFwiO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaW5nID0gKHBsYXllci5waW5nIDwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gaHRtbGA8c3BhbiBjbGFzcz1cInBpbmcteW91XCI+WU9VPC9zcGFuPmBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaHRtbGA8c3BhbiBjbGFzcz1cInBpbmctJHtwaW5nQ2xhc3N9XCI+JHtNYXRoLmNlaWwocGxheWVyLnBpbmcpfW1zPC9zcGFuPmA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBodG1sYDxkaXY+UExBWUVSICR7cGxheWVyLnBsYXllcklkeCA+PSAwID8gcGxheWVyLnBsYXllcklkeCsxIDogXCI/XCJ9ICR7cGluZ308L2Rpdj5gO1xuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEhUTUxFbGVtZW50VGFnTmFtZU1hcCB7XG4gICAgICAgIFwid2FzbTQtbWVudS1vdmVybGF5XCI6IE1lbnVPdmVybGF5O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IExpdEVsZW1lbnQsIGh0bWwsIGNzcyB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5LCBxdWVyeSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcblxuaW1wb3J0ICogYXMgY29uc3RhbnRzIGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcblxuZnVuY3Rpb24gc2V0Q2xhc3MgKGVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsLCBjbGFzc05hbWU6IHN0cmluZywgZW5hYmxlZDogYm9vbGVhbiB8IG51bWJlcikge1xuICAgIGlmKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZXF1ZXN0RnVsbHNjcmVlbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZXF1ZXN0RnVsbHNjcmVlbih7bmF2aWdhdGlvblVJOiBcImhpZGVcIn0pO1xuICAgIH1cbn1cblxuQGN1c3RvbUVsZW1lbnQoXCJ3YXNtNC12aXJ0dWFsLWdhbWVwYWRcIilcbmV4cG9ydCBjbGFzcyBWaXJ0dWFsR2FtZXBhZCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgQG1lZGlhIChob3Zlcjogbm9uZSkgb3IgKHBvaW50ZXI6IGNvYXJzZSkge1xuICAgICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGluaGVyaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAuZHBhZCB7XG4gICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHdpZHRoOiAzOXB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAxMjBweDtcbiAgICAgICAgICAgIGxlZnQ6IDY5cHg7XG4gICAgICAgICAgICBib3R0b206IDMwcHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjNDQ0O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOXB4O1xuICAgICAgICB9XG4gICAgICAgIC5kcGFkOmJlZm9yZSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB3aWR0aDogMTIwcHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDM5cHg7XG4gICAgICAgICAgICB0b3A6IDM5cHg7XG4gICAgICAgICAgICBsZWZ0OiAtMzlweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICM0NDQ7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA5cHg7XG4gICAgICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIC5kcGFkOmFmdGVyIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIGhlaWdodDogMzlweDtcbiAgICAgICAgICAgIHdpZHRoOiAzOXB4O1xuICAgICAgICAgICAgdG9wOiAzOXB4O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMzMzM7XG4gICAgICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIC5kcGFkLnByZXNzZWQtbGVmdDpiZWZvcmUge1xuICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjQTkzNjcxO1xuICAgICAgICAgICAgd2lkdGg6IDExNnB4O1xuICAgICAgICB9XG4gICAgICAgIC5kcGFkLnByZXNzZWQtcmlnaHQ6YmVmb3JlIHtcbiAgICAgICAgICAgIGJvcmRlci1yaWdodDogNHB4IHNvbGlkICNBOTM2NzE7XG4gICAgICAgICAgICB3aWR0aDogMTE2cHg7XG4gICAgICAgIH1cbiAgICAgICAgLmRwYWQucHJlc3NlZC11cCB7XG4gICAgICAgICAgICBib3JkZXItdG9wOiA0cHggc29saWQgI0E5MzY3MTtcbiAgICAgICAgfVxuICAgICAgICAuZHBhZC5wcmVzc2VkLWRvd24ge1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogNHB4IHNvbGlkICNBOTM2NzE7XG4gICAgICAgICAgICBoZWlnaHQ6IDExNnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLmFjdGlvbjEge1xuICAgICAgICAgICAgcmlnaHQ6IDgwcHg7XG4gICAgICAgICAgICBib3R0b206IDMwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLmFjdGlvbjIge1xuICAgICAgICAgICAgcmlnaHQ6IDMwcHg7XG4gICAgICAgICAgICBib3R0b206IDkwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLmFjdGlvbjEsIC5hY3Rpb24yIHtcbiAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDYwcHg7XG4gICAgICAgICAgICBib3JkZXI6IDRweCBzb2xpZCAjQTkzNjcxO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTBweDtcblxuICAgICAgICAgICAgLyoqIFRPRE8oMjAyMi0wMy0xNCk6IEJ1dHRvbiB0ZXh0IHNob3VsZCBiZSBjZW50ZXJlZCBidXQgaXMgb2ZmIHNsaWdodGx5LiAqL1xuICAgICAgICAgICAgY29sb3I6ICNBOTM2NzE7XG4gICAgICAgICAgICBmb250OiAyNHB4IHdhc200LWZvbnQ7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogNjBweDtcbiAgICAgICAgfVxuICAgICAgICAuYWN0aW9uMS5wcmVzc2VkLCAuYWN0aW9uMi5wcmVzc2VkIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNBOTM2NzE7XG4gICAgICAgIH1cblxuICAgICAgICAubWVudSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjNDQ0O1xuICAgICAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBib3R0b206IDIwMHB4O1xuICAgICAgICAgICAgcmlnaHQ6IDM1cHg7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgICB9XG4gICAgYDtcblxuICAgIGFwcCE6IEFwcDtcblxuICAgIEBxdWVyeShcIi5kcGFkXCIpIGRwYWQhOiBIVE1MRWxlbWVudDtcbiAgICBAcXVlcnkoXCIuYWN0aW9uMVwiKSBhY3Rpb24xITogSFRNTEVsZW1lbnQ7XG4gICAgQHF1ZXJ5KFwiLmFjdGlvbjJcIikgYWN0aW9uMiE6IEhUTUxFbGVtZW50O1xuXG4gICAgcmVhZG9ubHkgdG91Y2hFdmVudHMgPSBuZXcgTWFwKCk7XG5cbiAgICByZWFkb25seSBvblBvaW50ZXJFdmVudCA9IChldmVudDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5wb2ludGVyVHlwZSAhPSBcInRvdWNoXCIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlIFwicG9pbnRlcmRvd25cIjogY2FzZSBcInBvaW50ZXJtb3ZlXCI6XG4gICAgICAgICAgICB0aGlzLnRvdWNoRXZlbnRzLnNldChldmVudC5wb2ludGVySWQsIGV2ZW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhpcy50b3VjaEV2ZW50cy5kZWxldGUoZXZlbnQucG9pbnRlcklkKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGJ1dHRvbnMgPSAwO1xuICAgICAgICBpZiAodGhpcy50b3VjaEV2ZW50cy5zaXplKSB7XG4gICAgICAgICAgICBjb25zdCBEUEFEX01BWF9ESVNUQU5DRSA9IDEwMDtcbiAgICAgICAgICAgIGNvbnN0IERQQURfREVBRF9aT05FID0gMTA7XG4gICAgICAgICAgICBjb25zdCBCVVRUT05fTUFYX0RJU1RBTkNFID0gNTA7XG4gICAgICAgICAgICBjb25zdCBEUEFEX0FDVElWRV9aT05FID0gMyAvIDU7IC8vIGNvcyBvZiBhY3RpdmUgYW5nbGUsIGdyZWF0ZXIgdGhhdCBjb3MgNjAgKDEvMilcblxuICAgICAgICAgICAgY29uc3QgZHBhZEJvdW5kcyA9IHRoaXMuZHBhZCEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBjb25zdCBkcGFkWCA9IGRwYWRCb3VuZHMueCArIGRwYWRCb3VuZHMud2lkdGgvMjtcbiAgICAgICAgICAgIGNvbnN0IGRwYWRZID0gZHBhZEJvdW5kcy55ICsgZHBhZEJvdW5kcy5oZWlnaHQvMjtcblxuICAgICAgICAgICAgY29uc3QgYWN0aW9uMUJvdW5kcyA9IHRoaXMuYWN0aW9uMSEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb24xWCA9IGFjdGlvbjFCb3VuZHMueCArIGFjdGlvbjFCb3VuZHMud2lkdGgvMjtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbjFZID0gYWN0aW9uMUJvdW5kcy55ICsgYWN0aW9uMUJvdW5kcy5oZWlnaHQvMjtcblxuICAgICAgICAgICAgY29uc3QgYWN0aW9uMkJvdW5kcyA9IHRoaXMuYWN0aW9uMiEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb24yWCA9IGFjdGlvbjJCb3VuZHMueCArIGFjdGlvbjJCb3VuZHMud2lkdGgvMjtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbjJZID0gYWN0aW9uMkJvdW5kcy55ICsgYWN0aW9uMkJvdW5kcy5oZWlnaHQvMjtcblxuICAgICAgICAgICAgbGV0IHgsIHksIGRpc3QsIGNvc1gsIGNvc1k7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRvdWNoIG9mIHRoaXMudG91Y2hFdmVudHMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICB4ID0gdG91Y2guY2xpZW50WCAtIGRwYWRYO1xuICAgICAgICAgICAgICAgIHkgPSB0b3VjaC5jbGllbnRZIC0gZHBhZFk7XG4gICAgICAgICAgICAgICAgZGlzdCA9IE1hdGguc3FydCggeCp4ICsgeSAqIHkgKTtcblxuICAgICAgICAgICAgICAgIGlmIChkaXN0IDwgRFBBRF9NQVhfRElTVEFOQ0UgJiYgZGlzdCA+IERQQURfREVBRF9aT05FKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvc1ggPSB4IC8gZGlzdDtcbiAgICAgICAgICAgICAgICAgICAgY29zWSA9IHkgLyBkaXN0O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgtY29zWCA+IERQQURfQUNUSVZFX1pPTkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMgfD0gY29uc3RhbnRzLkJVVFRPTl9MRUZUO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvc1ggPiBEUEFEX0FDVElWRV9aT05FKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zIHw9IGNvbnN0YW50cy5CVVRUT05fUklHSFQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKC1jb3NZID4gRFBBRF9BQ1RJVkVfWk9ORSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9ucyB8PSBjb25zdGFudHMuQlVUVE9OX1VQO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvc1kgPiBEUEFEX0FDVElWRV9aT05FKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zIHw9IGNvbnN0YW50cy5CVVRUT05fRE9XTjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHggPSB0b3VjaC5jbGllbnRYIC0gYWN0aW9uMVg7XG4gICAgICAgICAgICAgICAgeSA9IHRvdWNoLmNsaWVudFkgLSBhY3Rpb24xWTtcbiAgICAgICAgICAgICAgICBpZiAoeCp4ICsgeSp5IDwgQlVUVE9OX01BWF9ESVNUQU5DRSpCVVRUT05fTUFYX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMgfD0gY29uc3RhbnRzLkJVVFRPTl9YO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHggPSB0b3VjaC5jbGllbnRYIC0gYWN0aW9uMlg7XG4gICAgICAgICAgICAgICAgeSA9IHRvdWNoLmNsaWVudFkgLSBhY3Rpb24yWTtcbiAgICAgICAgICAgICAgICBpZiAoeCp4ICsgeSp5IDwgQlVUVE9OX01BWF9ESVNUQU5DRSpCVVRUT05fTUFYX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMgfD0gY29uc3RhbnRzLkJVVFRPTl9aO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNldENsYXNzKHRoaXMuYWN0aW9uMSwgXCJwcmVzc2VkXCIsIGJ1dHRvbnMgJiBjb25zdGFudHMuQlVUVE9OX1gpO1xuICAgICAgICBzZXRDbGFzcyh0aGlzLmFjdGlvbjIsIFwicHJlc3NlZFwiLCBidXR0b25zICYgY29uc3RhbnRzLkJVVFRPTl9aKTtcbiAgICAgICAgc2V0Q2xhc3ModGhpcy5kcGFkLCBcInByZXNzZWQtbGVmdFwiLCBidXR0b25zICYgY29uc3RhbnRzLkJVVFRPTl9MRUZUKTtcbiAgICAgICAgc2V0Q2xhc3ModGhpcy5kcGFkLCBcInByZXNzZWQtcmlnaHRcIiwgYnV0dG9ucyAmIGNvbnN0YW50cy5CVVRUT05fUklHSFQpO1xuICAgICAgICBzZXRDbGFzcyh0aGlzLmRwYWQsIFwicHJlc3NlZC11cFwiLCBidXR0b25zICYgY29uc3RhbnRzLkJVVFRPTl9VUCk7XG4gICAgICAgIHNldENsYXNzKHRoaXMuZHBhZCwgXCJwcmVzc2VkLWRvd25cIiwgYnV0dG9ucyAmIGNvbnN0YW50cy5CVVRUT05fRE9XTik7XG5cbiAgICAgICAgdGhpcy5hcHAuaW5wdXRTdGF0ZS5nYW1lcGFkWzBdID0gYnV0dG9ucztcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjayAoKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyY2FuY2VsXCIsIHRoaXMub25Qb2ludGVyRXZlbnQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMub25Qb2ludGVyRXZlbnQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMub25Qb2ludGVyRXZlbnQpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLm9uUG9pbnRlckV2ZW50KTtcbiAgICB9XG5cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjayAoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmNhbmNlbFwiLCB0aGlzLm9uUG9pbnRlckV2ZW50KTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCB0aGlzLm9uUG9pbnRlckV2ZW50KTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCB0aGlzLm9uUG9pbnRlckV2ZW50KTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgdGhpcy5vblBvaW50ZXJFdmVudCk7XG5cbiAgICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBvbk1lbnVCdXR0b25QcmVzc2VkIChldmVudDogRXZlbnQpIHtcbiAgICAgICAgdGhpcy5hcHAub25NZW51QnV0dG9uUHJlc3NlZCgpO1xuXG4gICAgICAgIC8vIFByZXZlbnQgdGhlIHdpbmRvdyBoYW5kbGVyIGZyb20gY2xlYXJpbmcgb3VyIG1lbnUgY2xvc2UgYnV0dG9uIHByZXNzXG4gICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lbnVcIiBAcG9pbnRlcmRvd249XCIke3RoaXMub25NZW51QnV0dG9uUHJlc3NlZH1cIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcGFkXCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWN0aW9uMVwiPlg8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhY3Rpb24yXCI+WjwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBIVE1MRWxlbWVudFRhZ05hbWVNYXAge1xuICAgICAgICBcIndhc200LXZpcnR1YWwtZ2FtZXBhZFwiOiBWaXJ0dWFsR2FtZXBhZDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBodG1sLCBjc3MgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBzdGF0ZSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcblxuQGN1c3RvbUVsZW1lbnQoXCJ3YXNtNC1ub3RpZmljYXRpb25zXCIpXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9ucyBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDB2bWluO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDB2bWluO1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5cbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgZm9udDogMjRweCB3YXNtNC1mb250O1xuXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5ub3RpZmljYXRpb24ge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjg1KTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAuNWVtO1xuICAgICAgICAgICAgLyogYW5pbWF0aW9uOiBhcHBlYXIgMC41cyBlYXNlLW91dCwgZGlzYXBwZWFyIDAuNXMgNC41cyBlYXNlLWluOyAqL1xuICAgICAgICAgICAgLyogYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7ICovXG4gICAgICAgICAgICBhbmltYXRpb246IGFwcGVhciAwLjVzIGVhc2Utb3V0O1xuICAgICAgICB9XG5cbiAgICAgICAgQGtleWZyYW1lcyBhcHBlYXIge1xuICAgICAgICAgICAgZnJvbSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAyZW07XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMC41ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKkBrZXlmcmFtZXMgZGlzYXBwZWFyIHtcbiAgICAgICAgICAgIGZyb20ge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0byB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSovXG4gICAgYDtcblxuICAgIEBzdGF0ZSgpIHByaXZhdGUgbm90aWZpY2F0aW9uczogc3RyaW5nW10gPSBbXTtcblxuICAgIHNob3cgKHRleHQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMgPSB0aGlzLm5vdGlmaWNhdGlvbnMuY29uY2F0KFt0ZXh0XSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zID0gdGhpcy5ub3RpZmljYXRpb25zLnNsaWNlKDEpO1xuICAgICAgICB9LCA1MDAwKTtcbiAgICB9XG5cbiAgICByZW5kZXIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25zLm1hcCh0ZXh0ID0+IGh0bWxgPGRpdiBjbGFzcz1cIm5vdGlmaWNhdGlvblwiPiR7dGV4dH08L2Rpdj5gKTtcbiAgICB9XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgSFRNTEVsZW1lbnRUYWdOYW1lTWFwIHtcbiAgICAgICAgXCJ3YXNtNC1ub3RpZmljYXRpb25zXCI6IE5vdGlmaWNhdGlvbnM7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PXtBVFRSSUJVVEU6MSxDSElMRDoyLFBST1BFUlRZOjMsQk9PTEVBTl9BVFRSSUJVVEU6NCxFVkVOVDo1LEVMRU1FTlQ6Nn0sZT10PT4oLi4uZSk9Pih7XyRsaXREaXJlY3RpdmUkOnQsdmFsdWVzOmV9KTtjbGFzcyBpe2NvbnN0cnVjdG9yKHQpe31nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFUKHQsZSxpKXt0aGlzLl8kQ3Q9dCx0aGlzLl8kQU09ZSx0aGlzLl8kQ2k9aX1fJEFTKHQsZSl7cmV0dXJuIHRoaXMudXBkYXRlKHQsZSl9dXBkYXRlKHQsZSl7cmV0dXJuIHRoaXMucmVuZGVyKC4uLmUpfX1leHBvcnR7aSBhcyBEaXJlY3RpdmUsdCBhcyBQYXJ0VHlwZSxlIGFzIGRpcmVjdGl2ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmUuanMubWFwXG4iLCJpbXBvcnR7bm9DaGFuZ2UgYXMgdH1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtkaXJlY3RpdmUgYXMgcyxEaXJlY3RpdmUgYXMgaSxQYXJ0VHlwZSBhcyByfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3QgZT1zKGNsYXNzIGV4dGVuZHMgaXtjb25zdHJ1Y3Rvcih0KXtpZihzdXBlcih0KSx0LnR5cGUhPT1yLkFUVFJJQlVURXx8XCJjbGFzc1wiIT09dC5uYW1lfHx0LnN0cmluZ3M/Lmxlbmd0aD4yKXRocm93IEVycm9yKFwiYGNsYXNzTWFwKClgIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGBjbGFzc2AgYXR0cmlidXRlIGFuZCBtdXN0IGJlIHRoZSBvbmx5IHBhcnQgaW4gdGhlIGF0dHJpYnV0ZS5cIil9cmVuZGVyKHQpe3JldHVyblwiIFwiK09iamVjdC5rZXlzKHQpLmZpbHRlcigocz0+dFtzXSkpLmpvaW4oXCIgXCIpK1wiIFwifXVwZGF0ZShzLFtpXSl7aWYodm9pZCAwPT09dGhpcy5zdCl7dGhpcy5zdD1uZXcgU2V0LHZvaWQgMCE9PXMuc3RyaW5ncyYmKHRoaXMubnQ9bmV3IFNldChzLnN0cmluZ3Muam9pbihcIiBcIikuc3BsaXQoL1xccy8pLmZpbHRlcigodD0+XCJcIiE9PXQpKSkpO2Zvcihjb25zdCB0IGluIGkpaVt0XSYmIXRoaXMubnQ/Lmhhcyh0KSYmdGhpcy5zdC5hZGQodCk7cmV0dXJuIHRoaXMucmVuZGVyKGkpfWNvbnN0IHI9cy5lbGVtZW50LmNsYXNzTGlzdDtmb3IoY29uc3QgdCBvZiB0aGlzLnN0KXQgaW4gaXx8KHIucmVtb3ZlKHQpLHRoaXMuc3QuZGVsZXRlKHQpKTtmb3IoY29uc3QgdCBpbiBpKXtjb25zdCBzPSEhaVt0XTtzPT09dGhpcy5zdC5oYXModCl8fHRoaXMubnQ/Lmhhcyh0KXx8KHM/KHIuYWRkKHQpLHRoaXMuc3QuYWRkKHQpKTooci5yZW1vdmUodCksdGhpcy5zdC5kZWxldGUodCkpKX1yZXR1cm4gdH19KTtleHBvcnR7ZSBhcyBjbGFzc01hcH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFzcy1tYXAuanMubWFwXG4iLCJpbXBvcnR7XyRMSCBhcyBvfWZyb21cIi4vbGl0LWh0bWwuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0e0k6dH09byxpPW89Pm51bGw9PT1vfHxcIm9iamVjdFwiIT10eXBlb2YgbyYmXCJmdW5jdGlvblwiIT10eXBlb2YgbyxuPXtIVE1MOjEsU1ZHOjJ9LGU9KG8sdCk9PnZvaWQgMD09PXQ/dm9pZCAwIT09bz8uXyRsaXRUeXBlJDpvPy5fJGxpdFR5cGUkPT09dCxsPW89Pm51bGwhPW8/Ll8kbGl0VHlwZSQ/LmgsYz1vPT52b2lkIDAhPT1vPy5fJGxpdERpcmVjdGl2ZSQsZD1vPT5vPy5fJGxpdERpcmVjdGl2ZSQsZj1vPT52b2lkIDA9PT1vLnN0cmluZ3Mscz0oKT0+ZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSxyPShvLGksbik9Pntjb25zdCBlPW8uXyRBQS5wYXJlbnROb2RlLGw9dm9pZCAwPT09aT9vLl8kQUI6aS5fJEFBO2lmKHZvaWQgMD09PW4pe2NvbnN0IGk9ZS5pbnNlcnRCZWZvcmUocygpLGwpLGM9ZS5pbnNlcnRCZWZvcmUocygpLGwpO249bmV3IHQoaSxjLG8sby5vcHRpb25zKX1lbHNle2NvbnN0IHQ9bi5fJEFCLm5leHRTaWJsaW5nLGk9bi5fJEFNLGM9aSE9PW87aWYoYyl7bGV0IHQ7bi5fJEFRPy4obyksbi5fJEFNPW8sdm9pZCAwIT09bi5fJEFQJiYodD1vLl8kQVUpIT09aS5fJEFVJiZuLl8kQVAodCl9aWYodCE9PWx8fGMpe2xldCBvPW4uXyRBQTtmb3IoO28hPT10Oyl7Y29uc3QgdD1vLm5leHRTaWJsaW5nO2UuaW5zZXJ0QmVmb3JlKG8sbCksbz10fX19cmV0dXJuIG59LHY9KG8sdCxpPW8pPT4oby5fJEFJKHQsaSksbyksdT17fSxtPShvLHQ9dSk9Pm8uXyRBSD10LHA9bz0+by5fJEFILGg9bz0+e28uXyRBUD8uKCExLCEwKTtsZXQgdD1vLl8kQUE7Y29uc3QgaT1vLl8kQUIubmV4dFNpYmxpbmc7Zm9yKDt0IT09aTspe2NvbnN0IG89dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9b319LGo9bz0+e28uXyRBUigpfTtleHBvcnR7biBhcyBUZW1wbGF0ZVJlc3VsdFR5cGUsaiBhcyBjbGVhclBhcnQscCBhcyBnZXRDb21taXR0ZWRWYWx1ZSxkIGFzIGdldERpcmVjdGl2ZUNsYXNzLHIgYXMgaW5zZXJ0UGFydCxsIGFzIGlzQ29tcGlsZWRUZW1wbGF0ZVJlc3VsdCxjIGFzIGlzRGlyZWN0aXZlUmVzdWx0LGkgYXMgaXNQcmltaXRpdmUsZiBhcyBpc1NpbmdsZUV4cHJlc3Npb24sZSBhcyBpc1RlbXBsYXRlUmVzdWx0LGggYXMgcmVtb3ZlUGFydCx2IGFzIHNldENoaWxkUGFydFZhbHVlLG0gYXMgc2V0Q29tbWl0dGVkVmFsdWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLWhlbHBlcnMuanMubWFwXG4iLCJpbXBvcnR7bm9DaGFuZ2UgYXMgZX1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtkaXJlY3RpdmUgYXMgcyxEaXJlY3RpdmUgYXMgdCxQYXJ0VHlwZSBhcyByfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO2ltcG9ydHtnZXRDb21taXR0ZWRWYWx1ZSBhcyBsLHNldENoaWxkUGFydFZhbHVlIGFzIG8saW5zZXJ0UGFydCBhcyBpLHJlbW92ZVBhcnQgYXMgbixzZXRDb21taXR0ZWRWYWx1ZSBhcyBmfWZyb21cIi4uL2RpcmVjdGl2ZS1oZWxwZXJzLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHU9KGUscyx0KT0+e2NvbnN0IHI9bmV3IE1hcDtmb3IobGV0IGw9cztsPD10O2wrKylyLnNldChlW2xdLGwpO3JldHVybiByfSxjPXMoY2xhc3MgZXh0ZW5kcyB0e2NvbnN0cnVjdG9yKGUpe2lmKHN1cGVyKGUpLGUudHlwZSE9PXIuQ0hJTEQpdGhyb3cgRXJyb3IoXCJyZXBlYXQoKSBjYW4gb25seSBiZSB1c2VkIGluIHRleHQgZXhwcmVzc2lvbnNcIil9ZHQoZSxzLHQpe2xldCByO3ZvaWQgMD09PXQ/dD1zOnZvaWQgMCE9PXMmJihyPXMpO2NvbnN0IGw9W10sbz1bXTtsZXQgaT0wO2Zvcihjb25zdCBzIG9mIGUpbFtpXT1yP3IocyxpKTppLG9baV09dChzLGkpLGkrKztyZXR1cm57dmFsdWVzOm8sa2V5czpsfX1yZW5kZXIoZSxzLHQpe3JldHVybiB0aGlzLmR0KGUscyx0KS52YWx1ZXN9dXBkYXRlKHMsW3QscixjXSl7Y29uc3QgZD1sKHMpLHt2YWx1ZXM6cCxrZXlzOmF9PXRoaXMuZHQodCxyLGMpO2lmKCFBcnJheS5pc0FycmF5KGQpKXJldHVybiB0aGlzLnV0PWEscDtjb25zdCBoPXRoaXMudXQ/Pz1bXSx2PVtdO2xldCBtLHkseD0wLGo9ZC5sZW5ndGgtMSxrPTAsdz1wLmxlbmd0aC0xO2Zvcig7eDw9aiYmazw9dzspaWYobnVsbD09PWRbeF0peCsrO2Vsc2UgaWYobnVsbD09PWRbal0pai0tO2Vsc2UgaWYoaFt4XT09PWFba10pdltrXT1vKGRbeF0scFtrXSkseCsrLGsrKztlbHNlIGlmKGhbal09PT1hW3ddKXZbd109byhkW2pdLHBbd10pLGotLSx3LS07ZWxzZSBpZihoW3hdPT09YVt3XSl2W3ddPW8oZFt4XSxwW3ddKSxpKHMsdlt3KzFdLGRbeF0pLHgrKyx3LS07ZWxzZSBpZihoW2pdPT09YVtrXSl2W2tdPW8oZFtqXSxwW2tdKSxpKHMsZFt4XSxkW2pdKSxqLS0saysrO2Vsc2UgaWYodm9pZCAwPT09bSYmKG09dShhLGssdykseT11KGgseCxqKSksbS5oYXMoaFt4XSkpaWYobS5oYXMoaFtqXSkpe2NvbnN0IGU9eS5nZXQoYVtrXSksdD12b2lkIDAhPT1lP2RbZV06bnVsbDtpZihudWxsPT09dCl7Y29uc3QgZT1pKHMsZFt4XSk7byhlLHBba10pLHZba109ZX1lbHNlIHZba109byh0LHBba10pLGkocyxkW3hdLHQpLGRbZV09bnVsbDtrKyt9ZWxzZSBuKGRbal0pLGotLTtlbHNlIG4oZFt4XSkseCsrO2Zvcig7azw9dzspe2NvbnN0IGU9aShzLHZbdysxXSk7byhlLHBba10pLHZbaysrXT1lfWZvcig7eDw9ajspe2NvbnN0IGU9ZFt4KytdO251bGwhPT1lJiZuKGUpfXJldHVybiB0aGlzLnV0PWEsZihzLHYpLGV9fSk7ZXhwb3J0e2MgYXMgcmVwZWF0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdC5qcy5tYXBcbiIsImltcG9ydHtpc1NpbmdsZUV4cHJlc3Npb24gYXMgaX1mcm9tXCIuL2RpcmVjdGl2ZS1oZWxwZXJzLmpzXCI7aW1wb3J0e0RpcmVjdGl2ZSBhcyB0LFBhcnRUeXBlIGFzIGV9ZnJvbVwiLi9kaXJlY3RpdmUuanNcIjtleHBvcnR7ZGlyZWN0aXZlfWZyb21cIi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBzPShpLHQpPT57Y29uc3QgZT1pLl8kQU47aWYodm9pZCAwPT09ZSlyZXR1cm4hMTtmb3IoY29uc3QgaSBvZiBlKWkuXyRBTz8uKHQsITEpLHMoaSx0KTtyZXR1cm4hMH0sbz1pPT57bGV0IHQsZTtkb3tpZih2b2lkIDA9PT0odD1pLl8kQU0pKWJyZWFrO2U9dC5fJEFOLGUuZGVsZXRlKGkpLGk9dH13aGlsZSgwPT09ZT8uc2l6ZSl9LHI9aT0+e2ZvcihsZXQgdDt0PWkuXyRBTTtpPXQpe2xldCBlPXQuXyRBTjtpZih2b2lkIDA9PT1lKXQuXyRBTj1lPW5ldyBTZXQ7ZWxzZSBpZihlLmhhcyhpKSlicmVhaztlLmFkZChpKSxjKHQpfX07ZnVuY3Rpb24gaChpKXt2b2lkIDAhPT10aGlzLl8kQU4/KG8odGhpcyksdGhpcy5fJEFNPWkscih0aGlzKSk6dGhpcy5fJEFNPWl9ZnVuY3Rpb24gbihpLHQ9ITEsZT0wKXtjb25zdCByPXRoaXMuXyRBSCxoPXRoaXMuXyRBTjtpZih2b2lkIDAhPT1oJiYwIT09aC5zaXplKWlmKHQpaWYoQXJyYXkuaXNBcnJheShyKSlmb3IobGV0IGk9ZTtpPHIubGVuZ3RoO2krKylzKHJbaV0sITEpLG8ocltpXSk7ZWxzZSBudWxsIT1yJiYocyhyLCExKSxvKHIpKTtlbHNlIHModGhpcyxpKX1jb25zdCBjPWk9PntpLnR5cGU9PWUuQ0hJTEQmJihpLl8kQVA/Pz1uLGkuXyRBUT8/PWgpfTtjbGFzcyBmIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5fJEFOPXZvaWQgMH1fJEFUKGksdCxlKXtzdXBlci5fJEFUKGksdCxlKSxyKHRoaXMpLHRoaXMuaXNDb25uZWN0ZWQ9aS5fJEFVfV8kQU8oaSx0PSEwKXtpIT09dGhpcy5pc0Nvbm5lY3RlZCYmKHRoaXMuaXNDb25uZWN0ZWQ9aSxpP3RoaXMucmVjb25uZWN0ZWQ/LigpOnRoaXMuZGlzY29ubmVjdGVkPy4oKSksdCYmKHModGhpcyxpKSxvKHRoaXMpKX1zZXRWYWx1ZSh0KXtpZihpKHRoaXMuXyRDdCkpdGhpcy5fJEN0Ll8kQUkodCx0aGlzKTtlbHNle2NvbnN0IGk9Wy4uLnRoaXMuXyRDdC5fJEFIXTtpW3RoaXMuXyRDaV09dCx0aGlzLl8kQ3QuXyRBSShpLHRoaXMsMCl9fWRpc2Nvbm5lY3RlZCgpe31yZWNvbm5lY3RlZCgpe319ZXhwb3J0e2YgYXMgQXN5bmNEaXJlY3RpdmUsdCBhcyBEaXJlY3RpdmUsZSBhcyBQYXJ0VHlwZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy1kaXJlY3RpdmUuanMubWFwXG4iLCJpbXBvcnR7bm90aGluZyBhcyB0fWZyb21cIi4uL2xpdC1odG1sLmpzXCI7aW1wb3J0e0FzeW5jRGlyZWN0aXZlIGFzIGl9ZnJvbVwiLi4vYXN5bmMtZGlyZWN0aXZlLmpzXCI7aW1wb3J0e2RpcmVjdGl2ZSBhcyBzfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3QgZT0oKT0+bmV3IGg7Y2xhc3MgaHt9Y29uc3Qgbz1uZXcgV2Vha01hcCxuPXMoY2xhc3MgZXh0ZW5kcyBpe3JlbmRlcihpKXtyZXR1cm4gdH11cGRhdGUoaSxbc10pe2NvbnN0IGU9cyE9PXRoaXMuWTtyZXR1cm4gZSYmdm9pZCAwIT09dGhpcy5ZJiZ0aGlzLnJ0KHZvaWQgMCksKGV8fHRoaXMubHQhPT10aGlzLmN0KSYmKHRoaXMuWT1zLHRoaXMuaHQ9aS5vcHRpb25zPy5ob3N0LHRoaXMucnQodGhpcy5jdD1pLmVsZW1lbnQpKSx0fXJ0KHQpe2lmKHRoaXMuaXNDb25uZWN0ZWR8fCh0PXZvaWQgMCksXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5ZKXtjb25zdCBpPXRoaXMuaHQ/P2dsb2JhbFRoaXM7bGV0IHM9by5nZXQoaSk7dm9pZCAwPT09cyYmKHM9bmV3IFdlYWtNYXAsby5zZXQoaSxzKSksdm9pZCAwIT09cy5nZXQodGhpcy5ZKSYmdGhpcy5ZLmNhbGwodGhpcy5odCx2b2lkIDApLHMuc2V0KHRoaXMuWSx0KSx2b2lkIDAhPT10JiZ0aGlzLlkuY2FsbCh0aGlzLmh0LHQpfWVsc2UgdGhpcy5ZLnZhbHVlPXR9Z2V0IGx0KCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5ZP28uZ2V0KHRoaXMuaHQ/P2dsb2JhbFRoaXMpPy5nZXQodGhpcy5ZKTp0aGlzLlk/LnZhbHVlfWRpc2Nvbm5lY3RlZCgpe3RoaXMubHQ9PT10aGlzLmN0JiZ0aGlzLnJ0KHZvaWQgMCl9cmVjb25uZWN0ZWQoKXt0aGlzLnJ0KHRoaXMuY3QpfX0pO2V4cG9ydHtlIGFzIGNyZWF0ZVJlZixuIGFzIHJlZn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWYuanMubWFwXG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1N5bWJvbDtcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xudmFyIHJlV2hpdGVzcGFjZSA9IC9cXHMvO1xuXG4vKipcbiAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2VcbiAqIGNoYXJhY3RlciBvZiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gKi9cbmZ1bmN0aW9uIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpIHtcbiAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICB3aGlsZSAoaW5kZXgtLSAmJiByZVdoaXRlc3BhY2UudGVzdChzdHJpbmcuY2hhckF0KGluZGV4KSkpIHt9XG4gIHJldHVybiBpbmRleDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJpbW1lZEVuZEluZGV4O1xuIiwiaW1wb3J0IHRyaW1tZWRFbmRJbmRleCBmcm9tICcuL190cmltbWVkRW5kSW5kZXguanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1xuICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUcmltO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0O1xuIiwiaW1wb3J0IGJhc2VUcmltIGZyb20gJy4vX2Jhc2VUcmltLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvTnVtYmVyO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBub3c7XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgbm93IGZyb20gJy4vbm93LmpzJztcbmltcG9ydCB0b051bWJlciBmcm9tICcuL3RvTnVtYmVyLmpzJztcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZ1xuICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgOiB0aW1lV2FpdGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlYm91bmNlO1xuIiwiaW1wb3J0IHsgY3NzIGFzIGgsIHVuc2FmZUNTUyBhcyBaLCBMaXRFbGVtZW50IGFzIGYsIGh0bWwgYXMgbiB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IHN0YXRlIGFzIFAsIGN1c3RvbUVsZW1lbnQgYXMgZywgcHJvcGVydHkgYXMgbCB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgY2xhc3NNYXAgYXMgXyB9IGZyb20gXCJsaXQvZGlyZWN0aXZlcy9jbGFzcy1tYXAuanNcIjtcbmltcG9ydCB7IHJlcGVhdCBhcyAkIH0gZnJvbSBcImxpdC9kaXJlY3RpdmVzL3JlcGVhdC5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlUmVmIGFzIG10LCByZWYgYXMgaHQgfSBmcm9tIFwibGl0L2RpcmVjdGl2ZXMvcmVmLmpzXCI7XG5pbXBvcnQgeyB0aHJvdHRsZSBhcyBmdCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmNvbnN0IGd0ID0gMTYwLCB1dCA9IDE2MCwgYnQgPSAxMDI0LCB2dCA9IFsxNDc0Mzc1OSwgODgzMTA4NCwgMzE3MjQzMiwgNDY0OTI5XSwgayA9IDQsIEwgPSAyMCwgSSA9IDIyLCBWID0gMjMsIGogPSAyNCwgTiA9IDI1LCBHID0gMjYsIEggPSAyOCwgQiA9IDMwLCBZID0gMzEsIEsgPSAxNjAsIEogPSAxLCBRID0gMiwgdHQgPSAxNiwgZXQgPSAzMiwgb3QgPSA2NCwgc3QgPSAxMjgsIHJ0ID0gMSwgYXQgPSAyLCBpdCA9IDQsIG50ID0gMSwgbHQgPSAyLCBTID0gNjU1MzYsIGR0ID0ge1xuICBQQUxFVFRFOiB7XG4gICAgb2Zmc2V0OiBrLFxuICAgIGxlbjogMTZcbiAgfSxcbiAgRFJBV19DT0xPUlM6IHtcbiAgICBvZmZzZXQ6IEwsXG4gICAgbGVuOiAyXG4gIH0sXG4gIEdBTUVQQUQxOiB7XG4gICAgb2Zmc2V0OiBJLFxuICAgIGxlbjogMVxuICB9LFxuICBHQU1FUEFEMjoge1xuICAgIG9mZnNldDogVixcbiAgICBsZW46IDFcbiAgfSxcbiAgR0FNRVBBRDM6IHtcbiAgICBvZmZzZXQ6IGosXG4gICAgbGVuOiAxXG4gIH0sXG4gIEdBTUVQQUQ0OiB7XG4gICAgb2Zmc2V0OiBOLFxuICAgIGxlbjogMVxuICB9LFxuICBNT1VTRV9YOiB7XG4gICAgb2Zmc2V0OiBHLFxuICAgIGxlbjogMlxuICB9LFxuICBNT1VTRV9ZOiB7XG4gICAgb2Zmc2V0OiBILFxuICAgIGxlbjogMlxuICB9LFxuICBNT1VTRV9CVVRUT05TOiB7XG4gICAgb2Zmc2V0OiBCLFxuICAgIGxlbjogMVxuICB9LFxuICBTWVNURU1fRkxBR1M6IHtcbiAgICBvZmZzZXQ6IFksXG4gICAgbGVuOiAxXG4gIH0sXG4gIFJFU0VSVkVEOiB7XG4gICAgb2Zmc2V0OiAzMixcbiAgICBsZW46IDEyOFxuICB9LFxuICBGUkFNRUJVRkZFUjoge1xuICAgIG9mZnNldDogSyxcbiAgICBsZW46IDY0MDBcbiAgfSxcbiAgUFJPR1JBTV9NRU1PUlk6IHtcbiAgICBvZmZzZXQ6IDY1NjAsXG4gICAgbGVuOiA1ODk3NlxuICB9XG59LCB3dCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZnJlZXplKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIEFERFJfRFJBV19DT0xPUlM6IEwsXG4gIEFERFJfRlJBTUVCVUZGRVI6IEssXG4gIEFERFJfR0FNRVBBRDE6IEksXG4gIEFERFJfR0FNRVBBRDI6IFYsXG4gIEFERFJfR0FNRVBBRDM6IGosXG4gIEFERFJfR0FNRVBBRDQ6IE4sXG4gIEFERFJfTU9VU0VfQlVUVE9OUzogQixcbiAgQUREUl9NT1VTRV9YOiBHLFxuICBBRERSX01PVVNFX1k6IEgsXG4gIEFERFJfUEFMRVRURTogayxcbiAgQUREUl9TWVNURU1fRkxBR1M6IFksXG4gIEJVVFRPTl9ET1dOOiBzdCxcbiAgQlVUVE9OX0xFRlQ6IHR0LFxuICBCVVRUT05fUklHSFQ6IGV0LFxuICBCVVRUT05fVVA6IG90LFxuICBCVVRUT05fWDogSixcbiAgQlVUVE9OX1o6IFEsXG4gIENPTE9SUzogdnQsXG4gIEhFSUdIVDogdXQsXG4gIE1BWF9DQVJUX1NJWkU6IFMsXG4gIE1PVVNFX0xFRlQ6IHJ0LFxuICBNT1VTRV9NSURETEU6IGl0LFxuICBNT1VTRV9SSUdIVDogYXQsXG4gIFNUT1JBR0VfU0laRTogYnQsXG4gIFNZU1RFTV9ISURFX0dBTUVQQURfT1ZFUkxBWTogbHQsXG4gIFNZU1RFTV9QUkVTRVJWRV9GUkFNRUJVRkZFUjogbnQsXG4gIFdJRFRIOiBndCxcbiAgbWVtb3J5TWFwOiBkdFxufSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcIk1vZHVsZVwiIH0pKTtcbmZ1bmN0aW9uIHh0KGUpIHtcbiAgY29uc3QgdCA9IFswLCAwLCAwLCAwXTtcbiAgZm9yIChsZXQgbyA9IDA7IG8gPCA0OyBvKyspXG4gICAgdFtvXSA9IGUuZ2V0VWludDMyKGsgKyBvICogNCwgITApO1xuICByZXR1cm4gdDtcbn1cbmZ1bmN0aW9uIHl0KGUsIHQpIHtcbiAgcmV0dXJuIFtcbiAgICBlLmdldFVpbnQ4KEkpIHwgdC5nYW1lcGFkc1swXSxcbiAgICBlLmdldFVpbnQ4KFYpIHwgdC5nYW1lcGFkc1sxXSxcbiAgICBlLmdldFVpbnQ4KGopIHwgdC5nYW1lcGFkc1syXSxcbiAgICBlLmdldFVpbnQ4KE4pIHwgdC5nYW1lcGFkc1szXVxuICBdO1xufVxuY2xhc3MgX3Qge1xuICBjb25zdHJ1Y3Rvcih0LCBvKSB7XG4gICAgY29uc3QgciA9IHQuZ2V0SW50MTYoRywgITApLCBzID0gdC5nZXRJbnQxNihILCAhMCk7XG4gICAgdGhpcy5wb2ludGVyUG9zID0geyB4OiByLCB5OiBzIH0sIHRoaXMuZHJhd0NvbG9ycyA9IHQuZ2V0VWludDE2KEwsICEwKSwgdGhpcy5wYWxldHRlID0geHQodCksIHRoaXMuZ2FtZXBhZHMgPSB5dCh0LCBvKSwgdGhpcy5zeXN0ZW1GbGFncyA9IHQuZ2V0VWludDgoWSksIHRoaXMubW91c2VCdG5CeXRlID0gdC5nZXRVaW50OChCKSB8IG8ubW91c2VCdXR0b25zLCB0aGlzLmdldFVpbnQ4ID0gKGEpID0+IHQuZ2V0VWludDgoYSksIHRoaXMuYnl0ZUxlbiA9IHQuYnl0ZUxlbmd0aDtcbiAgfVxufVxuY29uc3QgeiA9IFwid2FzbTQtdXBkYXRlLWNvbXBsZXRlZFwiO1xuZnVuY3Rpb24gJHQoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImRpc2tcIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gY29uc29sZS5lcnJvcihlKSwgbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gRXQoeyBkYXRhVmlldzogZSwgZnBzOiB0LCBidWZmZXJlZERhdGE6IG8sIHdhc21CdWZmZXJCeXRlTGVuOiByIH0sIHMgPSB7IGJ1YmJsZXM6ICEwIH0pIHtcbiAgcmV0dXJuIG5ldyBDdXN0b21FdmVudCh6LCB7XG4gICAgLi4ucyxcbiAgICBkZXRhaWw6IHtcbiAgICAgIG1lbW9yeTogbmV3IF90KGUsIG8pLFxuICAgICAgZnBzOiB0LFxuICAgICAgd2FzbUJ1ZmZlckJ5dGVMZW46IHIsXG4gICAgICBzdG9yZWRWYWx1ZTogJHQoKVxuICAgIH1cbiAgfSk7XG59XG5jbGFzcyBEdCB7XG4gIGNvbnN0cnVjdG9yKHQpIHtcbiAgICB0aGlzLnN0YXRlID0gbnVsbCwgdGhpcy5oYW5kbGVVcGRhdGVFdnQgPSAoeyBkZXRhaWw6IG8gfSkgPT4ge1xuICAgICAgaWYgKG8gIT0gbnVsbCAmJiBvLm1lbW9yeSkge1xuICAgICAgICBjb25zdCByID0ge1xuICAgICAgICAgIG1lbW9yeVZpZXc6IG8ubWVtb3J5LFxuICAgICAgICAgIHN0b3JlZFZhbHVlOiBvLnN0b3JlZFZhbHVlID8/IG51bGwsXG4gICAgICAgICAgZnBzOiBvLmZwcyxcbiAgICAgICAgICB3YXNtQnVmZmVyQnl0ZUxlbjogby53YXNtQnVmZmVyQnl0ZUxlblxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0YXRlID0gciwgdGhpcy5ob3N0LnJlcXVlc3RVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LCAodGhpcy5ob3N0ID0gdCkuYWRkQ29udHJvbGxlcih0aGlzKTtcbiAgfVxuICBob3N0Q29ubmVjdGVkKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgeixcbiAgICAgIHRoaXMuaGFuZGxlVXBkYXRlRXZ0XG4gICAgKTtcbiAgfVxuICBob3N0RGlzY29ubmVjdGVkKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgeixcbiAgICAgIHRoaXMuaGFuZGxlVXBkYXRlRXZ0XG4gICAgKTtcbiAgfVxufVxuY29uc3QgRiA9IFwid2FzbTQtY2xvc2UtZGV2dG9vbHMtcmVxdWVzdFwiO1xuZnVuY3Rpb24gQ3QoKSB7XG4gIHJldHVybiBuZXcgQ3VzdG9tRXZlbnQoRiwge1xuICAgIGJ1YmJsZXM6ICEwLFxuICAgIGNvbXBvc2VkOiAhMFxuICB9KTtcbn1cbmNvbnN0IE90ID0gaGA6aG9zdHtjb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXByaW1hcnksICNmZmYpO2JhY2tncm91bmQtY29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtYmctcHJpbWFyeSwgIzIwMjAyMCl9LnRleHQtcHJpbWFyeXtjb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXByaW1hcnksICNmZmYpIWltcG9ydGFudH0udGV4dC1zZWNvbmRhcnl7Y29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtdGV4dC1zZWNvbmRhcnksIHJnYmEoMjU1LCAyNTUsIDI1NSwgLjcpKSFpbXBvcnRhbnR9LmJnLXByaW1hcnl7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy1iZy1wcmltYXJ5LCAjMjAyMDIwKSFpbXBvcnRhbnR9LmJnLXNlY29uZGFyeXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLWJnLXNlY29uZGFyeSwgIzQ0NCkhaW1wb3J0YW50fTpob3N0e2ZvbnQtc2l6ZTp2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXNpemUsIDE2cHgpO2ZvbnQtZmFtaWx5Om1vbm9zcGFjZTt0ZXh0LXJlbmRlcmluZzpvcHRpbWl6ZUxlZ2liaWxpdHk7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZH0udGV4dC1hbGlnbi1sZWZ0e3RleHQtYWxpZ246bGVmdCFpbXBvcnRhbnR9LnRleHQtYWxpZ24tcmlnaHR7dGV4dC1hbGlnbjpyaWdodCFpbXBvcnRhbnR9LnRleHQtYWxpZ24tY2VudGVye3RleHQtYWxpZ246Y2VudGVyIWltcG9ydGFudH0uYWN0aXZle2NvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtcHJpbWFyeSwgI2ZmZil9LmRpbXtvcGFjaXR5Oi40fS5kaXNwbGF5LWJsb2Nre2Rpc3BsYXk6YmxvY2shaW1wb3J0YW50fS5pbmZvLWJveHt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOi4yZW0gLjRlbTtjb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAuNykpO2JhY2tncm91bmQ6dmFyKC0td2FzbTQtZGV2dG9vbHMtYmctc2Vjb25kYXJ5LCAjNDQ0KTtib3JkZXItcmFkaXVzOjRweDttaW4td2lkdGg6NjBweDtkaXNwbGF5OmlubGluZS1ibG9jaztmb250LXNpemU6Ljg3NWVtfS50YWJsZXt0ZXh0LWFsaWduOmxlZnQ7b3ZlcmZsb3c6aGlkZGVuO2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTttYXJnaW4tYm90dG9tOjA7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci1jb2xvcjpjdXJyZW50Q29sb3I7Ym9yZGVyLXdpZHRoOjFweDttYXgtd2lkdGg6MTAwJTtmb250LXNpemU6dmFyKC0td2FzbTQtZGV2dG9vbHMtdGV4dC1zaXplLCAxNnB4KX0udGFibGUgdGJvZHksLnRhYmxlIHRoZWFkLC50YWJsZSB0Zm9vdCwudGFibGUgdHIsLnRhYmxlIHRkLC50YWJsZSB0aHtvdmVyZmxvdy13cmFwOmJyZWFrLXdvcmQ7dGV4dC1hbGlnbjppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0fS50YWJsZSB0ZCwudGFibGUgdGh7Ym9yZGVyLXdpZHRoOjA7Ym9yZGVyLXN0eWxlOm5vbmU7Ym9yZGVyLWNvbG9yOmluaGVyaXQ7Zm9udC1zaXplOi44NzVlbTtwYWRkaW5nOi4zZW0gLjRlbTttaW4td2lkdGg6NTBweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCBjdXJyZW50Q29sb3J9YSxhOnZpc2l0ZWR7Y29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtdGV4dC1wcmltYXJ5LCAjZmZmKTtvdXRsaW5lOm5vbmU7Zm9udC1zaXplOi44NzVlbX1hOmZvY3Vze2NvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtc2Vjb25kYXJ5LCByZ2JhKDI1NSwgMjU1LCAyNTUsIC43KSl9Lmxpc3R7cGFkZGluZy1sZWZ0OjEuMmVtfS5saXN0IGxpe2xpc3Qtc3R5bGU6ZGlzY30uZml4ZWQtd3JhcHBlcntwb3NpdGlvbjpmaXhlZDtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O3RvcDowO3JpZ2h0OjA7cGFkZGluZzo0cHg7aGVpZ2h0OjEwMHZoO3otaW5kZXg6dmFyKC0td2FzbTQtZGV2dG9vbHMtd2luZG93LXotaW5kZXgsIDExKTtwb2ludGVyLWV2ZW50czpub25lfS5maXhlZC13cmFwcGVyLnBvcy1yaWdodCAudG9nZ2xlLXBvcy1idG57dHJhbnNmb3JtOnJvdGF0ZVkoLTE4MGRlZyl9LmZpeGVkLXdyYXBwZXIucG9zLWxlZnR7cmlnaHQ6YXV0bztsZWZ0OjB9LmZpeGVkLXdyYXBwZXIucG9zLWxlZnQgLnRvZ2dsZS1wb3MtYnRue3RyYW5zZm9ybTpyb3RhdGVZKDApfS5kZXZ0b29scy13cmFwcGVye2Rpc3BsYXk6YmxvY2s7Ym9yZGVyOnNvbGlkIDFweCBncmF5O2JvcmRlci1yYWRpdXM6NHB4O292ZXJmbG93OmhpZGRlbjt3aWR0aDozMjBweDtwb3NpdGlvbjpyZWxhdGl2ZTttYXgtaGVpZ2h0OjEwMCU7cG9pbnRlci1ldmVudHM6YXV0b30uZGV2dG9vbHMtd3JhcHBlcjpiZWZvcmV7Y29udGVudDpcIlwiO2hlaWdodDoyLjkyM2VtO3dpZHRoOjEwMCV9LmRldnRvb2xzLXdyYXBwZXIgLmRldnRvb2xzLXRvcC1zdGF0aWMtcGxhY2Vob2xkZXJ7aGVpZ2h0OjIuOTIzZW07d2lkdGg6MTAwJTtwYWRkaW5nOjB9LmRldnRvb2xzLXdyYXBwZXIgLmRldnRvb2xzLXRvcHtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFyIGF1dG87anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Z3JpZC10ZW1wbGF0ZS1hcmVhczpcIi4gd2luLWJ0blwiO2FsaWduLWl0ZW1zOmNlbnRlcjtvdmVyZmxvdzpoaWRkZW47cGFkZGluZzowIDhweDtwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kOnRoZW1lO3otaW5kZXg6NTtsZWZ0OjA7dG9wOjA7d2lkdGg6MTAwJTtoZWlnaHQ6Mi45MjNlbX0uZGV2dG9vbHMtd3JhcHBlciAuZGV2dG9vbHMtdG9wLWJ0bntncmlkLWFyZWE6d2luLWJ0bjtoZWlnaHQ6aW5oZXJpdDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO2FsaWduLWl0ZW1zOmNlbnRlcjtncmlkLWdhcDo0cHh9LmRldnRvb2xzLXdyYXBwZXIgLnRvcC1idG57Ym9yZGVyLXJhZGl1czo0cHg7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtib3JkZXI6bm9uZTtib3gtc2hhZG93Om5vbmU7Y29sb3I6aW5oZXJpdDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7d2lkdGg6Mi4yZW07aGVpZ2h0OjIuMmVtO2N1cnNvcjpwb2ludGVyfS5kZXZ0b29scy13cmFwcGVyIC5kZXZ0b29scy1ib2R5e21heC1oZWlnaHQ6Y2FsYygxMDB2aCAtIDIuOTIzZW0gLSA4cHgpO3BhZGRpbmc6MCA4cHggOHB4O292ZXJmbG93LXg6aGlkZGVuO292ZXJmbG93LXk6YXV0b30uZGV2dG9vbHMtd3JhcHBlciAuZGV2dG9vbHMtYm9keTo6LXdlYmtpdC1zY3JvbGxiYXJ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7d2lkdGg6N3B4fS5kZXZ0b29scy13cmFwcGVyIC5kZXZ0b29scy1ib2R5Ojotd2Via2l0LXNjcm9sbGJhci10aHVtYntib3JkZXItcmFkaXVzOjRweDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtc2Vjb25kYXJ5LCByZ2JhKDI1NSwgMjU1LCAyNTUsIC43KSk7Ym94LXNoYWRvdzowIDAgMXB4ICNmZmZmZmY4MH0ubW91c2UtcG9zLWxpc3R7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoMiw1MHB4KTtncmlkLWdhcDoxNnB4fS5tb3VzZS1wb3N7d2hpdGUtc3BhY2U6bm93cmFwfS5pbmxpbmUtc2VjdGlvbntkaXNwbGF5OmZsZXg7ZmxleC1mbG93OnJvdyBub3dyYXA7Z3JpZC1nYXA6MTZweDthbGlnbi1pdGVtczpjZW50ZXJ9LmlubGluZS1zZWN0aW9uPip7bWFyZ2luOjB9LmNhcnQtc2l6ZS13cmFwcGVye2Rpc3BsYXk6Z3JpZDtncmlkLWF1dG8tZmxvdzpyb3c7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7YWxpZ24taXRlbXM6ZmxleC1zdGFydDtncmlkLWdhcDouMjVlbX0uY2FydC1zaXplLXdyYXBwZXIgLnNpemUtYm94e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0uZmxhZ3Mtd3JhcHBlcntkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1yb3dzOjFmciAxZnI7Z3JpZC1nYXA6MTZweH0uZmxhZ3Mtd3JhcHBlciAuZmxhZy1sYWJlbHtmb250LXNpemU6Ljg3NWVtfS50YWJze2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6cm93IG5vd3JhcDtncmlkLWdhcDo0cHg7Y3Vyc29yOnBvaW50ZXI7Zm9udC13ZWlnaHQ6OTAwOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS50YWJzIC50YWItaXRlbXtwb2ludGVyLWV2ZW50czphdXRvO3BhZGRpbmc6NHB4fS50YWJzIC50YWItaXRlbVtkYXRhLWFjdGl2ZT1cIjFcIl17Ym9yZGVyLWJvdHRvbToxcHggc29saWQgY3VycmVudENvbG9yfWAsIFB0ID0gaGAqLCo6YmVmb3JlLCo6YWZ0ZXJ7Ym94LXNpemluZzpib3JkZXItYm94fXNlY3Rpb257cGFkZGluZzouNGVtIDB9YXJ0aWNsZXtwYWRkaW5nOi40ZW0gMH11bHtsaXN0LXN0eWxlOm5vbmU7bWFyZ2luOjA7cGFkZGluZzouMmVtIDB9aDEsaDIsaDMsaDQsaDUsaDZ7bWFyZ2luOi40ZW0gMDtmb250LXNpemU6MWVtfXB7cGFkZGluZzowO21hcmdpbjowfVtoaWRkZW5de2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9YCwgQnQgPSBoYDpob3N0e2NvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtcHJpbWFyeSwgI2ZmZik7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy1iZy1wcmltYXJ5LCAjMjAyMDIwKX0udGV4dC1wcmltYXJ5e2NvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtcHJpbWFyeSwgI2ZmZikhaW1wb3J0YW50fS50ZXh0LXNlY29uZGFyeXtjb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAuNykpIWltcG9ydGFudH0uYmctcHJpbWFyeXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLWJnLXByaW1hcnksICMyMDIwMjApIWltcG9ydGFudH0uYmctc2Vjb25kYXJ5e2JhY2tncm91bmQtY29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtYmctc2Vjb25kYXJ5LCAjNDQ0KSFpbXBvcnRhbnR9Omhvc3R7Zm9udC1zaXplOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtc2l6ZSwgMTZweCk7Zm9udC1mYW1pbHk6bW9ub3NwYWNlO3RleHQtcmVuZGVyaW5nOm9wdGltaXplTGVnaWJpbGl0eTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkfS50ZXh0LWFsaWduLWxlZnR7dGV4dC1hbGlnbjpsZWZ0IWltcG9ydGFudH0udGV4dC1hbGlnbi1yaWdodHt0ZXh0LWFsaWduOnJpZ2h0IWltcG9ydGFudH0udGV4dC1hbGlnbi1jZW50ZXJ7dGV4dC1hbGlnbjpjZW50ZXIhaW1wb3J0YW50fS5hY3RpdmV7Y29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtdGV4dC1wcmltYXJ5LCAjZmZmKX0uZGlte29wYWNpdHk6LjR9LmRpc3BsYXktYmxvY2t7ZGlzcGxheTpibG9jayFpbXBvcnRhbnR9LmluZm8tYm94e3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6LjJlbSAuNGVtO2NvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtc2Vjb25kYXJ5LCByZ2JhKDI1NSwgMjU1LCAyNTUsIC43KSk7YmFja2dyb3VuZDp2YXIoLS13YXNtNC1kZXZ0b29scy1iZy1zZWNvbmRhcnksICM0NDQpO2JvcmRlci1yYWRpdXM6NHB4O21pbi13aWR0aDo2MHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO2ZvbnQtc2l6ZTouODc1ZW19LnRhYmxle3RleHQtYWxpZ246bGVmdDtvdmVyZmxvdzpoaWRkZW47Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO21hcmdpbi1ib3R0b206MDtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLWNvbG9yOmN1cnJlbnRDb2xvcjtib3JkZXItd2lkdGg6MXB4O21heC13aWR0aDoxMDAlO2ZvbnQtc2l6ZTp2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXNpemUsIDE2cHgpfS50YWJsZSB0Ym9keSwudGFibGUgdGhlYWQsLnRhYmxlIHRmb290LC50YWJsZSB0ciwudGFibGUgdGQsLnRhYmxlIHRoe292ZXJmbG93LXdyYXA6YnJlYWstd29yZDt0ZXh0LWFsaWduOmluaGVyaXQ7Zm9udC1zaXplOmluaGVyaXR9LnRhYmxlIHRkLC50YWJsZSB0aHtib3JkZXItd2lkdGg6MDtib3JkZXItc3R5bGU6bm9uZTtib3JkZXItY29sb3I6aW5oZXJpdDtmb250LXNpemU6Ljg3NWVtO3BhZGRpbmc6LjNlbSAuNGVtO21pbi13aWR0aDo1MHB4O2JvcmRlci1ib3R0b206MXB4IHNvbGlkIGN1cnJlbnRDb2xvcn1hLGE6dmlzaXRlZHtjb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXByaW1hcnksICNmZmYpO291dGxpbmU6bm9uZTtmb250LXNpemU6Ljg3NWVtfWE6Zm9jdXN7Y29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtdGV4dC1zZWNvbmRhcnksIHJnYmEoMjU1LCAyNTUsIDI1NSwgLjcpKX0ubGlzdHtwYWRkaW5nLWxlZnQ6MS4yZW19Lmxpc3QgbGl7bGlzdC1zdHlsZTpkaXNjfWAsIFJ0ID0gW1B0LCBCdF0ubWFwKChlKSA9PiBaKGUpKTtcbmZ1bmN0aW9uIHUoLi4uZSkge1xuICByZXR1cm4gUnQuY29uY2F0KFxuICAgIGUubWFwKFxuICAgICAgKHQpID0+IHR5cGVvZiB0ID09IFwic3RyaW5nXCIgPyBaKHQpIDogdFxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIFR0KGUpIHtcbiAgcmV0dXJuIGAjJHtlLnRvU3RyaW5nKDE2KS50b0xvd2VyQ2FzZSgpLnBhZFN0YXJ0KDYsIFwiMFwiKX1gO1xufVxuZnVuY3Rpb24gRShlLCB0ID0gMikge1xuICByZXR1cm4gZS50b1N0cmluZygxNikucGFkU3RhcnQodCwgXCIwXCIpLnRvVXBwZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBXKGUpIHtcbiAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBDKGUsIHQgPSAwKSB7XG4gIHJldHVybiAoMSA8PCBlKSAtIDEgXiAoMSA8PCB0KSAtIDE7XG59XG5mdW5jdGlvbiBBdChlLCB0KSB7XG4gIGNvbnN0IG8gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0LCBlLmJ5dGVMZW4gLSAxKSk7XG4gIGxldCByID0gW107XG4gIGZvciAobGV0IHMgPSBvLCBhID0gbyArIDE2OyBzIDwgYTsgcysrKVxuICAgIHJbc10gPSBFKGUuZ2V0VWludDgocyksIDIpO1xuICByZXR1cm4gci5qb2luKFwiIFwiKTtcbn1cbmZ1bmN0aW9uIFgoZSwgdCwgbyA9IDEpIHtcbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoZSkgfHwgIU51bWJlci5pc0Zpbml0ZSh0KSB8fCAhTnVtYmVyLmlzRmluaXRlKG8pIHx8IGUgPiB0IHx8IG8gPT09IDApXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBpbnZhbGlkIHJhbmdlIGlucHV0OiBmcm9tICR7ZX0sIHRvICR7dH0sIHN0ZXAgJHtvfWBcbiAgICApO1xuICBjb25zdCByID0gKHQgLSBlKSAvIG8gPj4gMDtcbiAgbGV0IHMgPSBbXTtcbiAgZm9yIChsZXQgYSA9IDA7IGEgPCByOyBhKyspXG4gICAgc1thXSA9IG8gKiBhICsgZTtcbiAgcmV0dXJuIHM7XG59XG52YXIgTXQgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIFN0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgUiA9IChlLCB0LCBvLCByKSA9PiB7XG4gIGZvciAodmFyIHMgPSByID4gMSA/IHZvaWQgMCA6IHIgPyBTdCh0LCBvKSA6IHQsIGEgPSBlLmxlbmd0aCAtIDEsIGk7IGEgPj0gMDsgYS0tKVxuICAgIChpID0gZVthXSkgJiYgKHMgPSAociA/IGkodCwgbywgcykgOiBpKHMpKSB8fCBzKTtcbiAgcmV0dXJuIHIgJiYgcyAmJiBNdCh0LCBvLCBzKSwgcztcbn07XG5jb25zdCBVID0gXCJ3YXNtNC1kZXZ0b29sc1wiLCBBID0gW1wiZ2VuZXJhbFwiLCBcImNvbnRyb2xzXCIsIFwibWVtXCIsIFwiaW5mb1wiXSwgenQgPSBbQygzKSwgQyg3LCAzKSwgQygxMSwgNyksIEMoMTUsIDExKV07XG5sZXQgdiA9IGNsYXNzIGV4dGVuZHMgZiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMudXBkYXRlQ29udHJvbGxlciA9IG5ldyBEdCh0aGlzKSwgdGhpcy5fZXhwYW5kZWQgPSAhMCwgdGhpcy5fYWN0aXZlVGFiID0gQVswXSwgdGhpcy5fZml4ZWRQb3NpdGlvbiA9IFwicmlnaHRcIiwgdGhpcy5faGFuZGxlQ2xvc2VCdXR0b25DbGljayA9ICgpID0+IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChDdCgpKTtcbiAgICB9LCB0aGlzLl9oYW5kbGVUYWJDbGljayA9IChlKSA9PiB7XG4gICAgICB2YXIgbztcbiAgICAgIGNvbnN0IHQgPSAobyA9IGUuY29tcG9zZWRQYXRoKClbMF0pID09IG51bGwgPyB2b2lkIDAgOiBvLmRhdGFzZXQudGFiVmFsdWU7XG4gICAgICBBLmluY2x1ZGVzKHQpICYmICh0aGlzLl9hY3RpdmVUYWIgPSB0KTtcbiAgICB9LCB0aGlzLl90b2dnbGVFeGFwYW5kZWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9leHBhbmRlZCA9ICF0aGlzLl9leHBhbmRlZDtcbiAgICB9LCB0aGlzLl9jaGFuZ2VGaXhlZFBvc2l0aW9uID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZml4ZWRQb3NpdGlvbiA9IHRoaXMuX2ZpeGVkUG9zaXRpb24gPT09IFwibGVmdFwiID8gXCJyaWdodFwiIDogXCJsZWZ0XCI7XG4gICAgfSwgdGhpcy5fcmVuZGVyR2VuZXJhbFZpZXcgPSAoe1xuICAgICAgbWVtb3J5VmlldzogZSxcbiAgICAgIGZwczogdCxcbiAgICAgIHdhc21CdWZmZXJCeXRlTGVuOiBvXG4gICAgfSkgPT4ge1xuICAgICAgY29uc3QgciA9IGUuZHJhd0NvbG9ycyA/PyAwO1xuICAgICAgcmV0dXJuIG5gPGFydGljbGU+XG4gICAgICA8d2FzbTQtcGFsZXR0ZVxuICAgICAgICBwYWxldHRlLWhlYWRpbmc9XCJwYWxldHRlXCJcbiAgICAgICAgLnBhbGV0dGU9JHtlLnBhbGV0dGV9XG4gICAgICA+PC93YXNtNC1wYWxldHRlPlxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxoND5kcmF3IGNvbG9yczwvaDQ+XG4gICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlIHRleHQtYWxpZ24tcmlnaHRcIj5cbiAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0aD5jb2xvcjwvdGg+XG4gICAgICAgICAgICAgIDx0aD52YWx1ZTwvdGg+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgJHskKFxuICAgICAgICB6dCxcbiAgICAgICAgVyxcbiAgICAgICAgKHMsIGEpID0+IG5gPHRyPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInRleHQtYWxpZ24tY2VudGVyXCI+JHthICsgMX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD4ke3IgJiBzfTwvdGQ+XG4gICAgICAgICAgICAgIDwvdHI+YFxuICAgICAgKX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgIDx0Zm9vdD5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1hbGlnbi1jZW50ZXJcIj5zdW08L3RkPlxuICAgICAgICAgICAgICA8dGQ+JHtyfTwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDwvdGZvb3Q+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICA8c2VjdGlvbiBjbGFzcz1cImlubGluZS1zZWN0aW9uXCI+XG4gICAgICAgIDxoND5mcHM8L2g0PlxuICAgICAgICA8c3BhbiBjbGFzcz1cImluZm8tYm94IHRleHQtcHJpbWFyeVwiPiR7dH08L3NwYW4+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICA8c2VjdGlvbiBjbGFzcz1cImNhcnQtc2l6ZS13cmFwcGVyXCI+XG4gICAgICAgIDxoND5jYXJ0cmlkZ2Ugc2l6ZSAke28gPiBTID8gXCLimqDvuI9cIiA6IFwiXCJ9PC9oND5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNpemUtYm94XCI+XG4gICAgICAgICAgY3VycmVudFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5mby1ib3ggdGV4dC1wcmltYXJ5XCI+JHtvfUI8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2l6ZS1ib3hcIj5cbiAgICAgICAgICBsaW1pdCA8c3BhbiBjbGFzcz1cImluZm8tYm94IHRleHQtcHJpbWFyeVwiPiR7U31CPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDxzZWN0aW9uIGNsYXNzPVwiZmxhZ3Mtc2VjdGlvblwiPlxuICAgICAgICA8aDQ+c3lzdGVtIGZsYWdzPC9oND5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsYWdzLXdyYXBwZXJcIj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmbGFnLWxhYmVsXCI+cHJlc2VydmUgZnJhbWVidWZmZXI8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImluZm8tYm94IHRleHQtcHJpbWFyeVwiXG4gICAgICAgICAgICAgID4ke2Uuc3lzdGVtRmxhZ3MgJiBudH08L3NwYW5cbiAgICAgICAgICAgID5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmbGFnLWxhYmVsXCI+aGlkZSBnYW1lcGFkIG92ZXJsYXk8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImluZm8tYm94IHRleHQtcHJpbWFyeVwiXG4gICAgICAgICAgICAgID4ke2Uuc3lzdGVtRmxhZ3MgJiBsdH08L3NwYW5cbiAgICAgICAgICAgID5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9hcnRpY2xlPmA7XG4gICAgfSwgdGhpcy5fcmVuZGVySW5mbyA9ICgpID0+IG5gIDx3YXNtNC1pbmZvLXZpZXc+PC93YXNtNC1pbmZvLXZpZXc+IGAsIHRoaXMuX3JlbmRlckNvbnRyb2xzID0gKHsgbWVtb3J5VmlldzogZSB9KSA9PiBuYDx3YXNtNC1jb250cm9scy12aWV3XG4gICAgICAubW91c2VCdXR0b25zPSR7ZS5tb3VzZUJ0bkJ5dGV9XG4gICAgICAubW91c2VYPSR7ZS5wb2ludGVyUG9zLnh9XG4gICAgICAubW91c2VZPSR7ZS5wb2ludGVyUG9zLnl9XG4gICAgICAuZ2FtZXBhZHM9JHtlLmdhbWVwYWRzfVxuICAgID48L3dhc200LWNvbnRyb2xzLXZpZXc+YCwgdGhpcy5fcmVuZGVyTWVtb3J5ID0gKHsgbWVtb3J5VmlldzogZSB9KSA9PiBuYDx3YXNtNC1tZW1vcnktdmlld1xuICAgICAgLm1lbW9yeVZpZXc9JHtlfVxuICAgID48L3dhc200LW1lbW9yeS12aWV3PmAsIHRoaXMuX3JlbmRlclRhYiA9IChlKSA9PiB7XG4gICAgICBsZXQgdDtcbiAgICAgIHN3aXRjaCAodGhpcy5fYWN0aXZlVGFiKSB7XG4gICAgICAgIGNhc2UgXCJjb250cm9sc1wiOlxuICAgICAgICAgIHQgPSB0aGlzLl9yZW5kZXJDb250cm9scztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImluZm9cIjpcbiAgICAgICAgICB0ID0gdGhpcy5fcmVuZGVySW5mbztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1lbVwiOlxuICAgICAgICAgIHQgPSB0aGlzLl9yZW5kZXJNZW1vcnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdCA9IHRoaXMuX3JlbmRlckdlbmVyYWxWaWV3O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQuY2FsbCh0aGlzLCBlKTtcbiAgICB9O1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMudXBkYXRlQ29udHJvbGxlci5zdGF0ZSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGUgPSBgbW92ZSAke3RoaXMuX2ZpeGVkUG9zaXRpb24gPT09IFwibGVmdFwiID8gXCJyaWdodFwiIDogXCJsZWZ0XCJ9YDtcbiAgICByZXR1cm4gbmA8ZGl2XG4gICAgICBjbGFzcz0ke18oe1xuICAgICAgXCJmaXhlZC13cmFwcGVyXCI6IDEsXG4gICAgICBbYHBvcy0ke3RoaXMuX2ZpeGVkUG9zaXRpb259YF06IDFcbiAgICB9KX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGV2dG9vbHMtd3JhcHBlciBiZy1wcmltYXJ5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkZXZ0b29scy10b3Atc3RhdGljLXBsYWNlaG9sZGVyXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkZXZ0b29scy10b3AgYmctcHJpbWFyeVwiPlxuICAgICAgICAgIDxoMj5kZXZ0b29sczwvaDI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImRldnRvb2xzLXRvcC1idG5cIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJjb2xsYXBzZVwiXG4gICAgICAgICAgICAgIGNsYXNzPVwidG9wLWJ0blwiXG4gICAgICAgICAgICAgIHRpdGxlPVwiY29sbGFwc2VcIlxuICAgICAgICAgICAgICBAY2xpY2s9JHt0aGlzLl90b2dnbGVFeGFwYW5kZWR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCIyNHB4XCJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjI0cHhcIlxuICAgICAgICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMFYwelwiIGZpbGw9XCJub25lXCIgLz5cbiAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTYgMTloMTJ2Mkg2di0yelwiIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICBhcmlhLWxhYmVsPSR7ZX1cbiAgICAgICAgICAgICAgY2xhc3M9XCJ0b3AtYnRuIHRvZ2dsZS1wb3MtYnRuXCJcbiAgICAgICAgICAgICAgdGl0bGU9JHtlfVxuICAgICAgICAgICAgICBAY2xpY2s9JHt0aGlzLl9jaGFuZ2VGaXhlZFBvc2l0aW9ufVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiMjRweFwiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIyNHB4XCJcbiAgICAgICAgICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMCAwaDI0djI0SDBWMHpcIiBmaWxsPVwibm9uZVwiIC8+XG4gICAgICAgICAgICAgICAgPHBhdGggZD1cIk0xMCA2TDguNTkgNy40MSAxMy4xNyAxMmwtNC41OCA0LjU5TDEwIDE4bDYtNnpcIiAvPlxuICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cImNsb3NlXCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJ0b3AtYnRuXCJcbiAgICAgICAgICAgICAgdGl0bGU9XCJjbG9zZVwiXG4gICAgICAgICAgICAgIEBjbGljaz0ke3RoaXMuX2hhbmRsZUNsb3NlQnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCIyNHB4XCJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjI0cHhcIlxuICAgICAgICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMFYwelwiIGZpbGw9XCJub25lXCIgLz5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZD1cIk0xOSA2LjQxTDE3LjU5IDUgMTIgMTAuNTkgNi40MSA1IDUgNi40MSAxMC41OSAxMiA1IDE3LjU5IDYuNDEgMTkgMTIgMTMuNDEgMTcuNTkgMTkgMTkgMTcuNTkgMTMuNDEgMTIgMTkgNi40MXpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGV2dG9vbHMtYm9keVwiID9oaWRkZW49JHshdGhpcy5fZXhwYW5kZWR9PlxuICAgICAgICAgIDx1bCBjbGFzcz1cInRhYnNcIiBAY2xpY2s9JHt0aGlzLl9oYW5kbGVUYWJDbGlja30+XG4gICAgICAgICAgICAkeyQoXG4gICAgICBBLFxuICAgICAgVyxcbiAgICAgICh0KSA9PiBuYDxsaVxuICAgICAgICAgICAgICAgICAgZGF0YS10YWItdmFsdWU9JHt0fVxuICAgICAgICAgICAgICAgICAgZGF0YS1hY3RpdmU9JHsrKHQgPT09IHRoaXMuX2FjdGl2ZVRhYil9XG4gICAgICAgICAgICAgICAgICBjbGFzcz1cInRhYi1pdGVtXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAke3R9XG4gICAgICAgICAgICAgICAgPC9saT5gXG4gICAgKX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgICR7dGhpcy5fcmVuZGVyVGFiKHRoaXMudXBkYXRlQ29udHJvbGxlci5zdGF0ZSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+YDtcbiAgfVxufTtcbnYuc3R5bGVzID0gdShPdCk7XG5SKFtcbiAgUCgpXG5dLCB2LnByb3RvdHlwZSwgXCJfZXhwYW5kZWRcIiwgMik7XG5SKFtcbiAgUCgpXG5dLCB2LnByb3RvdHlwZSwgXCJfYWN0aXZlVGFiXCIsIDIpO1xuUihbXG4gIFAoKVxuXSwgdi5wcm90b3R5cGUsIFwiX2ZpeGVkUG9zaXRpb25cIiwgMik7XG52ID0gUihbXG4gIGcoVSlcbl0sIHYpO1xuY29uc3QgRnQgPSBoYC5wYWxldHRlLWdyaWR7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoNCwxZnIpO2hlaWdodDo1MHB4O2JvcmRlci1yYWRpdXM6NHB4O292ZXJmbG93OmhpZGRlbjtmb250LXdlaWdodDo4MDA7Zm9udC1zaXplOi44NzVlbX0ucGFsZXR0ZS1ncmlkIC5jb2xvci1ib3h7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5wYWxldHRlLWFydGljbGUgaDN7bWFyZ2luLWJvdHRvbTouMmVtfWA7XG52YXIgVXQgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIGt0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgcSA9IChlLCB0LCBvLCByKSA9PiB7XG4gIGZvciAodmFyIHMgPSByID4gMSA/IHZvaWQgMCA6IHIgPyBrdCh0LCBvKSA6IHQsIGEgPSBlLmxlbmd0aCAtIDEsIGk7IGEgPj0gMDsgYS0tKVxuICAgIChpID0gZVthXSkgJiYgKHMgPSAociA/IGkodCwgbywgcykgOiBpKHMpKSB8fCBzKTtcbiAgcmV0dXJuIHIgJiYgcyAmJiBVdCh0LCBvLCBzKSwgcztcbn07XG5jb25zdCBMdCA9IFwid2FzbTQtcGFsZXR0ZVwiO1xubGV0IEQgPSBjbGFzcyBleHRlbmRzIGYge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLnBhbGV0dGUgPSBbMCwgMCwgMCwgMF0sIHRoaXMuaGVhZGluZyA9IFwiXCI7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBuYDxzZWN0aW9uIGNsYXNzPVwicGFsZXR0ZS1hcnRpY2xlXCI+XG4gICAgICAke3RoaXMuaGVhZGluZyAmJiBuYDxoND4ke3RoaXMuaGVhZGluZ308L2g0PmB9XG4gICAgICA8ZGl2IGNsYXNzPVwicGFsZXR0ZS1ncmlkXCI+XG4gICAgICAgICR7dGhpcy5wYWxldHRlLnNsaWNlKDAsIDQpLm1hcCgoZSkgPT4ge1xuICAgICAgY29uc3QgdCA9IFR0KGUpLCByID0gKChlICYgMjU1KSArIChlID4+IDggJiAyNTUpICsgKGUgPj4gMTYpKSAvIDMgPiAxMjggPyBcImZpbHRlcjogaW52ZXJ0KDEpXCIgOiBcIlwiO1xuICAgICAgcmV0dXJuIG5gPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJjb2xvci1ib3hcIlxuICAgICAgICAgICAgZGF0YS1jb2xvcj1cIiR7dH1cIlxuICAgICAgICAgICAgc3R5bGU9XCJiYWNrZ3JvdW5kOiAke3R9XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPSR7cn0+JHt0fTwvZGl2PlxuICAgICAgICAgIDwvZGl2PmA7XG4gICAgfSl9XG4gICAgICA8L2Rpdj5cbiAgICA8L3NlY3Rpb24+YDtcbiAgfVxufTtcbkQuc3R5bGVzID0gdShGdCk7XG5xKFtcbiAgbCh7IHR5cGU6IEFycmF5IH0pXG5dLCBELnByb3RvdHlwZSwgXCJwYWxldHRlXCIsIDIpO1xucShbXG4gIGwoeyB0eXBlOiBTdHJpbmcsIGF0dHJpYnV0ZTogXCJwYWxldHRlLWhlYWRpbmdcIiB9KVxuXSwgRC5wcm90b3R5cGUsIFwiaGVhZGluZ1wiLCAyKTtcbkQgPSBxKFtcbiAgZyhMdClcbl0sIEQpO1xuY29uc3QgSXQgPSBoYC5nYW1lcGFke3BvaW50ZXItZXZlbnRzOm5vbmU7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnIgMWZyO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO292ZXJmbG93OmhpZGRlbn0uZ2FtZXBhZC1kcGFke3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjM5cHg7aGVpZ2h0OjEyMHB4O2JhY2tncm91bmQ6IzQ0NDtib3JkZXItcmFkaXVzOjlweDtsZWZ0OjQwcHh9LmdhbWVwYWQtZHBhZDpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTIwcHg7aGVpZ2h0OjM5cHg7dG9wOjM5cHg7bGVmdDotMzlweDtiYWNrZ3JvdW5kOiM0NDQ7Ym9yZGVyLXJhZGl1czo5cHg7Y29udGVudDpcIlwifS5nYW1lcGFkLWRwYWQ6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjM5cHg7d2lkdGg6MzlweDt0b3A6MzlweDtib3JkZXItcmFkaXVzOjEwMCU7YmFja2dyb3VuZDojMzMzO2NvbnRlbnQ6XCJcIn0uZ2FtZXBhZC1kcGFkLnByZXNzZWQtbGVmdDpiZWZvcmV7Ym9yZGVyLWxlZnQ6NHB4IHNvbGlkICNhOTM2NzE7d2lkdGg6MTE2cHh9LmdhbWVwYWQtZHBhZC5wcmVzc2VkLXJpZ2h0OmJlZm9yZXtib3JkZXItcmlnaHQ6NHB4IHNvbGlkICNhOTM2NzE7d2lkdGg6MTE2cHh9LmdhbWVwYWQtZHBhZC5wcmVzc2VkLXVwe2JvcmRlci10b3A6NHB4IHNvbGlkICNhOTM2NzF9LmdhbWVwYWQtZHBhZC5wcmVzc2VkLWRvd257Ym9yZGVyLWJvdHRvbTo0cHggc29saWQgI2E5MzY3MTtoZWlnaHQ6MTE2cHh9LmdhbWVwYWQtYWN0aW9uMSwuZ2FtZXBhZC1hY3Rpb24ye3dpZHRoOjYwcHg7aGVpZ2h0OjYwcHg7Ym9yZGVyOjRweCBzb2xpZCAjYTkzNjcxO2JvcmRlci1yYWRpdXM6NTBweDtmbGV4OjAgMCBhdXRvfS5nYW1lcGFkLWFjdGlvbjF7cG9zaXRpb246cmVsYXRpdmU7cmlnaHQ6NjBweH0uZ2FtZXBhZC1hY3Rpb24xLnByZXNzZWQsLmdhbWVwYWQtYWN0aW9uMi5wcmVzc2Vke2JhY2tncm91bmQ6I2E5MzY3MX0uZ2FtZXBhZC1hY3Rpb25ze2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6Y29sdW1uLXJldmVyc2Ugbm93cmFwO2FsaWduLWl0ZW1zOmZsZXgtZW5kO3Bvc2l0aW9uOnJlbGF0aXZlfWA7XG52YXIgVnQgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIGp0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgbSA9IChlLCB0LCBvLCByKSA9PiB7XG4gIGZvciAodmFyIHMgPSByID4gMSA/IHZvaWQgMCA6IHIgPyBqdCh0LCBvKSA6IHQsIGEgPSBlLmxlbmd0aCAtIDEsIGk7IGEgPj0gMDsgYS0tKVxuICAgIChpID0gZVthXSkgJiYgKHMgPSAociA/IGkodCwgbywgcykgOiBpKHMpKSB8fCBzKTtcbiAgcmV0dXJuIHIgJiYgcyAmJiBWdCh0LCBvLCBzKSwgcztcbn07XG5jb25zdCBOdCA9IFwid2FzbTQtZ2FtZXBhZFwiO1xubGV0IGQgPSBjbGFzcyBleHRlbmRzIGYge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLmFjdGlvbjEgPSAhMSwgdGhpcy5hY3Rpb24yID0gITEsIHRoaXMudXAgPSAhMSwgdGhpcy5kb3duID0gITEsIHRoaXMubGVmdCA9ICExLCB0aGlzLnJpZ2h0ID0gITEsIHRoaXMucmF3VmFsdWUgPSAwO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBlID0gdGhpcy51cCB8fCAhISh0aGlzLnJhd1ZhbHVlICYgb3QpLCB0ID0gdGhpcy5kb3duIHx8ICEhKHRoaXMucmF3VmFsdWUgJiBzdCksIG8gPSB0aGlzLmxlZnQgfHwgISEodGhpcy5yYXdWYWx1ZSAmIHR0KSwgciA9IHRoaXMucmlnaHQgfHwgISEodGhpcy5yYXdWYWx1ZSAmIGV0KSwgcyA9IHRoaXMuYWN0aW9uMSB8fCAhISh0aGlzLnJhd1ZhbHVlICYgSiksIGEgPSB0aGlzLmFjdGlvbjIgfHwgISEodGhpcy5yYXdWYWx1ZSAmIFEpO1xuICAgIHJldHVybiBuYDxkaXYgY2xhc3M9XCJnYW1lcGFkXCI+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwiJHtfKHtcbiAgICAgIFwiZ2FtZXBhZC1kcGFkXCI6IDEsXG4gICAgICBcInByZXNzZWQtcmlnaHRcIjogcixcbiAgICAgIFwicHJlc3NlZC1kb3duXCI6IHQsXG4gICAgICBcInByZXNzZWQtbGVmdFwiOiBvLFxuICAgICAgXCJwcmVzc2VkLXVwXCI6IGVcbiAgICB9KX1cIlxuICAgICAgPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImdhbWVwYWQtYWN0aW9uc1wiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9XCIke18oeyBcImdhbWVwYWQtYWN0aW9uMVwiOiAxLCBwcmVzc2VkOiBzIH0pfVwiXG4gICAgICAgID48L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzPVwiJHtfKHsgXCJnYW1lcGFkLWFjdGlvbjJcIjogMSwgcHJlc3NlZDogYSB9KX1cIlxuICAgICAgICA+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gO1xuICB9XG59O1xuZC5zdHlsZXMgPSB1KEl0KTtcbm0oW1xuICBsKHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogITAsIGF0dHJpYnV0ZTogXCJhY3Rpb24tMVwiIH0pXG5dLCBkLnByb3RvdHlwZSwgXCJhY3Rpb24xXCIsIDIpO1xubShbXG4gIGwoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiAhMCwgYXR0cmlidXRlOiBcImFjdGlvbi0yXCIgfSlcbl0sIGQucHJvdG90eXBlLCBcImFjdGlvbjJcIiwgMik7XG5tKFtcbiAgbCh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6ICEwIH0pXG5dLCBkLnByb3RvdHlwZSwgXCJ1cFwiLCAyKTtcbm0oW1xuICBsKHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogITAgfSlcbl0sIGQucHJvdG90eXBlLCBcImRvd25cIiwgMik7XG5tKFtcbiAgbCh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6ICEwIH0pXG5dLCBkLnByb3RvdHlwZSwgXCJsZWZ0XCIsIDIpO1xubShbXG4gIGwoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiAhMCB9KVxuXSwgZC5wcm90b3R5cGUsIFwicmlnaHRcIiwgMik7XG5tKFtcbiAgbCh7IHR5cGU6IE51bWJlciwgcmVmbGVjdDogITAsIGF0dHJpYnV0ZTogXCJyYXctdmFsdWVcIiB9KVxuXSwgZC5wcm90b3R5cGUsIFwicmF3VmFsdWVcIiwgMik7XG5kID0gbShbXG4gIGcoTnQpXG5dLCBkKTtcbnZhciBHdCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgSHQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLCB4ID0gKGUsIHQsIG8sIHIpID0+IHtcbiAgZm9yICh2YXIgcyA9IHIgPiAxID8gdm9pZCAwIDogciA/IEh0KHQsIG8pIDogdCwgYSA9IGUubGVuZ3RoIC0gMSwgaTsgYSA+PSAwOyBhLS0pXG4gICAgKGkgPSBlW2FdKSAmJiAocyA9IChyID8gaSh0LCBvLCBzKSA6IGkocykpIHx8IHMpO1xuICByZXR1cm4gciAmJiBzICYmIEd0KHQsIG8sIHMpLCBzO1xufTtcbmNvbnN0IFl0ID0gXCJ3YXNtNC1jb250cm9scy12aWV3XCI7XG5sZXQgcCA9IGNsYXNzIGV4dGVuZHMgZiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMubW91c2VCdXR0b25zID0gMCwgdGhpcy5nYW1lcGFkcyA9IFswLCAwLCAwLCAwXSwgdGhpcy5tb3VzZVggPSAwLCB0aGlzLm1vdXNlWSA9IDAsIHRoaXMuaGVhZGluZyA9IFwiXCI7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBuYDxhcnRpY2xlIGNsYXNzPVwiYmctcHJpbWFyeVwiIHBhcnQ9XCJyb290LXZpZXdcIj5cbiAgICAgICR7dGhpcy5oZWFkaW5nICYmIG5gPGgzIGNsYXNzPVwiaGVhZGluZ1wiPiR7dGhpcy5oZWFkaW5nfTwvaDM+YH1cbiAgICAgIDxzZWN0aW9uIGNsYXNzPVwibW91c2Utc2VjdGlvblwiPlxuICAgICAgICA8aDQgY2xhc3M9XCJoZWFkaW5nXCI+bW91c2UgcG9zaXRpb248L2g0PlxuICAgICAgICA8dWwgY2xhc3M9XCJtb3VzZS1wb3MtbGlzdFwiPlxuICAgICAgICAgIDxsaSBjbGFzcz1cImluZm8tYm94IG1vdXNlLXBvc1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXByaW1hcnlcIj54OiAke3RoaXMubW91c2VYfTwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDxsaSBjbGFzcz1cImluZm8tYm94IG1vdXNlLXBvc1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXByaW1hcnlcIj55OiAke3RoaXMubW91c2VZfTwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9zZWN0aW9uPlxuICAgICAgPHdhc200LW1vdXNlLWJ1dHRvbnNcbiAgICAgICAgaGVhZGluZz1cIm1vdXNlIGJ1dHRvbnNcIlxuICAgICAgICByYXctdmFsdWU9JHt0aGlzLm1vdXNlQnV0dG9uc31cbiAgICAgID48L3dhc200LW1vdXNlLWJ1dHRvbnM+XG4gICAgICAke3RoaXMuZ2FtZXBhZHMubWFwKFxuICAgICAgKGUsIHQpID0+IG5gPHNlY3Rpb24+XG4gICAgICAgICAgICA8aDQ+Z2FtZXBhZCAke3QgKyAxfTwvaDQ+XG4gICAgICAgICAgICA8d2FzbTQtZ2FtZXBhZCByYXctdmFsdWU9JHtlfT48L3dhc200LWdhbWVwYWQ+XG4gICAgICAgICAgPC9zZWN0aW9uPmBcbiAgICApfVxuICAgIDwvYXJ0aWNsZT5gO1xuICB9XG59O1xucC5zdHlsZXMgPSB1KCk7XG54KFtcbiAgbCh7IHR5cGU6IE51bWJlciB9KVxuXSwgcC5wcm90b3R5cGUsIFwibW91c2VCdXR0b25zXCIsIDIpO1xueChbXG4gIGwoeyB0eXBlOiBBcnJheSB9KVxuXSwgcC5wcm90b3R5cGUsIFwiZ2FtZXBhZHNcIiwgMik7XG54KFtcbiAgbCh7IHR5cGU6IE51bWJlciB9KVxuXSwgcC5wcm90b3R5cGUsIFwibW91c2VYXCIsIDIpO1xueChbXG4gIGwoeyB0eXBlOiBOdW1iZXIgfSlcbl0sIHAucHJvdG90eXBlLCBcIm1vdXNlWVwiLCAyKTtcbngoW1xuICBsKHsgdHlwZTogU3RyaW5nLCByZWZsZWN0OiAhMCB9KVxuXSwgcC5wcm90b3R5cGUsIFwiaGVhZGluZ1wiLCAyKTtcbnAgPSB4KFtcbiAgZyhZdClcbl0sIHApO1xuY29uc3QgcXQgPSBoYC5tb3VzZS1idXR0b25ze2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KDMsMWZyKTtncmlkLWdhcDo4cHh9YDtcbnZhciBXdCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgWHQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLCB5ID0gKGUsIHQsIG8sIHIpID0+IHtcbiAgZm9yICh2YXIgcyA9IHIgPiAxID8gdm9pZCAwIDogciA/IFh0KHQsIG8pIDogdCwgYSA9IGUubGVuZ3RoIC0gMSwgaTsgYSA+PSAwOyBhLS0pXG4gICAgKGkgPSBlW2FdKSAmJiAocyA9IChyID8gaSh0LCBvLCBzKSA6IGkocykpIHx8IHMpO1xuICByZXR1cm4gciAmJiBzICYmIFd0KHQsIG8sIHMpLCBzO1xufTtcbmNvbnN0IFp0ID0gXCJ3YXNtNC1tb3VzZS1idXR0b25zXCI7XG5sZXQgYyA9IGNsYXNzIGV4dGVuZHMgZiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMubWlkZGxlID0gITEsIHRoaXMucmlnaHQgPSAhMSwgdGhpcy5sZWZ0ID0gITEsIHRoaXMucmF3VmFsdWUgPSAwLCB0aGlzLmhlYWRpbmcgPSBcIlwiO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBlID0ge1xuICAgICAgbGVmdDogdGhpcy5sZWZ0IHx8ICEhKHRoaXMucmF3VmFsdWUgJiBydCksXG4gICAgICBtaWRkbGU6IHRoaXMubWlkZGxlIHx8ICEhKHRoaXMucmF3VmFsdWUgJiBpdCksXG4gICAgICByaWdodDogdGhpcy5yaWdodCB8fCAhISh0aGlzLnJhd1ZhbHVlICYgYXQpXG4gICAgfTtcbiAgICByZXR1cm4gbmA8c2VjdGlvbj5cbiAgICAgICR7dGhpcy5oZWFkaW5nICYmIG5gPGg0IGNsYXNzPVwiaGVhZGluZ1wiPiR7dGhpcy5oZWFkaW5nfTwvaDQ+YH1cbiAgICAgIDx1bCBjbGFzcz1cIm1vdXNlLWJ1dHRvbnNcIj5cbiAgICAgICAgJHtPYmplY3QuZW50cmllcyhlKS5tYXAoXG4gICAgICAoW3QsIG9dKSA9PiBuYDxsaVxuICAgICAgICAgICAgICBjbGFzcz0ke18oe1xuICAgICAgICBcImluZm8tYm94XCI6IDEsXG4gICAgICAgIGRpbTogIW8sXG4gICAgICAgIFwidGV4dC1wcmltYXJ5XCI6IG9cbiAgICAgIH0pfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAke3R9XG4gICAgICAgICAgICA8L2xpPmBcbiAgICApfVxuICAgICAgPC91bD5cbiAgICA8L3NlY3Rpb24+IGA7XG4gIH1cbn07XG5jLnN0eWxlcyA9IHUocXQpO1xueShbXG4gIGwoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiAhMCB9KVxuXSwgYy5wcm90b3R5cGUsIFwibWlkZGxlXCIsIDIpO1xueShbXG4gIGwoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiAhMCB9KVxuXSwgYy5wcm90b3R5cGUsIFwicmlnaHRcIiwgMik7XG55KFtcbiAgbCh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6ICEwIH0pXG5dLCBjLnByb3RvdHlwZSwgXCJsZWZ0XCIsIDIpO1xueShbXG4gIGwoeyB0eXBlOiBOdW1iZXIsIHJlZmxlY3Q6ICEwLCBhdHRyaWJ1dGU6IFwicmF3LXZhbHVlXCIgfSlcbl0sIGMucHJvdG90eXBlLCBcInJhd1ZhbHVlXCIsIDIpO1xueShbXG4gIGwoeyB0eXBlOiBTdHJpbmcsIHJlZmxlY3Q6ICEwIH0pXG5dLCBjLnByb3RvdHlwZSwgXCJoZWFkaW5nXCIsIDIpO1xuYyA9IHkoW1xuICBnKFp0KVxuXSwgYyk7XG5jb25zdCBLdCA9IGhgOmhvc3R7Y29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtdGV4dC1wcmltYXJ5LCAjZmZmKTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLWJnLXByaW1hcnksICMyMDIwMjApfS50ZXh0LXByaW1hcnl7Y29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtdGV4dC1wcmltYXJ5LCAjZmZmKSFpbXBvcnRhbnR9LnRleHQtc2Vjb25kYXJ5e2NvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtc2Vjb25kYXJ5LCByZ2JhKDI1NSwgMjU1LCAyNTUsIC43KSkhaW1wb3J0YW50fS5iZy1wcmltYXJ5e2JhY2tncm91bmQtY29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtYmctcHJpbWFyeSwgIzIwMjAyMCkhaW1wb3J0YW50fS5iZy1zZWNvbmRhcnl7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy1iZy1zZWNvbmRhcnksICM0NDQpIWltcG9ydGFudH06aG9zdHtmb250LXNpemU6dmFyKC0td2FzbTQtZGV2dG9vbHMtdGV4dC1zaXplLCAxNnB4KTtmb250LWZhbWlseTptb25vc3BhY2U7dGV4dC1yZW5kZXJpbmc6b3B0aW1pemVMZWdpYmlsaXR5Oy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWR9LnRleHQtYWxpZ24tbGVmdHt0ZXh0LWFsaWduOmxlZnQhaW1wb3J0YW50fS50ZXh0LWFsaWduLXJpZ2h0e3RleHQtYWxpZ246cmlnaHQhaW1wb3J0YW50fS50ZXh0LWFsaWduLWNlbnRlcnt0ZXh0LWFsaWduOmNlbnRlciFpbXBvcnRhbnR9LmFjdGl2ZXtjb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXByaW1hcnksICNmZmYpfS5kaW17b3BhY2l0eTouNH0uZGlzcGxheS1ibG9ja3tkaXNwbGF5OmJsb2NrIWltcG9ydGFudH0uaW5mby1ib3h7dGV4dC1hbGlnbjpjZW50ZXI7cGFkZGluZzouMmVtIC40ZW07Y29sb3I6dmFyKC0td2FzbTQtZGV2dG9vbHMtdGV4dC1zZWNvbmRhcnksIHJnYmEoMjU1LCAyNTUsIDI1NSwgLjcpKTtiYWNrZ3JvdW5kOnZhcigtLXdhc200LWRldnRvb2xzLWJnLXNlY29uZGFyeSwgIzQ0NCk7Ym9yZGVyLXJhZGl1czo0cHg7bWluLXdpZHRoOjYwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7Zm9udC1zaXplOi44NzVlbX0udGFibGV7dGV4dC1hbGlnbjpsZWZ0O292ZXJmbG93OmhpZGRlbjtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7bWFyZ2luLWJvdHRvbTowO2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItY29sb3I6Y3VycmVudENvbG9yO2JvcmRlci13aWR0aDoxcHg7bWF4LXdpZHRoOjEwMCU7Zm9udC1zaXplOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtc2l6ZSwgMTZweCl9LnRhYmxlIHRib2R5LC50YWJsZSB0aGVhZCwudGFibGUgdGZvb3QsLnRhYmxlIHRyLC50YWJsZSB0ZCwudGFibGUgdGh7b3ZlcmZsb3ctd3JhcDpicmVhay13b3JkO3RleHQtYWxpZ246aW5oZXJpdDtmb250LXNpemU6aW5oZXJpdH0udGFibGUgdGQsLnRhYmxlIHRoe2JvcmRlci13aWR0aDowO2JvcmRlci1zdHlsZTpub25lO2JvcmRlci1jb2xvcjppbmhlcml0O2ZvbnQtc2l6ZTouODc1ZW07cGFkZGluZzouM2VtIC40ZW07bWluLXdpZHRoOjUwcHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgY3VycmVudENvbG9yfWEsYTp2aXNpdGVke2NvbG9yOnZhcigtLXdhc200LWRldnRvb2xzLXRleHQtcHJpbWFyeSwgI2ZmZik7b3V0bGluZTpub25lO2ZvbnQtc2l6ZTouODc1ZW19YTpmb2N1c3tjb2xvcjp2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXNlY29uZGFyeSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAuNykpfS5saXN0e3BhZGRpbmctbGVmdDoxLjJlbX0ubGlzdCBsaXtsaXN0LXN0eWxlOmRpc2N9Lm1lbW9yeS1tYXB7aW1hZ2UtcmVuZGVyaW5nOnBpeGVsYXRlZDtib3JkZXI6MnB4IHNvbGlkIGdyYXk7Ym9yZGVyLXJhZGl1czo0cHg7ZmxleDowIDAgYXV0bzthbGlnbi1zZWxmOmNlbnRlcn0uY29sb3ItZm9ybXVsYXtmb250LXNpemU6LjY1ZW07cGFkZGluZzouMWVtO21heC13aWR0aDoyODBweH0ubWVtb3J5LW1hcC13cmFwcGVye2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjAgYXV0b30uaGV4LXZpZXd7cGFkZGluZzouMmVtIDA7bWluLWhlaWdodDo4MHB4O2ZvbnQtc2l6ZTouNjFlbTt3aWR0aDptYXgtY29udGVudDt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3cteDpoaWRkZW47dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5oZXgtdmlldyAuaGV4LWhlYWRlcntib3JkZXItYm90dG9tOjFweCBzb2xpZCB2YXIoLS13YXNtNC1kZXZ0b29scy10ZXh0LXByaW1hcnksICNmZmYpO21hcmdpbi1ib3R0b206LjVlbTtwYWRkaW5nOi41ZW0gMH0uaGV4LWZvcm17Zm9udC1zaXplOi44NzVlbX0uaGV4LWZvcm0gaW5wdXRbdHlwZT1udW1iZXJde3dpZHRoOjc1cHg7Ym9yZGVyOm5vbmU7bWFyZ2luOjA7cGFkZGluZzouMmVtO2xpbmUtaGVpZ2h0OjEuMTU7Ym9yZGVyLXJhZGl1czo0cHh9LmhleC1mb3JtIC5mb3JtLWdyb3Vwe2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDthbGlnbi1pdGVtczpjZW50ZXI7Z3JpZC1nYXA6NHB4fWA7XG52YXIgSnQgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIFF0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgVCA9IChlLCB0LCBvLCByKSA9PiB7XG4gIGZvciAodmFyIHMgPSByID4gMSA/IHZvaWQgMCA6IHIgPyBRdCh0LCBvKSA6IHQsIGEgPSBlLmxlbmd0aCAtIDEsIGk7IGEgPj0gMDsgYS0tKVxuICAgIChpID0gZVthXSkgJiYgKHMgPSAociA/IGkodCwgbywgcykgOiBpKHMpKSB8fCBzKTtcbiAgcmV0dXJuIHIgJiYgcyAmJiBKdCh0LCBvLCBzKSwgcztcbn07XG5jb25zdCB0ZSA9IFwid2FzbTQtbWVtb3J5LXZpZXdcIiwgYiA9IDI1NiwgTSA9IDY1NTIwLCBlZSA9IFwiYiA9IChieXRlICYgMHhmKSA8PCA0OyBnID0gKGJ5dGUgJiAweGYwKVwiO1xubGV0IHcgPSBjbGFzcyBleHRlbmRzIGYge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLmhlYWRpbmcgPSBcIlwiLCB0aGlzLm1lbW9yeVZpZXcgPSBudWxsLCB0aGlzLmhleEVkaXRvciA9IHtcbiAgICAgIHZhbHVlczoge1xuICAgICAgICBmaXJzdFJvdzogMFxuICAgICAgfVxuICAgIH0sIHRoaXMuX2hleFZpZXdGaXJzdFJvdyA9IFgoMCwgMTYpLm1hcCgoZSkgPT4gRShlKSkuam9pbihcIiBcIiksIHRoaXMubWVtb3J5Q2FudmFzUmVmID0gbXQoKSwgdGhpcy5pbWFnZURhdGEgPSBuZXcgSW1hZ2VEYXRhKGIsIGIpLCB0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3RJZCA9IDAsIHRoaXMuX3BhaW50TWVtb3J5Q2FudmFzID0gKCkgPT4ge1xuICAgICAgdmFyIG87XG4gICAgICBjb25zdCBlID0gKG8gPSB0aGlzLm1lbW9yeUNhbnZhc1JlZi52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IG8uZ2V0Q29udGV4dChcIjJkXCIpLCB0ID0gdGhpcy5tZW1vcnlWaWV3O1xuICAgICAgaWYgKCEoIXQgfHwgIWUpKSB7XG4gICAgICAgIGUuY2xlYXJSZWN0KDAsIDAsIGIsIGIpO1xuICAgICAgICBmb3IgKGxldCByID0gMCwgcyA9IHRoaXMuaW1hZ2VEYXRhLmRhdGEuYnl0ZUxlbmd0aDsgciA8IHM7IHIgKz0gNCkge1xuICAgICAgICAgIGNvbnN0IGEgPSB0LmdldFVpbnQ4KHIgLyA0KSwgaSA9IGEgJiAyNDAsIGN0ID0gKGEgJiAxNSkgPDwgNDtcbiAgICAgICAgICB0aGlzLmltYWdlRGF0YS5kYXRhW3JdID0gMCwgdGhpcy5pbWFnZURhdGEuZGF0YVtyICsgMV0gPSBpLCB0aGlzLmltYWdlRGF0YS5kYXRhW3IgKyAyXSA9IGN0LCB0aGlzLmltYWdlRGF0YS5kYXRhW3IgKyAzXSA9IDI1NTtcbiAgICAgICAgfVxuICAgICAgICBlLnB1dEltYWdlRGF0YSh0aGlzLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBfaGFuZGxlSGV4RWRpdG9yQ2hhbmdlKGUpIHtcbiAgICBjb25zdCB0ID0gZS5jb21wb3NlZFBhdGgoKVswXTtcbiAgICBpZiAodC5uYW1lID09PSBcImZpcnN0Um93XCIpIHtcbiAgICAgIGNvbnN0IG8gPSBOdW1iZXIodC52YWx1ZSk7XG4gICAgICBOdW1iZXIuaXNGaW5pdGUobykgJiYgbyAlIDE2ID09PSAwICYmIG8gPj0gMCAmJiBvIDw9IE0gJiYgbyAhPT0gdGhpcy5oZXhFZGl0b3IudmFsdWVzLmZpcnN0Um93ICYmICh0aGlzLmhleEVkaXRvciA9IHtcbiAgICAgICAgLi4udGhpcy5oZXhFZGl0b3IsXG4gICAgICAgIHZhbHVlczoge1xuICAgICAgICAgIC4uLnRoaXMuaGV4RWRpdG9yLnZhbHVlcyxcbiAgICAgICAgICBmaXJzdFJvdzogb1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX3JlbmRlckhleFZpZXcoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB7IGZpcnN0Um93OiB0IH0gPSB0aGlzLmhleEVkaXRvci52YWx1ZXMsIHIgPSBYKDAsIDgpLm1hcCgoYSkgPT4gdCArIGEgKiAxNikuZmlsdGVyKChhKSA9PiBhIDw9IE0pLm1hcCgoYSkgPT4gQXQoZSwgYSkpLCBzID0gYCR7RSh0LCA0KX0gLSAke0UoXG4gICAgICB0ICsgMTYgKiByLmxlbmd0aCAtIDEsXG4gICAgICA0XG4gICAgKX1gO1xuICAgIHJldHVybiBuYFxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxoND5oZXggdmlldzwvaDQ+XG4gICAgICAgIDxmb3JtIEBpbnB1dD0ke3RoaXMuX2hhbmRsZUhleEVkaXRvckNoYW5nZX0gY2xhc3M9XCJoZXgtZm9ybVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgaWQ9XCJoZXgtdmlldy1maXJzdC1yb3dcIlxuICAgICAgICAgICAgICBuYW1lPVwiZmlyc3RSb3dcIlxuICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgbWluPVwiMFwiXG4gICAgICAgICAgICAgIG1heD0ke019XG4gICAgICAgICAgICAgIHN0ZXA9XCIxNlwiXG4gICAgICAgICAgICAvPjxsYWJlbCBmb3I9XCJoZXgtdmlldy1maXJzdC1yb3dcIj5yYW5nZTogJHtzfTwvbGFiZWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhleC12aWV3XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImhleC1oZWFkZXJcIj4ke3RoaXMuX2hleFZpZXdGaXJzdFJvd308L2Rpdj5cbiAgICAgICAgICAke3IubWFwKChhKSA9PiBuYDxkaXY+JHthfTwvZGl2PmApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICBgO1xuICB9XG4gIGZpcnN0VXBkYXRlZCgpIHtcbiAgICB0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3RJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXG4gICAgICB0aGlzLl9wYWludE1lbW9yeUNhbnZhc1xuICAgICk7XG4gIH1cbiAgdXBkYXRlZChlKSB7XG4gICAgZS5oYXMoXCJtZW1vcnlWaWV3XCIpICYmICh0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3RJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXG4gICAgICB0aGlzLl9wYWludE1lbW9yeUNhbnZhc1xuICAgICkpO1xuICB9XG4gIC8vIENsZWFuIHVwIHJBRiByZXF1ZXN0cyB0aGF0IGhhdmUgbm90IGJlZW4gZXhlY3V0ZWQgeWV0LlxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3RJZCAmJiAod2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGlvbkZyYW1lUmVxdWVzdElkKSwgdGhpcy5fYW5pbWF0aW9uRnJhbWVSZXF1ZXN0SWQgPSAwKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG5gPGFydGljbGUgY2xhc3M9XCJiZy1wcmltYXJ5XCIgcGFydD1cInJvb3Qtdmlld1wiPlxuICAgICAgPHNlY3Rpb24gY2xhc3M9XCJtZW1vcnktbWFwLXdyYXBwZXJcIj5cbiAgICAgICAgPGg0Pndhc20gbWVtb3J5ICg2NEtpQik8L2g0PlxuICAgICAgICA8Y2FudmFzXG4gICAgICAgICAgd2lkdGg9JHtifVxuICAgICAgICAgIGhlaWdodD0ke2J9XG4gICAgICAgICAgY2xhc3M9XCJtZW1vcnktbWFwXCJcbiAgICAgICAgICAke2h0KHRoaXMubWVtb3J5Q2FudmFzUmVmKX1cbiAgICAgICAgPjwvY2FudmFzPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sb3ItZm9ybXVsYVwiPiR7ZWV9PC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICAke3RoaXMuX3JlbmRlckhleFZpZXcodGhpcy5tZW1vcnlWaWV3KX1cbiAgICA8L2FydGljbGU+YDtcbiAgfVxufTtcbncuc3R5bGVzID0gdShLdCk7XG5UKFtcbiAgbCh7IHR5cGU6IFN0cmluZywgcmVmbGVjdDogITAgfSlcbl0sIHcucHJvdG90eXBlLCBcImhlYWRpbmdcIiwgMik7XG5UKFtcbiAgbCh7IHR5cGU6IE9iamVjdCwgcmVmbGVjdDogITEgfSlcbl0sIHcucHJvdG90eXBlLCBcIm1lbW9yeVZpZXdcIiwgMik7XG5UKFtcbiAgUCgpXG5dLCB3LnByb3RvdHlwZSwgXCJoZXhFZGl0b3JcIiwgMik7XG53ID0gVChbXG4gIGcodGUpXG5dLCB3KTtcbnZhciBvZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc2UgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLCBwdCA9IChlLCB0LCBvLCByKSA9PiB7XG4gIGZvciAodmFyIHMgPSByID4gMSA/IHZvaWQgMCA6IHIgPyBzZSh0LCBvKSA6IHQsIGEgPSBlLmxlbmd0aCAtIDEsIGk7IGEgPj0gMDsgYS0tKVxuICAgIChpID0gZVthXSkgJiYgKHMgPSAociA/IGkodCwgbywgcykgOiBpKHMpKSB8fCBzKTtcbiAgcmV0dXJuIHIgJiYgcyAmJiBvZSh0LCBvLCBzKSwgcztcbn07XG5jb25zdCByZSA9IFwid2FzbTQtaW5mby12aWV3XCIsIGFlID0gW1xuICB7IGtleTogXCIyXCIsIGRlc2NyaXB0aW9uOiBcIlNhdmUgc3RhdGVcIiB9LFxuICB7IGtleTogXCI0XCIsIGRlc2NyaXB0aW9uOiBcIkxvYWQgc3RhdGVcIiB9LFxuICB7IGtleTogXCJSXCIsIGRlc2NyaXB0aW9uOiBcIlJlYm9vdCBjYXJ0cmlkZ2VcIiB9LFxuICB7IGtleTogXCJGOFwiLCBkZXNjcmlwdGlvbjogXCJPcGVuIGRldnRvb2xzXCIgfSxcbiAgeyBrZXk6IFwiRjlcIiwgZGVzY3JpcHRpb246IFwiVGFrZSBzY3JlZW5zaG90XCIgfSxcbiAgeyBrZXk6IFwiRjEwXCIsIGRlc2NyaXB0aW9uOiBcIlJlY29yZCA0IHNlY29uZCB2aWRlb1wiIH0sXG4gIHsga2V5OiBcIkYxMVwiLCBkZXNjcmlwdGlvbjogXCJGdWxsc2NyZWVuXCIgfVxuXSwgaWUgPSBbXG4gIHsgbGFiZWw6IFwid2Vic2l0ZVwiLCBocmVmOiBcImh0dHBzOi8vd2FzbTQub3JnL1wiIH0sXG4gIHsgbGFiZWw6IFwiZG9jc1wiLCBocmVmOiBcImh0dHBzOi8vd2FzbTQub3JnL2RvY3NcIiB9LFxuICB7IGxhYmVsOiBcImdpdGh1YlwiLCBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9hZHVyb3Mvd2FzbTRcIiB9XG5dO1xubGV0IE8gPSBjbGFzcyBleHRlbmRzIGYge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLmhlYWRpbmcgPSBcIlwiO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbmBcbiAgICAgIDxhcnRpY2xlIGNsYXNzPVwiYmctcHJpbWFyeVwiIHBhcnQ9XCJyb290LXZpZXdcIj5cbiAgICAgICAgJHt0aGlzLmhlYWRpbmcgJiYgbmA8aDMgY2xhc3M9XCJoZWFkaW5nXCI+JHt0aGlzLmhlYWRpbmd9PC9oMz5gfVxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICA8aDQ+bGlua3M8L2g0PlxuICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3RcIj5cbiAgICAgICAgICAgICR7JChcbiAgICAgIGllLFxuICAgICAgKHsgaHJlZjogZSB9KSA9PiBlLFxuICAgICAgKHsgaHJlZjogZSwgbGFiZWw6IHQgfSkgPT4gbmA8bGk+XG4gICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGhyZWY9JHtlfT4ke3R9PC9hPlxuICAgICAgICAgICAgICAgIDwvbGk+YFxuICAgICl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICA8aDQ+a2V5YmluZGluZ3M8L2g0PlxuICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlXCI+XG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGg+a2V5PC90aD5cbiAgICAgICAgICAgICAgICA8dGg+ZGVzY3JpcHRpb248L3RoPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgJHskKFxuICAgICAgYWUsXG4gICAgICAoeyBrZXk6IGUgfSkgPT4gZSxcbiAgICAgICh7IGtleTogZSwgZGVzY3JpcHRpb246IHQgfSkgPT4gbmA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD4ke2V9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7dH08L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj5gXG4gICAgKX1cbiAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICA8aDQ+bWVtb3J5IG1hcDwvaDQ+XG4gICAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGVcIj5cbiAgICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0aD5hZGRyZXNzPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+c2l6ZSAoYnl0ZXMpPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+ZGVzY3JpcHRpb248L3RoPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgJHskKFxuICAgICAgT2JqZWN0LmVudHJpZXMoZHQpLFxuICAgICAgKFtlLCB7IG9mZnNldDogdCB9XSkgPT4gdCxcbiAgICAgIChbZSwgeyBvZmZzZXQ6IHQsIGxlbjogbyB9XSkgPT4gbmA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD4weCR7RSh0KX08L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+JHtvfTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD4ke2V9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDwvdHI+YFxuICAgICl9XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDwvYXJ0aWNsZT5cbiAgICBgO1xuICB9XG59O1xuTy5zdHlsZXMgPSB1KCk7XG5wdChbXG4gIGwoeyB0eXBlOiBTdHJpbmcsIHJlZmxlY3Q6ICEwIH0pXG5dLCBPLnByb3RvdHlwZSwgXCJoZWFkaW5nXCIsIDIpO1xuTyA9IHB0KFtcbiAgZyhyZSlcbl0sIE8pO1xuY2xhc3MgbmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1vdXNlQnV0dG9ucyA9IDAsIHRoaXMuZ2FtZXBhZHMgPSBbMCwgMCwgMCwgMF0sIHRoaXMudXBkYXRlID0gKHQpID0+IHtcbiAgICAgIHRoaXMubW91c2VCdXR0b25zID0gdGhpcy5tb3VzZUJ1dHRvbnMgfCB0LmdldFVpbnQ4KEIpO1xuICAgICAgZm9yIChsZXQgbyA9IDAsIHIgPSB0aGlzLmdhbWVwYWRzLmxlbmd0aDsgbyA8IHI7IG8rKylcbiAgICAgICAgdGhpcy5nYW1lcGFkc1tvXSA9IHQuZ2V0VWludDgoXG4gICAgICAgICAgd3RbYEFERFJfR0FNRVBBRCR7byArIDF9YF1cbiAgICAgICAgKSB8IHRoaXMuZ2FtZXBhZHNbb107XG4gICAgfSwgdGhpcy5mbHVzaCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHQgPSB7XG4gICAgICAgIG1vdXNlQnV0dG9uczogdGhpcy5tb3VzZUJ1dHRvbnMsXG4gICAgICAgIGdhbWVwYWRzOiB0aGlzLmdhbWVwYWRzLnNsaWNlKClcbiAgICAgIH07XG4gICAgICByZXR1cm4gdGhpcy5tb3VzZUJ1dHRvbnMgPSAwLCB0aGlzLmdhbWVwYWRzLmZpbGwoMCksIHQ7XG4gICAgfTtcbiAgfVxufVxuY2xhc3MgZmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9lbmFibGVkID0gITEsIHRoaXMuX2J1ZmZlcmVkRGF0YSA9IG5ldyBuZSgpLCB0aGlzLl9mcHNCdWZmZXIgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sIHRoaXMuX2Zwc0J1ZmZlcklkeCA9IDAsIHRoaXMuX2NhbGNBdmdGUFMgPSAoKSA9PiB7XG4gICAgICBsZXQgdCA9IHRoaXMuX2Zwc0J1ZmZlclswXTtcbiAgICAgIGZvciAobGV0IG8gPSAxOyBvIDwgMTA7IG8rKylcbiAgICAgICAgdCArPSB0aGlzLl9mcHNCdWZmZXJbb107XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcih0IC8gMTApO1xuICAgIH0sIHRoaXMuX25leHRGUFNCdWZmZXJJZHggPSAoKSA9PiAodGhpcy5fZnBzQnVmZmVySWR4ID09IDkgPyB0aGlzLl9mcHNCdWZmZXJJZHggPSAwIDogdGhpcy5fZnBzQnVmZmVySWR4KyssIHRoaXMuX2Zwc0J1ZmZlcklkeCksIHRoaXMudXBkYXRlQ29tcGxldGVkID0gKHQsIG8pID0+IHtcbiAgICAgIHRoaXMuX2VuYWJsZWQgJiYgKHRoaXMuX2Zwc0J1ZmZlclt0aGlzLl9uZXh0RlBTQnVmZmVySWR4KCldID0gMWUzIC8gbywgdGhpcy5fYnVmZmVyZWREYXRhLnVwZGF0ZSh0LmRhdGEpLCB0aGlzLl9ub3RpZnlVcGRhdGVDb21wbGV0ZWQoXG4gICAgICAgIHQuZGF0YSxcbiAgICAgICAgdC53YXNtQnVmZmVyQnl0ZUxlbixcbiAgICAgICAgdGhpcy5fY2FsY0F2Z0ZQUygpXG4gICAgICApKTtcbiAgICB9LCB0aGlzLnJlbW92ZURldlRvb2xzID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZW5hYmxlZCAmJiB0aGlzLnRvZ2dsZURldnRvb2xzKCk7XG4gICAgfSwgdGhpcy50b2dnbGVEZXZ0b29scyA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2VuYWJsZWQgPSAhdGhpcy5fZW5hYmxlZCwgdGhpcy5fZW5hYmxlZCA/ICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihGLCB0aGlzLnJlbW92ZURldlRvb2xzKSwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFUpKSkgOiAod2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoRiwgdGhpcy5yZW1vdmVEZXZUb29scyksIEFycmF5LmZyb20oZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFUpKS5mb3JFYWNoKFxuICAgICAgICAodCkgPT4ge1xuICAgICAgICAgIHZhciBvO1xuICAgICAgICAgIChvID0gdCA9PSBudWxsID8gdm9pZCAwIDogdC5wYXJlbnRFbGVtZW50KSA9PSBudWxsIHx8IG8ucmVtb3ZlQ2hpbGQodCk7XG4gICAgICAgIH1cbiAgICAgICkpO1xuICAgIH0sIHRoaXMuX25vdGlmeVVwZGF0ZUNvbXBsZXRlZCA9IGZ0KFxuICAgICAgKHQsIG8sIHIpID0+IHtcbiAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgRXQoe1xuICAgICAgICAgICAgZGF0YVZpZXc6IHQsXG4gICAgICAgICAgICB3YXNtQnVmZmVyQnl0ZUxlbjogbyxcbiAgICAgICAgICAgIGZwczogcixcbiAgICAgICAgICAgIGJ1ZmZlcmVkRGF0YTogdGhpcy5fYnVmZmVyZWREYXRhLmZsdXNoKClcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIDIwMFxuICAgICk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIGZlIGFzIERldnRvb2xzTWFuYWdlcixcbiAgcCBhcyBXYXNtNENvbnRyb2xzVmlldyxcbiAgdiBhcyBXYXNtNERldnRvb2xzLFxuICBkIGFzIFdhc200R2FtZXBhZCxcbiAgTyBhcyBXYXNtNEluZm9WaWV3LFxuICB3IGFzIFdhc200TWVtb3J5VmlldyxcbiAgYyBhcyBXYXNtNE1vdXNlQnV0dG9ucyxcbiAgRCBhcyBXYXNtNFBhbGV0dGUsXG4gIEYgYXMgY2xvc2VEZXZ0b29sc0V2ZW50VHlwZSxcbiAgQ3QgYXMgY3JlYXRlQ2xvc2VEZXZ0b29sc0V2ZW50LFxuICBFdCBhcyBjcmVhdGVVcGRhdGVDb21wbGV0ZWRFdmVudCxcbiAgeiBhcyB1cGRhdGVDb21wbGV0ZWRFdmVudFR5cGUsXG4gIFl0IGFzIHdhc200Q29udHJvbHNWaWV3VGFnTmFtZSxcbiAgVSBhcyB3YXNtNERldnRvb2xzVGFnTmFtZSxcbiAgTnQgYXMgd2FzbTRHYW1lcGFkVGFnTmFtZSxcbiAgcmUgYXMgd2FzbTRJbmZvVGFnTmFtZSxcbiAgdGUgYXMgd2FzbTRNZW1vcnlWaWV3VGFnTmFtZSxcbiAgWnQgYXMgd2FzbTRNb3VzZVRhZ05hbWUsXG4gIEx0IGFzIHdhc200UGFsZXR0ZVRhZ05hbWVcbn07XG4iLCJpbXBvcnQgZGVib3VuY2UgZnJvbSAnLi9kZWJvdW5jZS5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRocm90dGxlO1xuIl0sIm5hbWVzIjpbInQiLCJnbG9iYWxUaGlzIiwiZSIsIlNoYWRvd1Jvb3QiLCJTaGFkeUNTUyIsIm5hdGl2ZVNoYWRvdyIsIkRvY3VtZW50IiwicHJvdG90eXBlIiwiQ1NTU3R5bGVTaGVldCIsInMiLCJTeW1ib2wiLCJvIiwiV2Vha01hcCIsIm4kNSIsImNvbnN0cnVjdG9yIiwidGhpcyIsIl8kY3NzUmVzdWx0JCIsIkVycm9yIiwiY3NzVGV4dCIsInN0eWxlU2hlZXQiLCJsZW5ndGgiLCJnZXQiLCJyZXBsYWNlU3luYyIsInNldCIsInRvU3RyaW5nIiwiciIsIm4iLCJpIiwicmVkdWNlIiwiYyIsImNzc1J1bGVzIiwiaXMiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5TmFtZXMiLCJoIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0UHJvdG90eXBlT2YiLCJPYmplY3QiLCJhIiwidHJ1c3RlZFR5cGVzIiwibCIsImVtcHR5U2NyaXB0IiwicCIsInJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsImQiLCJ1IiwidG9BdHRyaWJ1dGUiLCJCb29sZWFuIiwiQXJyYXkiLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbUF0dHJpYnV0ZSIsIk51bWJlciIsInBhcnNlIiwiZiIsInkiLCJhdHRyaWJ1dGUiLCJ0eXBlIiwiU3RyaW5nIiwiY29udmVydGVyIiwicmVmbGVjdCIsImhhc0NoYW5nZWQiLCJtZXRhZGF0YSIsImxpdFByb3BlcnR5TWV0YWRhdGEiLCJiJDEiLCJIVE1MRWxlbWVudCIsImFkZEluaXRpYWxpemVyIiwiXyRFaSIsInB1c2giLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJmaW5hbGl6ZSIsIl8kRWgiLCJrZXlzIiwiY3JlYXRlUHJvcGVydHkiLCJzdGF0ZSIsImVsZW1lbnRQcm9wZXJ0aWVzIiwibm9BY2Nlc3NvciIsImdldFByb3BlcnR5RGVzY3JpcHRvciIsImNhbGwiLCJyZXF1ZXN0VXBkYXRlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFByb3BlcnR5T3B0aW9ucyIsImhhc093blByb3BlcnR5IiwiTWFwIiwiZmluYWxpemVkIiwicHJvcGVydGllcyIsIl8kRXUiLCJlbGVtZW50U3R5bGVzIiwiZmluYWxpemVTdHlsZXMiLCJzdHlsZXMiLCJpc0FycmF5IiwiU2V0IiwiZmxhdCIsInJldmVyc2UiLCJ1bnNoaWZ0IiwidG9Mb3dlckNhc2UiLCJzdXBlciIsIl8kRXAiLCJpc1VwZGF0ZVBlbmRpbmciLCJoYXNVcGRhdGVkIiwiXyRFbSIsIl8kRXYiLCJfJEVTIiwiUHJvbWlzZSIsImVuYWJsZVVwZGF0aW5nIiwiXyRBTCIsIl8kRV8iLCJfYSIsImZvckVhY2giLCJhZGRDb250cm9sbGVyIiwiXyRFTyIsImFkZCIsInJlbmRlclJvb3QiLCJpc0Nvbm5lY3RlZCIsImhvc3RDb25uZWN0ZWQiLCJyZW1vdmVDb250cm9sbGVyIiwiZGVsZXRlIiwic2l6ZSIsImNyZWF0ZVJlbmRlclJvb3QiLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93Iiwic2hhZG93Um9vdE9wdGlvbnMiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJtYXAiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJsaXROb25jZSIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJjb25uZWN0ZWRDYWxsYmFjayIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiaG9zdERpc2Nvbm5lY3RlZCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIl8kQUsiLCJfJEVDIiwicmVtb3ZlQXR0cmlidXRlIiwiaTIiLCJQIiwiXyRFVCIsImhhcyIsIl8kRWoiLCJyZWplY3QiLCJzY2hlZHVsZVVwZGF0ZSIsInBlcmZvcm1VcGRhdGUiLCJ3cmFwcGVkIiwic2hvdWxkVXBkYXRlIiwid2lsbFVwZGF0ZSIsImhvc3RVcGRhdGUiLCJ1cGRhdGUiLCJfJEVVIiwiXyRBRSIsImhvc3RVcGRhdGVkIiwiZmlyc3RVcGRhdGVkIiwidXBkYXRlZCIsInVwZGF0ZUNvbXBsZXRlIiwiZ2V0VXBkYXRlQ29tcGxldGUiLCJiIiwibW9kZSIsIlJlYWN0aXZlRWxlbWVudCIsInJlYWN0aXZlRWxlbWVudFZlcnNpb25zIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsIk1hdGgiLCJyYW5kb20iLCJ0b0ZpeGVkIiwic2xpY2UiLCJjcmVhdGVDb21tZW50IiwiaXRlcmF0b3IiLCJ2IiwiXyIsIm0iLCJSZWdFeHAiLCJnIiwiJCIsIngiLCJfJGxpdFR5cGUkIiwic3RyaW5ncyIsInZhbHVlcyIsInciLCJmb3IiLCJUIiwiQSIsIkUiLCJjcmVhdGVUcmVlV2Fsa2VyIiwiQyIsImxhc3RJbmRleCIsImV4ZWMiLCJ0ZXN0Iiwic3RhcnRzV2l0aCIsIlYkMSIsIlYiLCJwYXJ0cyIsImVsIiwiY3VycmVudE5vZGUiLCJjb250ZW50IiwiZmlyc3RDaGlsZCIsInJlcGxhY2VXaXRoIiwiY2hpbGROb2RlcyIsIm5leHROb2RlIiwibm9kZVR5cGUiLCJoYXNBdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlTmFtZXMiLCJlbmRzV2l0aCIsImdldEF0dHJpYnV0ZSIsInNwbGl0IiwiaW5kZXgiLCJuYW1lIiwiY3RvciIsImsiLCJIIiwiSSIsIlIiLCJ0YWdOYW1lIiwiYXBwZW5kIiwiZGF0YSIsImluZGV4T2YiLCJpbm5lckhUTUwiLCJOIiwiXyRDbyIsIl8kQ2wiLCJfJGxpdERpcmVjdGl2ZSQiLCJfYiIsIl8kQU8iLCJfJEFUIiwiXyRBUyIsIlMkMSIsIl8kQVYiLCJfJEFOIiwiXyRBRCIsIl8kQU0iLCJwYXJlbnROb2RlIiwiXyRBVSIsImNyZWF0aW9uU2NvcGUiLCJpbXBvcnROb2RlIiwiTSIsIm5leHRTaWJsaW5nIiwiTCIsIl8kQUkiLCJNJDEiLCJfJEN2IiwiXyRBSCIsIl8kQUEiLCJfJEFCIiwib3B0aW9ucyIsInN0YXJ0Tm9kZSIsImVuZE5vZGUiLCJfJEFSIiwiUyIsImluc2VydEJlZm9yZSIsImNyZWF0ZVRleHROb2RlIiwiXyRBQyIsIl8kQVAiLCJyZW1vdmUiLCJzZXRDb25uZWN0ZWQiLCJSJDEiLCJlbGVtZW50IiwiZmlsbCIsImoiLCJrJDEiLCJhcmd1bWVudHMiLCJ0b2dnbGVBdHRyaWJ1dGUiLCJjYXB0dXJlIiwib25jZSIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiaG9zdCIsIkwkMSIsInoiLCJEIiwiVSIsIkIiLCJGIiwiWiIsImxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQiLCJsaXRIdG1sVmVyc2lvbnMiLCJzJDIiLCJyZW5kZXJPcHRpb25zIiwiXyREbyIsInJlbmRlckJlZm9yZSIsInJlbmRlciIsIl8kbGl0UGFydCQiLCJfJGxpdEVsZW1lbnQkIiwibGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0IiwiTGl0RWxlbWVudCIsImxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQiLCJyJDQiLCJsaXRFbGVtZW50VmVyc2lvbnMiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImtpbmQiLCJpbml0IiwiUmVmbGVjdCIsImRlY29yYXRlIiwicXVlcnlTZWxlY3RvciIsIldJRFRIIiwiSEVJR0hUIiwiU1RPUkFHRV9TSVpFIiwiQ09MT1JTIiwiQlVUVE9OX0xFRlQiLCJCVVRUT05fUklHSFQiLCJCVVRUT05fVVAiLCJCVVRUT05fRE9XTiIsIkZPTlQiLCJVaW50OEFycmF5Iiwib2YiLCJ3ZWJzb2NrZXQiLCJXZWJTb2NrZXQiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiZ2V0VXJsUGFyYW0iLCJ1cmwiLCJVUkwiLCJocmVmIiwidmFsdWUiLCJzZWFyY2hQYXJhbXMiLCJoYXNoIiwic3Vic3RyaW5nIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJmdWxsc2NyZWVuRWxlbWVudCIsImV4cGFuZElmcmFtZSIsImlmcmFtZSIsIndpbmRvdyIsImZyYW1lRWxlbWVudCIsInN0eWxlIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwiekluZGV4Iiwid2lkdGgiLCJoZWlnaHQiLCJwcm9taXNlIiwiYm9keSIsIm5hdmlnYXRpb25VSSIsImNhdGNoIiwiRU5DT0RFUiIsIkRFQ09ERVIiLCJlbmNvZGUiLCJzcmMiLCJleHRyYSIsInBhZGRlZFNpemUiLCJzdHIiLCJieXRlX25iciIsImRpdmlzb3IiLCJpZHgiLCJmbG9vciIsImRlY29kZSIsInN0cmluZyIsImRlc3QiLCJjaGFyX25iciIsInN0cmluZ19sZW4iLCJkZXN0X2xlbiIsImNoYXJDb2RlQXQiLCJTdGF0ZSIsIm1lbW9yeSIsIkFycmF5QnVmZmVyIiwiZGlza0J1ZmZlciIsImNvbnN0YW50cy5TVE9SQUdFX1NJWkUiLCJkaXNrU2l6ZSIsInJlYWQiLCJydW50aW1lIiwiYnVmZmVyIiwid3JpdGUiLCJ0b0J5dGVzIiwiRGF0YVZpZXciLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsInNldFVpbnQzMiIsImZyb21CeXRlcyIsInN1YmFycmF5IiwiZGF0YVZpZXciLCJnZXRVaW50MzIiLCJISVNUT1JZX0xFTkdUSCIsIkhpc3RvcnkiLCJmcmFtZSIsImlucHV0cyIsInByZWRpY3RlZCIsImlpIiwiUGxheWVyIiwiZnV0dXJlSW5wdXRzIiwiUm9sbGJhY2tNYW5hZ2VyIiwiY3VycmVudEZyYW1lIiwicm9sbGJhY2tJZHgiLCJoaXN0b3J5IiwicGxheWVycyIsImFkZElucHV0cyIsInBsYXllcklkeCIsInBsYXllciIsImlucHV0IiwibGwiLCJtaW4iLCJwcmV2SGlzdG9yeSIsImZpcnN0Iiwic2V0R2FtZXBhZCIsIm5leHRIaXN0b3J5Iiwic2hpZnQiLCJTaWduYWxDbGllbnQiLCJvbk1lc3NhZ2UiLCJidWZmZXJlZE91dHB1dCIsImNvbm5lY3QiLCJrZWVwYWxpdmVJbnRlcnZhbCIsInNldEludGVydmFsIiwic2VuZCIsInNlcnZlcnMiLCJzZXJ2ZXIiLCJzb2NrZXQiLCJyZXNvbHZlIiwiZXJyb3IiLCJjb25zb2xlIiwiZXZlbnQiLCJzb3VyY2UiLCJtZXNzYWdlIiwib3V0cHV0IiwidGFyZ2V0IiwiZGVmZXJJZk5vdFJlYWR5IiwicmVhZHlTdGF0ZSIsImNsb3NlIiwiY2xlYXJJbnRlcnZhbCIsIlBlZXJNYW5hZ2VyIiwib25Db25uZWN0aW9uIiwicmVzb2x2ZUxvY2FsUGVlcklkIiwiY29ubmVjdGlvbnMiLCJsb2NhbFBlZXJJZCIsInNpZ25hbENsaWVudCIsImFzeW5jIiwiaWNlU2VydmVycyIsInlvdXJQZWVySWQiLCJjb25uZWN0aW9uIiwiY3JlYXRlQ29ubmVjdGlvbiIsInNldFJlbW90ZURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJzZXRMb2NhbERlc2NyaXB0aW9uIiwiY3JlYXRlQW5zd2VyIiwibG9jYWxEZXNjcmlwdGlvbiIsInRvSlNPTiIsImFkZEljZUNhbmRpZGF0ZSIsIlJUQ0ljZUNhbmRpZGF0ZSIsImNhbmRpZGF0ZSIsInBlZXJJZCIsIlJUQ1BlZXJDb25uZWN0aW9uIiwiY3JlYXRlT2ZmZXIiLCJjb25uZWN0aW9uU3RhdGUiLCJyZW1vdGVQZWVySWQiLCJDQVBBQ0lUWSIsIkNodW5rUmVhZGVyIiwiY2hhbm5lbCIsImNodW5rcyIsImNodW5rIiwiZGVzdFBvcyIsIkNodW5rV3JpdGVyIiwic3JjUG9zIiwiZmx1c2giLCJCaXRSZWFkZXIiLCJyZWFkQml0IiwicmVhZEJpdHMiLCJCaXRXcml0ZXIiLCJ3cml0ZTEiLCJ3cml0ZTAiLCJ3cml0ZUJpdHMiLCJNb3ZpbmdBdmVyYWdlIiwiZGlzY291bnQiLCJhdmVyYWdlIiwiZmlyc3RVcGRhdGUiLCJNQVhfVElDS19TSVpFIiwiY2VpbCIsIk1BWF9PVVRCT1VORF9JTlBVVFMiLCJTRU5EX0JVRkZFUiIsIlJlbW90ZVBsYXllciIsInJlbGlhYmxlQ2hhbm5lbCIsInVucmVsaWFibGVDaGFubmVsIiwibmV4dE5lZWRlZEZyYW1lIiwib3V0Ym91bmRGcmFtZSIsIm91dGJvdW5kSW5wdXRzIiwicGluZyIsImRyaWZ0IiwiY2h1bmtSZWFkZXIiLCJjaHVua1dyaXRlciIsImFkZE91dGJvdW5kSW5wdXQiLCJjb3VudCIsImZyYW1lSWR4Iiwic2VuZE1lc3NhZ2UiLCJzZW5kVW5yZWxpYWJsZUJ1ZmZlciIsInNlbmRQaW5nUmVxdWVzdCIsInNldFVpbnQ4IiwicGVyZm9ybWFuY2UiLCJub3ciLCJzZW5kUGluZ1JlcGx5IiwidGltZXN0YW1wIiwic2VuZFRpY2siLCJzZXRJbnQ4IiwiaW5wdXRXcml0ZXIiLCJwcmV2SW5wdXQiLCJjaGFuZ2VkIiwiYnV0dG9uIiwiTmV0cGxheSIsInJlbW90ZVBsYXllcnMiLCJsb2NhbFBsYXllcklkeCIsInVwZGF0ZUNvdW50IiwicGVlck1nciIsIm90aGVyUGVlcnMiLCJmcm9tIiwicmVtb3RlUGxheWVyIiwiY3JlYXRlUmVtb3RlUGxheWVyIiwic2V0TmV0cGxheSIsInJvbGxiYWNrTWdyIiwiam9pbiIsInRoZW4iLCJibHVlU2NyZWVuIiwiZ2V0SW52aXRlTGluayIsImxvYyIsImhvc3RuYW1lIiwiY3JlYXRlRGF0YUNoYW5uZWwiLCJjb25maWciLCJiaW5hcnlUeXBlIiwib25vcGVuIiwib25lcnJvciIsImFsbCIsIm5lZ290aWF0ZWQiLCJpZCIsIm9yZGVyZWQiLCJtYXhSZXRyYW5zbWl0cyIsIm9uQ2xvc2UiLCJvbmxlYXZlIiwibmV4dFBsYXllcklkeCIsIndhc21CdWZmZXIiLCJ5b3VyUGxheWVySWR4Iiwic3RhdGVPZmZzZXQiLCJvbmpvaW4iLCJvdGhlclBsYXllciIsImJ5dGVzIiwiY2FydEJ5dGVzIiwic3RhdGVCeXRlcyIsImxvYWQiLCJvbnN0YXJ0IiwiZ2V0VWludDgiLCJyZXF1ZXN0ZWRGcmFtZSIsImdldEludDgiLCJpbnB1dEZyYW1lIiwiaW5wdXRDb3VudCIsImlucHV0UmVhZGVyIiwiZGVsdGEiLCJzcGxpY2UiLCJlc3RpbWF0ZWRSZW1vdGVGcmFtZSIsIm91dGVyIiwibG9jYWxJbnB1dCIsImV2ZXJ5OFRpY2tzIiwiZXZlcnkzMlRpY2tzIiwic3RhbGwiLCJtYXhEcmlmdCIsIm1heCIsImdldFN1bW1hcnkiLCJzdW1tYXJ5Iiwic29ydCIsIndvcmtsZXRSYXdTb3VyY2UiLCJBUFUiLCJhdWRpb0N0eCIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsInNhbXBsZVJhdGUiLCJibG9iIiwiQmxvYiIsImNyZWF0ZU9iamVjdFVSTCIsImF1ZGlvV29ya2xldCIsImFkZE1vZHVsZSIsIndvcmtsZXROb2RlIiwiQXVkaW9Xb3JrbGV0Tm9kZSIsIm91dHB1dENoYW5uZWxDb3VudCIsInByb2Nlc3NvclBvcnQiLCJwb3J0IiwiZGVzdGluYXRpb24iLCJwcm9jZXNzb3IiLCJ3YXJuIiwicmVnaXN0ZXJQcm9jZXNzb3IiLCJGdW5jdGlvbiIsImZuIiwic2NyaXB0Tm9kZSIsImNyZWF0ZVNjcmlwdFByb2Nlc3NvciIsIm9uYXVkaW9wcm9jZXNzIiwib3V0cHV0TGVmdCIsIm91dHB1dEJ1ZmZlciIsImdldENoYW5uZWxEYXRhIiwib3V0cHV0UmlnaHQiLCJwcm9jZXNzIiwidGljayIsInBvc3RNZXNzYWdlIiwidG9uZSIsImZyZXF1ZW5jeSIsImR1cmF0aW9uIiwidm9sdW1lIiwiZmxhZ3MiLCJ1bmxvY2tBdWRpbyIsInJlc3VtZSIsInBhdXNlQXVkaW8iLCJzdXNwZW5kIiwiRnJhbWVidWZmZXIiLCJkcmF3Q29sb3JzIiwiVWludDE2QXJyYXkiLCJjbGVhciIsImRyYXdQb2ludCIsImNvbG9yIiwibWFzayIsImRyYXdQb2ludFVuY2xpcHBlZCIsImRyYXdITGluZUZhc3QiLCJzdGFydFgiLCJlbmRYIiwiZmlsbEVuZCIsImZpbGxTdGFydCIsInh4IiwidG8iLCJmaWxsQ29sb3IiLCJkcmF3SExpbmVVbmNsaXBwZWQiLCJkcmF3SExpbmUiLCJsZW4iLCJkYzAiLCJzdHJva2VDb2xvciIsImRyYXdWTGluZSIsInN0YXJ0WSIsImVuZFkiLCJ5eSIsImRyYXdSZWN0IiwiZW5kWFVuY2xhbXBlZCIsImVuZFlVbmNsYW1wZWQiLCJkYzEiLCJkcmF3T3ZhbCIsImIxIiwibm9ydGgiLCJ3ZXN0IiwiZWFzdCIsInNvdXRoIiwiYTIiLCJiMiIsImR4IiwiZHkiLCJlcnIiLCJzdGFydCIsImVycjIiLCJkcmF3TGluZSIsIngxIiwieTEiLCJ4MiIsInkyIiwic3dhcCIsImFicyIsInN4IiwiZTIiLCJkcmF3VGV4dCIsImNoYXJBcnJheSIsImN1cnJlbnRYIiwiY2hhckNvZGUiLCJibGl0Iiwic3ByaXRlIiwiZHN0WCIsImRzdFkiLCJzcmNYIiwic3JjWSIsInNyY1N0cmlkZSIsImJwcDIiLCJmbGlwWCIsImZsaXBZIiwicm90YXRlIiwiY2xpcFhNaW4iLCJjbGlwWU1pbiIsImNsaXBYTWF4IiwiY2xpcFlNYXgiLCJ0eCIsInR5IiwiY29sb3JJZHgiLCJiaXRJbmRleCIsImRjIiwiTFVNSU5BTkNFIiwiVEVYVFVSRV8yRCIsIldlYkdMQ29tcG9zaXRvciIsImdsIiwiY29sb3JCdWZmZXIiLCJVaW50MzJBcnJheSIsInBhbGV0dGVCdWZmZXIiLCJGbG9hdDMyQXJyYXkiLCJsYXN0UGFsZXR0ZSIsInBhbGV0dGVMb2NhdGlvbiIsInRhYmxlIiwienoiLCJ3dyIsImNhbnZhcyIsInByZXZlbnREZWZhdWx0IiwiaW5pdEdMIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsImdldFNoYWRlckluZm9Mb2ciLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsIlBBTEVUVEVfU0laRSIsInByb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJ1c2VQcm9ncmFtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidW5pZm9ybTFpIiwiZGV0YWNoU2hhZGVyIiwiZGVsZXRlU2hhZGVyIiwic2xvdCIsInRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwiYWN0aXZlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwiR0wuVEVYVFVSRV8yRCIsInRleFBhcmFtZXRlcmkiLCJ0ZXhJbWFnZTJEIiwiR0wuTFVNSU5BTkNFIiwicG9zaXRpb25BdHRyaWIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsInBvc2l0aW9uQnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwicG9zaXRpb25EYXRhIiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJjb21wb3NpdGUiLCJwYWxldHRlIiwiZnJhbWVidWZmZXIiLCJyZ2IiLCJzeW5jUGFsZXR0ZSIsImFyZ2IiLCJ1bmlmb3JtM2Z2IiwiZHJhd0FycmF5cyIsIlJ1bnRpbWUiLCJkaXNrTmFtZSIsIndhc20iLCJ3YXJuZWRGaWxlU2l6ZSIsImNvbnN0YW50cy5XSURUSCIsImNvbnN0YW50cy5IRUlHSFQiLCJnZXRDb250ZXh0IiwiYWxwaGEiLCJkZXB0aCIsImFudGlhbGlhcyIsImNvbXBvc2l0b3IiLCJhcHUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiejg1LmRlY29kZSIsIldlYkFzc2VtYmx5IiwiTWVtb3J5IiwiaW5pdGlhbCIsIm1heGltdW0iLCJyZXNldCIsInBhdXNlU3RhdGUiLCJ3YXNtQnVmZmVyQnl0ZUxlbiIsInNldE1vdXNlIiwiYnV0dG9ucyIsInNldEludDE2IiwiZ2V0U3lzdGVtRmxhZyIsInplcm9NZW1vcnkiLCJtZW0zMiIsImNvbnN0YW50cy5DT0xPUlMiLCJjb25zdGFudHMuQUREUl9QQUxFVFRFIiwic2V0VWludDE2IiwiZW5mb3JjZVNpemVMaW1pdCIsInByaW50IiwiZW52IiwicmVjdCIsImJpbmQiLCJvdmFsIiwibGluZSIsImhsaW5lIiwidmxpbmUiLCJ0ZXh0IiwidGV4dFV0ZjgiLCJ0ZXh0VXRmMTYiLCJibGl0U3ViIiwiZGlza3IiLCJkaXNrdyIsInRyYWNlIiwidHJhY2VVdGY4IiwidHJhY2VVdGYxNiIsInRyYWNlZiIsImJsdWVzY3JlZW5PbkVycm9yIiwibW9kdWxlIiwiaW5zdGFudGlhdGUiLCJpbnN0YW5jZSIsImV4cG9ydHMiLCJfc3RhcnQiLCJfaW5pdGlhbGl6ZSIsImVycm9yRXhwbGFuYXRpb24iLCJSdW50aW1lRXJyb3IiLCJtYXRjaCIsIkxpbmtFcnJvciIsIkNvbXBpbGVFcnJvciIsIldhc200RXJyb3IiLCJ3YXNtNE1lc3NhZ2UiLCJlcnJvclRvQmx1ZVNjcmVlblRleHQiLCJwcmludFRvU2VydmVyIiwic3RhY2siLCJ0ZXh0UHRyIiwic3ByaXRlUHRyIiwic3RyaWRlIiwiZGVzdFB0ciIsImJ5dGVzUmVhZCIsInNyY1B0ciIsImJ5dGVzV3JpdHRlbiIsIno4NS5lbmNvZGUiLCJzZXRJdGVtIiwiZ2V0Q1N0cmluZyIsInB0ciIsImZyb21DaGFyQ29kZSIsImxvZyIsImRldmtpdC53ZWJzb2NrZXQiLCJjc3RyUHRyIiwic3RyVXRmOFB0ciIsInN0clV0ZjgiLCJUZXh0RGVjb2RlciIsInN0clV0ZjE2UHRyIiwic3RyVXRmMTYiLCJmbXRQdHIiLCJhcmdQdHIiLCJjaCIsImdldEludDMyIiwiZ2V0RmxvYXQ2NCIsInN0YXJ0X2Z1bmN0aW9uIiwidXBkYXRlX2Z1bmN0aW9uIiwidG9DaGFyQXJyIiwidGl0bGUiLCJoZWFkZXJUaXRsZSIsImhlYWRlclkiLCJ3NE1lc3NhZ2UiLCJyZXBsYWNlIiwiSW5wdXRTdGF0ZSIsImdhbWVwYWQiLCJtb3VzZVgiLCJtb3VzZVkiLCJtb3VzZUJ1dHRvbnMiLCJBcHAiLCJoaWRlR2FtZXBhZE92ZXJsYXkiLCJzaG93TWVudSIsImlucHV0U3RhdGUiLCJnYW1lcGFkVW5hdmFpbGFibGVXYXJuZWQiLCJvblBvaW50ZXJVcCIsInBvaW50ZXJUeXBlIiwiZGlza1ByZWZpeCIsImdldEVsZW1lbnRCeUlkIiwidXRpbHMuZ2V0VXJsUGFyYW0iLCJsb2FkQ2FydFdhc20iLCJjYXJ0SnNvbiIsIldBU000X0NBUlQiLCJXQVNNNF9DQVJUX1NJWkUiLCJjYXJ0VXJsIiwicmVzIiwiZmV0Y2giLCJvayIsImFycmF5QnVmZmVyIiwiaG9zdFBlZXJJZCIsIm5ldHBsYXkiLCJjcmVhdGVOZXRwbGF5IiwiZGV2dG9vbHNNYW5hZ2VyIiwidG9nZ2xlRGV2dG9vbHMiLCJ1cGRhdGVDb21wbGV0ZWQiLCJhcmdzIiwid2ViRGV2dG9vbHMiLCJEZXZ0b29sc01hbmFnZXIiLCJyZXNldENhcnQiLCJ2aWRlb1JlY29yZGVyIiwib25Nb3VzZUV2ZW50IiwiY3Vyc29yIiwiaXNQcmltYXJ5IiwiYm91bmRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZnJvdW5kIiwiY2xpZW50WCIsImNsaWVudFkiLCJIT1RLRVlTIiwic2F2ZUdhbWVTdGF0ZSIsImxvYWRHYW1lU3RhdGUiLCJGOCIsIkY5IiwidG9CbG9iIiwiYW5jaG9yIiwiZG93bmxvYWQiLCJjbGljayIsInJldm9rZU9iamVjdFVSTCIsIkYxMCIsIm1pbWVUeXBlIiwidmlkZW9TdHJlYW0iLCJjYXB0dXJlU3RyZWFtIiwiTWVkaWFSZWNvcmRlciIsInZpZGVvQml0c1BlclNlY29uZCIsIm9uZGF0YWF2YWlsYWJsZSIsIm9uc3RvcCIsInNldFRpbWVvdXQiLCJyZXF1ZXN0RGF0YSIsInN0b3AiLCJGMTEiLCJ1dGlscy5yZXF1ZXN0RnVsbHNjcmVlbiIsIkVudGVyIiwib25NZW51QnV0dG9uUHJlc3NlZCIsIm9uS2V5Ym9hcmRFdmVudCIsImN0cmxLZXkiLCJhbHRLZXkiLCJzcmNFbGVtZW50IiwiZG93biIsImhvdGtleUZuIiwia2V5IiwiY29kZSIsImNvbnN0YW50cy5CVVRUT05fWCIsImNvbnN0YW50cy5CVVRUT05fWiIsImNvbnN0YW50cy5CVVRUT05fVVAiLCJjb25zdGFudHMuQlVUVE9OX0RPV04iLCJjb25zdGFudHMuQlVUVE9OX0xFRlQiLCJjb25zdGFudHMuQlVUVE9OX1JJR0hUIiwicG9sbFBoeXNpY2FsR2FtZXBhZHMiLCJuYXZpZ2F0b3IiLCJnZXRHYW1lcGFkcyIsIm1hcHBpbmciLCJub3RpZmljYXRpb25zIiwic2hvdyIsImF4ZXMiLCJwcmVzc2VkIiwidGltZU5leHRVcGRhdGUiLCJsYXN0VGltZUZyYW1lU3RhcnQiLCJvbkZyYW1lIiwidGltZUZyYW1lU3RhcnQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtZW51T3ZlcmxheSIsImFwcGx5SW5wdXQiLCJjYWxsZWRVcGRhdGUiLCJjbG9zZU1lbnUiLCJzYXZlZEdhbWVTdGF0ZSIsInN0YXRlMiIsImV4cG9ydEdhbWVEaXNrIiwiZGlzayIsImxpbmsiLCJkaXNwbGF5IiwicmVtb3ZlQ2hpbGQiLCJpbXBvcnRHYW1lRGlzayIsImFwcCIsImFjY2VwdCIsIm11bHRpcGxlIiwiZmlsZXMiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVzdWx0IiwicmVhZEFzQXJyYXlCdWZmZXIiLCJjbGVhckdhbWVEaXNrIiwicmVtb3ZlSXRlbSIsImNvcHlOZXRwbGF5TGluayIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsImRpYWxvZyIsImNvcHlCdXR0b24iLCJtYXJnaW5MZWZ0Iiwib25jbGljayIsImNsb3NlQnV0dG9uIiwic2hvd01vZGFsIiwidXRpbHMuY29weVRvQ2xpcGJvYXJkIiwicHJlc2VydmVTdGF0ZSIsImdldE5ldHBsYXlTdW1tYXJ5IiwiaHRtbCIsImNzcyIsIl9fZGVjb3JhdGVDbGFzcyQzIiwicXVlcnkiLCJfX2RlY29yYXRlQ2xhc3MiLCJjdXN0b21FbGVtZW50Iiwib3B0aW9uQ29udGV4dCIsIm9wdGlvbkluZGV4IiwiQ09OVElOVUUiLCJTQVZFX1NUQVRFIiwiTE9BRF9TVEFURSIsIkRJU0tfT1BUSU9OUyIsIkNPUFlfTkVUUExBWV9MSU5LIiwiUkVTRVRfQ0FSVCIsIkJBQ0siLCJFWFBPUlRfRElTSyIsIklNUE9SVF9ESVNLIiwiQ0xFQVJfRElTSyIsIk1lbnVPdmVybGF5IiwibGFzdEdhbWVwYWQiLCJzZWxlY3RlZElkeCIsIm5ldHBsYXlTdW1tYXJ5Iiwib3B0aW9uQ29udGV4dEhpc3RvcnkiLCJwcmV2aW91c0NvbnRleHQiLCJwb3AiLCJyZXNldElucHV0IiwiY29udGV4dCIsInN3aXRjaENvbnRleHQiLCJwcmVzc2VkVGhpc0ZyYW1lIiwidXBkYXRlTmV0cGxheVN1bW1hcnkiLCJuZXRwbGF5UG9sbEludGVydmFsIiwib3B0aW9uIiwicGluZ0NsYXNzIiwiX19kZWNvcmF0ZUNsYXNzJDIiLCJzZXRDbGFzcyIsImNsYXNzTmFtZSIsImVuYWJsZWQiLCJjbGFzc0xpc3QiLCJWaXJ0dWFsR2FtZXBhZCIsInRvdWNoRXZlbnRzIiwib25Qb2ludGVyRXZlbnQiLCJwb2ludGVySWQiLCJEUEFEX01BWF9ESVNUQU5DRSIsIkRQQURfREVBRF9aT05FIiwiQlVUVE9OX01BWF9ESVNUQU5DRSIsIkRQQURfQUNUSVZFX1pPTkUiLCJkcGFkQm91bmRzIiwiZHBhZCIsImRwYWRYIiwiZHBhZFkiLCJhY3Rpb24xQm91bmRzIiwiYWN0aW9uMSIsImFjdGlvbjFYIiwiYWN0aW9uMVkiLCJhY3Rpb24yQm91bmRzIiwiYWN0aW9uMiIsImFjdGlvbjJYIiwiYWN0aW9uMlkiLCJkaXN0IiwiY29zWCIsImNvc1kiLCJ0b3VjaCIsInNxcnQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfX2RlY29yYXRlQ2xhc3MkMSIsIk5vdGlmaWNhdGlvbnMiLCJjb25jYXQiLCJfJEN0IiwiXyRDaSIsImZpbHRlciIsInN0IiwibnQiLCJfJEFRIiwiZHQiLCJ1dCIsInJlY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwic2V0VmFsdWUiLCJZIiwicnQiLCJsdCIsImN0IiwiaHQiLCJmcmVlR2xvYmFsIiwiZ2xvYmFsIiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwibnVsbFRhZyIsInVuZGVmaW5lZFRhZyIsImJhc2VHZXRUYWciLCJpc093biIsInRhZyIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1ib2xUYWciLCJyZVdoaXRlc3BhY2UiLCJyZVRyaW1TdGFydCIsImJhc2VUcmltIiwiY2hhckF0IiwidHJpbW1lZEVuZEluZGV4IiwiaXNPYmplY3QiLCJOQU4iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwidG9OdW1iZXIiLCJpc09iamVjdExpa2UiLCJpc1N5bWJvbCIsIm90aGVyIiwidmFsdWVPZiIsImlzQmluYXJ5IiwiRGF0ZSIsIkZVTkNfRVJST1JfVEVYVCIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsImRlYm91bmNlIiwiZnVuYyIsIndhaXQiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJ0cmFpbGluZyIsIlR5cGVFcnJvciIsImludm9rZUZ1bmMiLCJ0aW1lIiwidGhpc0FyZyIsImFwcGx5Iiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwibGVhZGluZ0VkZ2UiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWwiLCJQQUxFVFRFIiwib2Zmc2V0IiwiRFJBV19DT0xPUlMiLCJHQU1FUEFEMSIsIkdBTUVQQUQyIiwiR0FNRVBBRDMiLCJHQU1FUEFENCIsIk1PVVNFX1giLCJNT1VTRV9ZIiwiTU9VU0VfQlVUVE9OUyIsIlNZU1RFTV9GTEFHUyIsIlJFU0VSVkVEIiwiRlJBTUVCVUZGRVIiLCJQUk9HUkFNX01FTU9SWSIsInd0IiwiZnJlZXplIiwiX19wcm90b19fIiwiQUREUl9EUkFXX0NPTE9SUyIsIkFERFJfRlJBTUVCVUZGRVIiLCJBRERSX0dBTUVQQUQxIiwiQUREUl9HQU1FUEFEMiIsIkFERFJfR0FNRVBBRDMiLCJBRERSX0dBTUVQQUQ0IiwiQUREUl9NT1VTRV9CVVRUT05TIiwiQUREUl9NT1VTRV9YIiwiQUREUl9NT1VTRV9ZIiwiQUREUl9QQUxFVFRFIiwiQUREUl9TWVNURU1fRkxBR1MiLCJCVVRUT05fWCIsIkJVVFRPTl9aIiwiTUFYX0NBUlRfU0laRSIsIk1PVVNFX0xFRlQiLCJNT1VTRV9NSURETEUiLCJNT1VTRV9SSUdIVCIsIlNZU1RFTV9ISURFX0dBTUVQQURfT1ZFUkxBWSIsIlNZU1RFTV9QUkVTRVJWRV9GUkFNRUJVRkZFUiIsIm1lbW9yeU1hcCIsIl90IiwiZ2V0SW50MTYiLCJwb2ludGVyUG9zIiwiZ2V0VWludDE2IiwieHQiLCJnYW1lcGFkcyIsInl0Iiwic3lzdGVtRmxhZ3MiLCJtb3VzZUJ0bkJ5dGUiLCJieXRlTGVuIiwiJHQiLCJFdCIsImZwcyIsImJ1ZmZlcmVkRGF0YSIsImJ1YmJsZXMiLCJDdXN0b21FdmVudCIsImRldGFpbCIsInN0b3JlZFZhbHVlIiwiRHQiLCJoYW5kbGVVcGRhdGVFdnQiLCJtZW1vcnlWaWV3IiwiQ3QiLCJjb21wb3NlZCIsIk90IiwiUnQiLCJwYWRTdGFydCIsInRvVXBwZXJDYXNlIiwiVyIsIlgiLCJpc0Zpbml0ZSIsIk10IiwiU3QiLCJ6dCIsInVwZGF0ZUNvbnRyb2xsZXIiLCJfZXhwYW5kZWQiLCJfYWN0aXZlVGFiIiwiX2ZpeGVkUG9zaXRpb24iLCJfaGFuZGxlQ2xvc2VCdXR0b25DbGljayIsImRpc3BhdGNoRXZlbnQiLCJfaGFuZGxlVGFiQ2xpY2siLCJjb21wb3NlZFBhdGgiLCJkYXRhc2V0IiwidGFiVmFsdWUiLCJpbmNsdWRlcyIsIl90b2dnbGVFeGFwYW5kZWQiLCJfY2hhbmdlRml4ZWRQb3NpdGlvbiIsIl9yZW5kZXJHZW5lcmFsVmlldyIsIl9yZW5kZXJJbmZvIiwiX3JlbmRlckNvbnRyb2xzIiwiX3JlbmRlck1lbW9yeSIsIl9yZW5kZXJUYWIiLCJGdCIsIlV0Iiwia3QiLCJxIiwiTHQiLCJoZWFkaW5nIiwiVHQiLCJJdCIsIlZ0IiwianQiLCJOdCIsInVwIiwicmlnaHQiLCJyYXdWYWx1ZSIsIkd0IiwiSHQiLCJZdCIsInF0IiwiV3QiLCJYdCIsIlp0IiwibWlkZGxlIiwiZW50cmllcyIsImRpbSIsIkt0IiwiSnQiLCJRdCIsInRlIiwiaGV4RWRpdG9yIiwiZmlyc3RSb3ciLCJfaGV4Vmlld0ZpcnN0Um93IiwibWVtb3J5Q2FudmFzUmVmIiwiaW1hZ2VEYXRhIiwiSW1hZ2VEYXRhIiwiX2FuaW1hdGlvbkZyYW1lUmVxdWVzdElkIiwiX3BhaW50TWVtb3J5Q2FudmFzIiwiY2xlYXJSZWN0IiwicHV0SW1hZ2VEYXRhIiwiX2hhbmRsZUhleEVkaXRvckNoYW5nZSIsIl9yZW5kZXJIZXhWaWV3IiwiQXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm9lIiwic2UiLCJwdCIsInJlIiwiYWUiLCJpZSIsImxhYmVsIiwiTyIsIm5lIiwiX2VuYWJsZWQiLCJfYnVmZmVyZWREYXRhIiwiX2Zwc0J1ZmZlciIsIl9mcHNCdWZmZXJJZHgiLCJfY2FsY0F2Z0ZQUyIsIl9uZXh0RlBTQnVmZmVySWR4IiwiX25vdGlmeVVwZGF0ZUNvbXBsZXRlZCIsInJlbW92ZURldlRvb2xzIiwicXVlcnlTZWxlY3RvckFsbCIsInBhcmVudEVsZW1lbnQiLCJmdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7V0FLTUEsTUFBQUEsRUFBRUMs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QUFBLEVBQW1SUyxDQUFFSSxLQUFLLEdBQUksQ0VKclcsTUFBTTRSLEdBQVEsSUFDUkMsR0FBUyxJQUVUQyxHQUFlLEtBS2ZDLEdBQVMsQ0FDbEIsU0FDQSxRQUNBLFFBQ0EsUUFxQlNDLEdBQWMsR0FDZEMsR0FBZSxHQUNmQyxHQUFZLEdBQ1pDLEdBQWMsSUFhZEMsR0FBT0MsV0FBV0MsR0FDM0IsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxFQUFNLElBQU0sSUFBTSxJQUFNLEVBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sRUFBTSxJQUFNLElBQzFDLElBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxFQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxJQUFNLElBQU0sSUFDMUMsRUFBTSxHQUFNLEVBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sR0FBTSxFQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLEVBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxFQUFNLElBQU0sRUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLEVBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLEdBQU0sR0FBTSxFQUFNLEdBQU0sR0FBTSxJQUMxQyxFQUFNLEdBQU0sR0FBTSxFQUFNLEdBQU0sR0FBTSxFQUFNLElBQzFDLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFDMUMsRUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sRUFBTSxJQUMxQyxFQUFNLEdBQU0sR0FBTSxFQUFNLEdBQU0sR0FBTSxFQUFNLElBQzFDLEVBQU0sR0FBTSxHQUFNLEVBQU0sR0FBTSxHQUFNLEdBQU0sSUFDMUMsSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUMxQyxHQUFNLEdBQU0sR0FBTSxFQUFNLEdBQU0sR0FBTSxHQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUMxQyxHQUFNLEdBQU0sR0FBTSxHQUFNLEVBQU0sR0FBTSxHQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsR0FBTSxHQUFNLEVBQU0sRUFBTSxHQUFNLEdBQU0sR0FBTSxJQUMxQyxHQUFNLEdBQU0sRUFBTSxFQUFNLEdBQU0sR0FBTSxHQUFNLElBQzFDLElBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFDMUMsRUFBTSxHQUFNLEdBQU0sR0FBTSxFQUFNLEdBQU0sR0FBTSxJQUMxQyxJQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLEVBQU0sR0FBTSxHQUFNLEdBQU0sRUFBTSxHQUFNLEdBQU0sSUFDMUMsSUFBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFDMUMsR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxHQUFNLEdBQU0sR0FBTSxFQUFNLEVBQU0sR0FBTSxHQUFNLElBQzFDLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxFQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxFQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxFQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFDMUMsR0FBTSxHQUFNLEVBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sR0FBTSxFQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFDMUMsR0FBTSxHQUFNLEVBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsR0FBTSxHQUFNLEdBQU0sRUFBTSxFQUFNLEdBQU0sR0FBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxFQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFDMUMsSUFBTSxJQUFNLEVBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxFQUFNLEdBQU0sR0FBTSxFQUFNLEdBQU0sR0FDMUMsSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEVBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxHQUFNLElBQzFDLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLEVBQU0sSUFBTSxJQUFNLElBQU0sRUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLEdBQU0sRUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLEdBQU0sR0FBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEVBQU0sSUFBTSxJQUFNLEVBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEVBQU0sR0FDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxHQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxFQUFNLEdBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEVBQU0sR0FBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxHQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxFQUFNLEdBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEVBQU0sR0FBTSxJQUMxQyxJQUFNLElBQU0sR0FBTSxHQUFNLEVBQU0sR0FBTSxHQUFNLElBQzFDLElBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLEVBQU0sR0FBTSxFQUFNLEdBQU0sRUFBTSxJQUMxQyxJQUFNLElBQU0sRUFBTSxHQUFNLEVBQU0sR0FBTSxFQUFNLElBQzFDLElBQU0sSUFBTSxFQUFNLEdBQU0sRUFBTSxHQUFNLEVBQU0sSUFDMUMsSUFBTSxJQUFNLEVBQU0sR0FBTSxFQUFNLEdBQU0sRUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEVBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLEdBQU0sRUFBTSxFQUFNLEdBQU0sR0FBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxHQUFNLEVBQU0sR0FBTSxHQUFNLEdBQU0sRUFBTSxHQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sR0FBTSxFQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLEVBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxFQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFDMUMsSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUMxQyxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQzFDLElBQU0sSUFBTSxJQUFNLElB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QUFZdnRDLEtBQUt1dEMsU0FBVXZ0QyxLQUFLdXRDLFVBQVloNkIsT0FBTzFELGlCQUFpQlEsR0FBR3JRLEtBQUs4dEMsZ0JBQWlCL21DLFNBQVNrTixLQUFLN00sWUFBWUwsU0FBU0MsY0FBY21KLE9BQVFvRCxPQUFPM0Qsb0JBQW9CUyxHQUFHclEsS0FBSzh0QyxnQkFBaUI1ckMsTUFBTXVjLEtBQUsxWCxTQUFTa04sS0FBSzg1QixpQkFBaUI1OUIsS0FBSXBLLFNBQzFQOUcsSUFDS1csSUFBQUEsRUFDMEMsT0FBN0NBLEVBQVMsTUFBTFgsT0FBWSxFQUFTQSxFQUFFK3VDLGdCQUEwQnB1QyxFQUFFaTZCLFlBQVk1NkIsRUFBQyxJQUUvRSxFQUNPZSxLQUFLNnRDLHVCQ3J6QkgsU0FBUzVLLEVBQU1DLEVBQU0zMEIsR0FDeEIsSUFBQWsxQixHQUFVLEVBQ1ZFLEdBQVcsRUFFWCxHQUFlLG1CQUFSVixFQUNILE1BQUEsSUFBSVcsVUFuRFEsdUJBeURiLE9BSkg3QixHQUFTeHpCLEtBQ1hrMUIsRUFBVSxZQUFhbDFCLElBQVlBLEVBQVFrMUIsUUFBVUEsRUFDckRFLEVBQVcsYUFBY3AxQixJQUFZQSxFQUFRbzFCLFNBQVdBLEdBRW5EWCxHQUFTQyxFQUFNQyxFQUFNLENBQzFCTyxRQUFXQSxFQUNYSixRQUFXSCxFQUNYUyxTQUFZQSxHQUVoQixDRHF5QnFDc0ssRUFDL0IsQ0FBQ2h2QyxFQUFHVyxFQUFHYyxLQUNFNlMsT0FBQWcyQixjQUNMM0IsR0FBRyxDQUNEcnhCLFNBQVV0WCxFQUNWb3ZCLGtCQUFtQnp1QixFQUNuQmlvQyxJQUFLbm5DLEVBQ0xvbkMsYUFBYzluQyxLQUFLd3RDLGNBQWNoeUIsVUFFN0MsR0FFTSxJQUVIIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDMsNCw1LDYsNyw4LDI3LDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUyXX0="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/main/game.mbt"),Uint8Array.from(atob("Ly8gIENvcHlyaWdodCAyMDI0IEJydW5vIEdhcmNpYQovLyAgQ29weXJpZ2h0IDIwMjQgSW50ZXJuYXRpb25hbCBEaWdpdGFsIEVjb25vbXkgQWNhZGVteQovLyAKLy8gIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwovLyAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0Ci8vIAovLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAovLyAKLy8gIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKLy8gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCi8vICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKLy8gIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKbGV0IHJhbmRvbSA6IEByYW5kb20uUmFuZG9tU3RhdGUgPSBAcmFuZG9tLmluaXRfc3RhdGUoKQoKbGV0IGZydWl0IDogQGxpYi5TcHJpdGUgPSBAbGliLnNwcml0ZSgKICBiIlx4MDBceGEwXHgwMlx4MDBceDBlXHhmMFx4MzZceDVjXHhkNlx4NTdceGQ1XHg1N1x4MzVceDVjXHgwZlx4ZjAiLAopCgpwdWIgc3RydWN0IEdhbWUgewogIHNuYWtlIDogU25ha2UKICBtdXQgZnJhbWVfY291bnQgOiBVSW50CiAgbXV0IHByZXZfZ2FtZXBhZCA6IEBsaWIuR2FtZVBhZAogIG11dCBmcnVpdCA6IFBvaW50Cn0KCnB1YiBmbiBHYW1lOjpuZXcoKSAtPiBHYW1lIHsKICB7CiAgICBzbmFrZTogU25ha2U6Om5ldygpLAogICAgZnJhbWVfY291bnQ6IDAsCiAgICBwcmV2X2dhbWVwYWQ6IEBsaWIuR2FtZVBhZDo6ZGVmYXVsdCgpLAogICAgZnJ1aXQ6IFBvaW50Ojp7CiAgICAgIHg6IHJhbmRvbS5nZW5faW50KCkuYWJzKCkgJSAyMCwKICAgICAgeTogcmFuZG9tLmdlbl9pbnQoKS5hYnMoKSAlIDIwLAogICAgfSwKICB9Cn0KCnB1YiBmbiB1cGRhdGUoc2VsZiA6IEdhbWUpIC0+IFVuaXQgewogIHNlbGYuZnJhbWVfY291bnQgKz0gMQogIHNlbGYuaW5wdXQoKQogIGlmIHNlbGYuc25ha2UuaXNfZGVhZCgpIHsKICAgIEBsaWIudHJhY2UoIkdhbWUgT3Zlci4uLk9yIG5vdD8iKQogICAgQGxpYi50b25lX25vdGVfbW9kZSgKICAgICAgKEBsaWIuTm90ZTo6bmV3KDYwLCBiZW5kPTApLCBOb25lKSwKICAgICAgQGxpYi5BRFNSOjpuZXcoNjApLAogICAgICBAbGliLkFEU1JWb2x1bWU6Om5ldygxMDApLAogICAgICBAbGliLlRvbmVGbGFnOjpuZXcoKSwKICAgICkKICB9CiAgaWYgc2VsZi5mcmFtZV9jb3VudCAlIDE1ID09IDAgewogICAgbGV0IGRyb3BwZWRfcG9zID0gc2VsZi5zbmFrZS51cGRhdGUoKQogICAgaWYgc2VsZi5zbmFrZS5ib2R5LmZyb250KCkgPT0gU29tZShzZWxmLmZydWl0KSB7CiAgICAgIG1hdGNoIGRyb3BwZWRfcG9zIHsKICAgICAgICBTb21lKHBvcykgPT4gc2VsZi5zbmFrZS5ib2R5LnB1c2hfYmFjayhwb3MpCiAgICAgICAgTm9uZSA9PiAoKQogICAgICB9CiAgICAgIHNlbGYuZnJ1aXQgPSBQb2ludDo6ewogICAgICAgIHg6IHJhbmRvbS5nZW5faW50KCkuYWJzKCkgJSAyMCwKICAgICAgICB5OiByYW5kb20uZ2VuX2ludCgpLmFicygpICUgMjAsCiAgICAgIH0KICAgIH0KICB9CiAgc2VsZi5zbmFrZS5kcmF3KCkKICBAbGliLnNldF9kcmF3X2NvbG9ycygwLCBpbmRleD0xKQogIEBsaWIuc2V0X2RyYXdfY29sb3JzKDIsIGluZGV4PTIpCiAgQGxpYi5zZXRfZHJhd19jb2xvcnMoMywgaW5kZXg9MykKICBAbGliLnNldF9kcmF3X2NvbG9ycyg0LCBpbmRleD00KQogIGZydWl0LmJsaXQoCiAgICBzZWxmLmZydWl0LnggKiA4LAogICAgc2VsZi5mcnVpdC55ICogOCwKICAgIDgsCiAgICA4LAogICAgeyBvbmVfYml0X3Blcl9waXhlbDogZmFsc2UsIGZsaXBfeDogZmFsc2UsIGZsaXBfeTogZmFsc2UsIHJvdGF0ZTogZmFsc2UgfSwKICApCn0KCnB1YiBmbiBpbnB1dChzZWxmIDogR2FtZSkgLT4gVW5pdCB7CiAgbGV0IGdhbWVwYWQgPSBAbGliLmdldF9nYW1lcGFkKCkKICBpZiBnYW1lcGFkICE9IHNlbGYucHJldl9nYW1lcGFkIHsKICAgIGlmIGdhbWVwYWQuYnV0dG9uX2Rvd24gewogICAgICBzZWxmLnNuYWtlLmRvd24oKQogICAgfQogICAgaWYgZ2FtZXBhZC5idXR0b25fbGVmdCB7CiAgICAgIHNlbGYuc25ha2UubGVmdCgpCiAgICB9CiAgICBpZiBnYW1lcGFkLmJ1dHRvbl9yaWdodCB7CiAgICAgIHNlbGYuc25ha2UucmlnaHQoKQogICAgfQogICAgaWYgZ2FtZXBhZC5idXR0b25fdXAgewogICAgICBzZWxmLnNuYWtlLnVwKCkKICAgIH0KICB9CiAgc2VsZi5wcmV2X2dhbWVwYWQgPSBnYW1lcGFkCn0K"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/main/main.mbt"),Uint8Array.from(atob("Ly8gIENvcHlyaWdodCAyMDI0IEJydW5vIEdhcmNpYQovLyAgQ29weXJpZ2h0IDIwMjQgSW50ZXJuYXRpb25hbCBEaWdpdGFsIEVjb25vbXkgQWNhZGVteQovLyAKLy8gIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwovLyAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0Ci8vIAovLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAovLyAKLy8gIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKLy8gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCi8vICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKLy8gIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKcHViIGZuIHN0YXJ0KCkgLT4gVW5pdCB7CiAgQGxpYi5zZXRfcGFsZXR0ZSgxLCBAbGliLnJnYigweGZiZjdmMykpCiAgQGxpYi5zZXRfcGFsZXR0ZSgyLCBAbGliLnJnYigweGU1YjA4MykpCiAgQGxpYi5zZXRfcGFsZXR0ZSgzLCBAbGliLnJnYigweDQyNmU1ZCkpCiAgQGxpYi5zZXRfcGFsZXR0ZSg0LCBAbGliLnJnYigweDIwMjgzZCkpCn0KCmxldCBnYW1lIDogR2FtZSA9IEdhbWU6Om5ldygpCgpwdWIgZm4gdXBkKCkgLT4gVW5pdCB7CiAgZ2FtZS51cGRhdGUoKQp9Cg=="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/main/moon.pkg.json"),Uint8Array.from(atob("ewogICAgImltcG9ydCI6IFsKICAgICAgICAibW9vbmJpdGxhbmcvd2FzbTQvbGliIgogICAgXSwKICAgICJsaW5rIjogewogICAgICAgICJ3YXNtLWdjIjogewogICAgICAgICAgICAiZXhwb3J0cyI6IFsKICAgICAgICAgICAgICAgICJzdGFydCIsCiAgICAgICAgICAgICAgICAidXBkOnVwZGF0ZSIKICAgICAgICAgICAgXSwKICAgICAgICAgICAgImltcG9ydC1tZW1vcnkiOiB7CiAgICAgICAgICAgICAgICAibW9kdWxlIjogImVudiIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJtZW1vcnkiCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJ3YXNtIjogewogICAgICAgICAgICAiZXhwb3J0cyI6IFsKICAgICAgICAgICAgICAgICJzdGFydCIsCiAgICAgICAgICAgICAgICAidXBkOnVwZGF0ZSIKICAgICAgICAgICAgXSwKICAgICAgICAgICAgImltcG9ydC1tZW1vcnkiOiB7CiAgICAgICAgICAgICAgICAibW9kdWxlIjogImVudiIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJtZW1vcnkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJoZWFwLXN0YXJ0LWFkZHJlc3MiOiA2NTkwCiAgICAgICAgfQogICAgfQp9Cg=="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/main/snake.mbt"),Uint8Array.from(atob("Ly8gIENvcHlyaWdodCAyMDI0IEJydW5vIEdhcmNpYQovLyAgQ29weXJpZ2h0IDIwMjQgSW50ZXJuYXRpb25hbCBEaWdpdGFsIEVjb25vbXkgQWNhZGVteQovLwovLyAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7Ci8vICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCi8vICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKLy8gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCi8vICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKLy8gIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKcHViIHN0cnVjdCBQb2ludCB7CiAgeCA6IEludAogIHkgOiBJbnQKfSBkZXJpdmUoRXEpCgpwdWIgc3RydWN0IFNuYWtlIHsKICBib2R5IDogQGRlcXVlLlRbUG9pbnRdCiAgbXV0IGRpcmVjdGlvbiA6IFBvaW50Cn0KCnB1YiBmbiBTbmFrZTo6bmV3KCkgLT4gU25ha2UgewogIHsKICAgIGJvZHk6IEBkZXF1ZS5vZigKICAgICAgW1BvaW50Ojp7IHg6IDIsIHk6IDAgfSwgUG9pbnQ6OnsgeDogMSwgeTogMCB9LCBQb2ludDo6eyB4OiAwLCB5OiAwIH1dLAogICAgKSwKICAgIGRpcmVjdGlvbjogUG9pbnQ6OnsgeDogMSwgeTogMCB9LAogIH0KfQoKcHViIGZuIGRyYXcoc2VsZiA6IFNuYWtlKSAtPiBVbml0IHsKICBAbGliLnNldF9kcmF3X2NvbG9ycyg0LCBpbmRleD0yKQogIEBsaWIuc2V0X2RyYXdfY29sb3JzKDMpCiAgc2VsZi5ib2R5Lml0ZXIoKS5lYWNoKGZuIHsgeyB4LCB5IH0gPT4gQGxpYi5yZWN0KHggKiA4LCB5ICogOCwgOCwgOCkgfSkKICBAbGliLnNldF9kcmF3X2NvbG9ycyg0KQogIHNlbGYuYm9keS5mcm9udCgpLm1hcChmbiB7IHsgeCwgeSB9ID0+IEBsaWIucmVjdCh4ICogOCwgeSAqIDgsIDgsIDgpIH0pCiAgfD4gaWdub3JlCn0KCnB1YiBmbiB1cGRhdGUoc2VsZiA6IFNuYWtlKSAtPiBQb2ludD8gewogIGxldCBoZWFkID0gc2VsZi5ib2R5LmZyb250KCkudW53cmFwKCkKICBzZWxmLmJvZHkucHVzaF9mcm9udCgKICAgIFBvaW50Ojp7CiAgICAgIHg6IChoZWFkLnggKyBzZWxmLmRpcmVjdGlvbi54ICsgMjApICUgMjAsCiAgICAgIHk6IChoZWFkLnkgKyBzZWxmLmRpcmVjdGlvbi55ICsgMjApICUgMjAsCiAgICB9LAogICkKICBzZWxmLmJvZHkucG9wX2JhY2soKQp9CgpwdWIgZm4gdXAoc2VsZiA6IFNuYWtlKSAtPiBVbml0IHsKICBpZiBzZWxmLmRpcmVjdGlvbi55ID09IDAgewogICAgc2VsZi5kaXJlY3Rpb24gPSBQb2ludDo6eyB4OiAwLCB5OiAtMSB9CiAgfQp9CgpwdWIgZm4gZG93bihzZWxmIDogU25ha2UpIC0+IFVuaXQgewogIGlmIHNlbGYuZGlyZWN0aW9uLnkgPT0gMCB7CiAgICBzZWxmLmRpcmVjdGlvbiA9IFBvaW50Ojp7IHg6IDAsIHk6IDEgfQogIH0KfQoKcHViIGZuIGxlZnQoc2VsZiA6IFNuYWtlKSAtPiBVbml0IHsKICBpZiBzZWxmLmRpcmVjdGlvbi54ID09IDAgewogICAgc2VsZi5kaXJlY3Rpb24gPSBQb2ludDo6eyB4OiAtMSwgeTogMCB9CiAgfQp9CgpwdWIgZm4gcmlnaHQoc2VsZiA6IFNuYWtlKSAtPiBVbml0IHsKICBpZiBzZWxmLmRpcmVjdGlvbi54ID09IDAgewogICAgc2VsZi5kaXJlY3Rpb24gPSBQb2ludDo6eyB4OiAxLCB5OiAwIH0KICB9Cn0KCnB1YiBmbiBpc19kZWFkKHNlbGYgOiBTbmFrZSkgLT4gQm9vbCB7CiAgc2VsZi5ib2R5Lml0ZXIoKS5kcm9wKDEpLmZpbmRfZmlyc3QoCiAgICBmbiB7IHBvaW50ID0+IHBvaW50ID09IHNlbGYuYm9keS5mcm9udCgpLnVud3JhcCgpIH0sCiAgKS5pc19lbXB0eSgpLm5vdCgpCn0K"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/.moon-lock"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/LICENCE"),Uint8Array.from(atob("CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwYWNoZSBMaWNlbnNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlcnNpb24gMi4wLCBKYW51YXJ5IDIwMDQKICAgICAgICAgICAgICAgICAgICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzLwoKICAgVEVSTVMgQU5EIENPTkRJVElPTlMgRk9SIFVTRSwgUkVQUk9EVUNUSU9OLCBBTkQgRElTVFJJQlVUSU9OCgogICAxLiBEZWZpbml0aW9ucy4KCiAgICAgICJMaWNlbnNlIiBzaGFsbCBtZWFuIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBmb3IgdXNlLCByZXByb2R1Y3Rpb24sCiAgICAgIGFuZCBkaXN0cmlidXRpb24gYXMgZGVmaW5lZCBieSBTZWN0aW9ucyAxIHRocm91Z2ggOSBvZiB0aGlzIGRvY3VtZW50LgoKICAgICAgIkxpY2Vuc29yIiBzaGFsbCBtZWFuIHRoZSBjb3B5cmlnaHQgb3duZXIgb3IgZW50aXR5IGF1dGhvcml6ZWQgYnkKICAgICAgdGhlIGNvcHlyaWdodCBvd25lciB0aGF0IGlzIGdyYW50aW5nIHRoZSBMaWNlbnNlLgoKICAgICAgIkxlZ2FsIEVudGl0eSIgc2hhbGwgbWVhbiB0aGUgdW5pb24gb2YgdGhlIGFjdGluZyBlbnRpdHkgYW5kIGFsbAogICAgICBvdGhlciBlbnRpdGllcyB0aGF0IGNvbnRyb2wsIGFyZSBjb250cm9sbGVkIGJ5LCBvciBhcmUgdW5kZXIgY29tbW9uCiAgICAgIGNvbnRyb2wgd2l0aCB0aGF0IGVudGl0eS4gRm9yIHRoZSBwdXJwb3NlcyBvZiB0aGlzIGRlZmluaXRpb24sCiAgICAgICJjb250cm9sIiBtZWFucyAoaSkgdGhlIHBvd2VyLCBkaXJlY3Qgb3IgaW5kaXJlY3QsIHRvIGNhdXNlIHRoZQogICAgICBkaXJlY3Rpb24gb3IgbWFuYWdlbWVudCBvZiBzdWNoIGVudGl0eSwgd2hldGhlciBieSBjb250cmFjdCBvcgogICAgICBvdGhlcndpc2UsIG9yIChpaSkgb3duZXJzaGlwIG9mIGZpZnR5IHBlcmNlbnQgKDUwJSkgb3IgbW9yZSBvZiB0aGUKICAgICAgb3V0c3RhbmRpbmcgc2hhcmVzLCBvciAoaWlpKSBiZW5lZmljaWFsIG93bmVyc2hpcCBvZiBzdWNoIGVudGl0eS4KCiAgICAgICJZb3UiIChvciAiWW91ciIpIHNoYWxsIG1lYW4gYW4gaW5kaXZpZHVhbCBvciBMZWdhbCBFbnRpdHkKICAgICAgZXhlcmNpc2luZyBwZXJtaXNzaW9ucyBncmFudGVkIGJ5IHRoaXMgTGljZW5zZS4KCiAgICAgICJTb3VyY2UiIGZvcm0gc2hhbGwgbWVhbiB0aGUgcHJlZmVycmVkIGZvcm0gZm9yIG1ha2luZyBtb2RpZmljYXRpb25zLAogICAgICBpbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkIHRvIHNvZnR3YXJlIHNvdXJjZSBjb2RlLCBkb2N1bWVudGF0aW9uCiAgICAgIHNvdXJjZSwgYW5kIGNvbmZpZ3VyYXRpb24gZmlsZXMuCgogICAgICAiT2JqZWN0IiBmb3JtIHNoYWxsIG1lYW4gYW55IGZvcm0gcmVzdWx0aW5nIGZyb20gbWVjaGFuaWNhbAogICAgICB0cmFuc2Zvcm1hdGlvbiBvciB0cmFuc2xhdGlvbiBvZiBhIFNvdXJjZSBmb3JtLCBpbmNsdWRpbmcgYnV0CiAgICAgIG5vdCBsaW1pdGVkIHRvIGNvbXBpbGVkIG9iamVjdCBjb2RlLCBnZW5lcmF0ZWQgZG9jdW1lbnRhdGlvbiwKICAgICAgYW5kIGNvbnZlcnNpb25zIHRvIG90aGVyIG1lZGlhIHR5cGVzLgoKICAgICAgIldvcmsiIHNoYWxsIG1lYW4gdGhlIHdvcmsgb2YgYXV0aG9yc2hpcCwgd2hldGhlciBpbiBTb3VyY2Ugb3IKICAgICAgT2JqZWN0IGZvcm0sIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSBMaWNlbnNlLCBhcyBpbmRpY2F0ZWQgYnkgYQogICAgICBjb3B5cmlnaHQgbm90aWNlIHRoYXQgaXMgaW5jbHVkZWQgaW4gb3IgYXR0YWNoZWQgdG8gdGhlIHdvcmsKICAgICAgKGFuIGV4YW1wbGUgaXMgcHJvdmlkZWQgaW4gdGhlIEFwcGVuZGl4IGJlbG93KS4KCiAgICAgICJEZXJpdmF0aXZlIFdvcmtzIiBzaGFsbCBtZWFuIGFueSB3b3JrLCB3aGV0aGVyIGluIFNvdXJjZSBvciBPYmplY3QKICAgICAgZm9ybSwgdGhhdCBpcyBiYXNlZCBvbiAob3IgZGVyaXZlZCBmcm9tKSB0aGUgV29yayBhbmQgZm9yIHdoaWNoIHRoZQogICAgICBlZGl0b3JpYWwgcmV2aXNpb25zLCBhbm5vdGF0aW9ucywgZWxhYm9yYXRpb25zLCBvciBvdGhlciBtb2RpZmljYXRpb25zCiAgICAgIHJlcHJlc2VudCwgYXMgYSB3aG9sZSwgYW4gb3JpZ2luYWwgd29yayBvZiBhdXRob3JzaGlwLiBGb3IgdGhlIHB1cnBvc2VzCiAgICAgIG9mIHRoaXMgTGljZW5zZSwgRGVyaXZhdGl2ZSBXb3JrcyBzaGFsbCBub3QgaW5jbHVkZSB3b3JrcyB0aGF0IHJlbWFpbgogICAgICBzZXBhcmFibGUgZnJvbSwgb3IgbWVyZWx5IGxpbmsgKG9yIGJpbmQgYnkgbmFtZSkgdG8gdGhlIGludGVyZmFjZXMgb2YsCiAgICAgIHRoZSBXb3JrIGFuZCBEZXJpdmF0aXZlIFdvcmtzIHRoZXJlb2YuCgogICAgICAiQ29udHJpYnV0aW9uIiBzaGFsbCBtZWFuIGFueSB3b3JrIG9mIGF1dGhvcnNoaXAsIGluY2x1ZGluZwogICAgICB0aGUgb3JpZ2luYWwgdmVyc2lvbiBvZiB0aGUgV29yayBhbmQgYW55IG1vZGlmaWNhdGlvbnMgb3IgYWRkaXRpb25zCiAgICAgIHRvIHRoYXQgV29yayBvciBEZXJpdmF0aXZlIFdvcmtzIHRoZXJlb2YsIHRoYXQgaXMgaW50ZW50aW9uYWxseQogICAgICBzdWJtaXR0ZWQgdG8gTGljZW5zb3IgZm9yIGluY2x1c2lvbiBpbiB0aGUgV29yayBieSB0aGUgY29weXJpZ2h0IG93bmVyCiAgICAgIG9yIGJ5IGFuIGluZGl2aWR1YWwgb3IgTGVnYWwgRW50aXR5IGF1dGhvcml6ZWQgdG8gc3VibWl0IG9uIGJlaGFsZiBvZgogICAgICB0aGUgY29weXJpZ2h0IG93bmVyLiBGb3IgdGhlIHB1cnBvc2VzIG9mIHRoaXMgZGVmaW5pdGlvbiwgInN1Ym1pdHRlZCIKICAgICAgbWVhbnMgYW55IGZvcm0gb2YgZWxlY3Ryb25pYywgdmVyYmFsLCBvciB3cml0dGVuIGNvbW11bmljYXRpb24gc2VudAogICAgICB0byB0aGUgTGljZW5zb3Igb3IgaXRzIHJlcHJlc2VudGF0aXZlcywgaW5jbHVkaW5nIGJ1dCBub3QgbGltaXRlZCB0bwogICAgICBjb21tdW5pY2F0aW9uIG9uIGVsZWN0cm9uaWMgbWFpbGluZyBsaXN0cywgc291cmNlIGNvZGUgY29udHJvbCBzeXN0ZW1zLAogICAgICBhbmQgaXNzdWUgdHJhY2tpbmcgc3lzdGVtcyB0aGF0IGFyZSBtYW5hZ2VkIGJ5LCBvciBvbiBiZWhhbGYgb2YsIHRoZQogICAgICBMaWNlbnNvciBmb3IgdGhlIHB1cnBvc2Ugb2YgZGlzY3Vzc2luZyBhbmQgaW1wcm92aW5nIHRoZSBXb3JrLCBidXQKICAgICAgZXhjbHVkaW5nIGNvbW11bmljYXRpb24gdGhhdCBpcyBjb25zcGljdW91c2x5IG1hcmtlZCBvciBvdGhlcndpc2UKICAgICAgZGVzaWduYXRlZCBpbiB3cml0aW5nIGJ5IHRoZSBjb3B5cmlnaHQgb3duZXIgYXMgIk5vdCBhIENvbnRyaWJ1dGlvbi4iCgogICAgICAiQ29udHJpYnV0b3IiIHNoYWxsIG1lYW4gTGljZW5zb3IgYW5kIGFueSBpbmRpdmlkdWFsIG9yIExlZ2FsIEVudGl0eQogICAgICBvbiBiZWhhbGYgb2Ygd2hvbSBhIENvbnRyaWJ1dGlvbiBoYXMgYmVlbiByZWNlaXZlZCBieSBMaWNlbnNvciBhbmQKICAgICAgc3Vic2VxdWVudGx5IGluY29ycG9yYXRlZCB3aXRoaW4gdGhlIFdvcmsuCgogICAyLiBHcmFudCBvZiBDb3B5cmlnaHQgTGljZW5zZS4gU3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YKICAgICAgdGhpcyBMaWNlbnNlLCBlYWNoIENvbnRyaWJ1dG9yIGhlcmVieSBncmFudHMgdG8gWW91IGEgcGVycGV0dWFsLAogICAgICB3b3JsZHdpZGUsIG5vbi1leGNsdXNpdmUsIG5vLWNoYXJnZSwgcm95YWx0eS1mcmVlLCBpcnJldm9jYWJsZQogICAgICBjb3B5cmlnaHQgbGljZW5zZSB0byByZXByb2R1Y2UsIHByZXBhcmUgRGVyaXZhdGl2ZSBXb3JrcyBvZiwKICAgICAgcHVibGljbHkgZGlzcGxheSwgcHVibGljbHkgcGVyZm9ybSwgc3VibGljZW5zZSwgYW5kIGRpc3RyaWJ1dGUgdGhlCiAgICAgIFdvcmsgYW5kIHN1Y2ggRGVyaXZhdGl2ZSBXb3JrcyBpbiBTb3VyY2Ugb3IgT2JqZWN0IGZvcm0uCgogICAzLiBHcmFudCBvZiBQYXRlbnQgTGljZW5zZS4gU3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YKICAgICAgdGhpcyBMaWNlbnNlLCBlYWNoIENvbnRyaWJ1dG9yIGhlcmVieSBncmFudHMgdG8gWW91IGEgcGVycGV0dWFsLAogICAgICB3b3JsZHdpZGUsIG5vbi1leGNsdXNpdmUsIG5vLWNoYXJnZSwgcm95YWx0eS1mcmVlLCBpcnJldm9jYWJsZQogICAgICAoZXhjZXB0IGFzIHN0YXRlZCBpbiB0aGlzIHNlY3Rpb24pIHBhdGVudCBsaWNlbnNlIHRvIG1ha2UsIGhhdmUgbWFkZSwKICAgICAgdXNlLCBvZmZlciB0byBzZWxsLCBzZWxsLCBpbXBvcnQsIGFuZCBvdGhlcndpc2UgdHJhbnNmZXIgdGhlIFdvcmssCiAgICAgIHdoZXJlIHN1Y2ggbGljZW5zZSBhcHBsaWVzIG9ubHkgdG8gdGhvc2UgcGF0ZW50IGNsYWltcyBsaWNlbnNhYmxlCiAgICAgIGJ5IHN1Y2ggQ29udHJpYnV0b3IgdGhhdCBhcmUgbmVjZXNzYXJpbHkgaW5mcmluZ2VkIGJ5IHRoZWlyCiAgICAgIENvbnRyaWJ1dGlvbihzKSBhbG9uZSBvciBieSBjb21iaW5hdGlvbiBvZiB0aGVpciBDb250cmlidXRpb24ocykKICAgICAgd2l0aCB0aGUgV29yayB0byB3aGljaCBzdWNoIENvbnRyaWJ1dGlvbihzKSB3YXMgc3VibWl0dGVkLiBJZiBZb3UKICAgICAgaW5zdGl0dXRlIHBhdGVudCBsaXRpZ2F0aW9uIGFnYWluc3QgYW55IGVudGl0eSAoaW5jbHVkaW5nIGEKICAgICAgY3Jvc3MtY2xhaW0gb3IgY291bnRlcmNsYWltIGluIGEgbGF3c3VpdCkgYWxsZWdpbmcgdGhhdCB0aGUgV29yawogICAgICBvciBhIENvbnRyaWJ1dGlvbiBpbmNvcnBvcmF0ZWQgd2l0aGluIHRoZSBXb3JrIGNvbnN0aXR1dGVzIGRpcmVjdAogICAgICBvciBjb250cmlidXRvcnkgcGF0ZW50IGluZnJpbmdlbWVudCwgdGhlbiBhbnkgcGF0ZW50IGxpY2Vuc2VzCiAgICAgIGdyYW50ZWQgdG8gWW91IHVuZGVyIHRoaXMgTGljZW5zZSBmb3IgdGhhdCBXb3JrIHNoYWxsIHRlcm1pbmF0ZQogICAgICBhcyBvZiB0aGUgZGF0ZSBzdWNoIGxpdGlnYXRpb24gaXMgZmlsZWQuCgogICA0LiBSZWRpc3RyaWJ1dGlvbi4gWW91IG1heSByZXByb2R1Y2UgYW5kIGRpc3RyaWJ1dGUgY29waWVzIG9mIHRoZQogICAgICBXb3JrIG9yIERlcml2YXRpdmUgV29ya3MgdGhlcmVvZiBpbiBhbnkgbWVkaXVtLCB3aXRoIG9yIHdpdGhvdXQKICAgICAgbW9kaWZpY2F0aW9ucywgYW5kIGluIFNvdXJjZSBvciBPYmplY3QgZm9ybSwgcHJvdmlkZWQgdGhhdCBZb3UKICAgICAgbWVldCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgogICAgICAoYSkgWW91IG11c3QgZ2l2ZSBhbnkgb3RoZXIgcmVjaXBpZW50cyBvZiB0aGUgV29yayBvcgogICAgICAgICAgRGVyaXZhdGl2ZSBXb3JrcyBhIGNvcHkgb2YgdGhpcyBMaWNlbnNlOyBhbmQKCiAgICAgIChiKSBZb3UgbXVzdCBjYXVzZSBhbnkgbW9kaWZpZWQgZmlsZXMgdG8gY2FycnkgcHJvbWluZW50IG5vdGljZXMKICAgICAgICAgIHN0YXRpbmcgdGhhdCBZb3UgY2hhbmdlZCB0aGUgZmlsZXM7IGFuZAoKICAgICAgKGMpIFlvdSBtdXN0IHJldGFpbiwgaW4gdGhlIFNvdXJjZSBmb3JtIG9mIGFueSBEZXJpdmF0aXZlIFdvcmtzCiAgICAgICAgICB0aGF0IFlvdSBkaXN0cmlidXRlLCBhbGwgY29weXJpZ2h0LCBwYXRlbnQsIHRyYWRlbWFyaywgYW5kCiAgICAgICAgICBhdHRyaWJ1dGlvbiBub3RpY2VzIGZyb20gdGhlIFNvdXJjZSBmb3JtIG9mIHRoZSBXb3JrLAogICAgICAgICAgZXhjbHVkaW5nIHRob3NlIG5vdGljZXMgdGhhdCBkbyBub3QgcGVydGFpbiB0byBhbnkgcGFydCBvZgogICAgICAgICAgdGhlIERlcml2YXRpdmUgV29ya3M7IGFuZAoKICAgICAgKGQpIElmIHRoZSBXb3JrIGluY2x1ZGVzIGEgIk5PVElDRSIgdGV4dCBmaWxlIGFzIHBhcnQgb2YgaXRzCiAgICAgICAgICBkaXN0cmlidXRpb24sIHRoZW4gYW55IERlcml2YXRpdmUgV29ya3MgdGhhdCBZb3UgZGlzdHJpYnV0ZSBtdXN0CiAgICAgICAgICBpbmNsdWRlIGEgcmVhZGFibGUgY29weSBvZiB0aGUgYXR0cmlidXRpb24gbm90aWNlcyBjb250YWluZWQKICAgICAgICAgIHdpdGhpbiBzdWNoIE5PVElDRSBmaWxlLCBleGNsdWRpbmcgdGhvc2Ugbm90aWNlcyB0aGF0IGRvIG5vdAogICAgICAgICAgcGVydGFpbiB0byBhbnkgcGFydCBvZiB0aGUgRGVyaXZhdGl2ZSBXb3JrcywgaW4gYXQgbGVhc3Qgb25lCiAgICAgICAgICBvZiB0aGUgZm9sbG93aW5nIHBsYWNlczogd2l0aGluIGEgTk9USUNFIHRleHQgZmlsZSBkaXN0cmlidXRlZAogICAgICAgICAgYXMgcGFydCBvZiB0aGUgRGVyaXZhdGl2ZSBXb3Jrczsgd2l0aGluIHRoZSBTb3VyY2UgZm9ybSBvcgogICAgICAgICAgZG9jdW1lbnRhdGlvbiwgaWYgcHJvdmlkZWQgYWxvbmcgd2l0aCB0aGUgRGVyaXZhdGl2ZSBXb3Jrczsgb3IsCiAgICAgICAgICB3aXRoaW4gYSBkaXNwbGF5IGdlbmVyYXRlZCBieSB0aGUgRGVyaXZhdGl2ZSBXb3JrcywgaWYgYW5kCiAgICAgICAgICB3aGVyZXZlciBzdWNoIHRoaXJkLXBhcnR5IG5vdGljZXMgbm9ybWFsbHkgYXBwZWFyLiBUaGUgY29udGVudHMKICAgICAgICAgIG9mIHRoZSBOT1RJQ0UgZmlsZSBhcmUgZm9yIGluZm9ybWF0aW9uYWwgcHVycG9zZXMgb25seSBhbmQKICAgICAgICAgIGRvIG5vdCBtb2RpZnkgdGhlIExpY2Vuc2UuIFlvdSBtYXkgYWRkIFlvdXIgb3duIGF0dHJpYnV0aW9uCiAgICAgICAgICBub3RpY2VzIHdpdGhpbiBEZXJpdmF0aXZlIFdvcmtzIHRoYXQgWW91IGRpc3RyaWJ1dGUsIGFsb25nc2lkZQogICAgICAgICAgb3IgYXMgYW4gYWRkZW5kdW0gdG8gdGhlIE5PVElDRSB0ZXh0IGZyb20gdGhlIFdvcmssIHByb3ZpZGVkCiAgICAgICAgICB0aGF0IHN1Y2ggYWRkaXRpb25hbCBhdHRyaWJ1dGlvbiBub3RpY2VzIGNhbm5vdCBiZSBjb25zdHJ1ZWQKICAgICAgICAgIGFzIG1vZGlmeWluZyB0aGUgTGljZW5zZS4KCiAgICAgIFlvdSBtYXkgYWRkIFlvdXIgb3duIGNvcHlyaWdodCBzdGF0ZW1lbnQgdG8gWW91ciBtb2RpZmljYXRpb25zIGFuZAogICAgICBtYXkgcHJvdmlkZSBhZGRpdGlvbmFsIG9yIGRpZmZlcmVudCBsaWNlbnNlIHRlcm1zIGFuZCBjb25kaXRpb25zCiAgICAgIGZvciB1c2UsIHJlcHJvZHVjdGlvbiwgb3IgZGlzdHJpYnV0aW9uIG9mIFlvdXIgbW9kaWZpY2F0aW9ucywgb3IKICAgICAgZm9yIGFueSBzdWNoIERlcml2YXRpdmUgV29ya3MgYXMgYSB3aG9sZSwgcHJvdmlkZWQgWW91ciB1c2UsCiAgICAgIHJlcHJvZHVjdGlvbiwgYW5kIGRpc3RyaWJ1dGlvbiBvZiB0aGUgV29yayBvdGhlcndpc2UgY29tcGxpZXMgd2l0aAogICAgICB0aGUgY29uZGl0aW9ucyBzdGF0ZWQgaW4gdGhpcyBMaWNlbnNlLgoKICAgNS4gU3VibWlzc2lvbiBvZiBDb250cmlidXRpb25zLiBVbmxlc3MgWW91IGV4cGxpY2l0bHkgc3RhdGUgb3RoZXJ3aXNlLAogICAgICBhbnkgQ29udHJpYnV0aW9uIGludGVudGlvbmFsbHkgc3VibWl0dGVkIGZvciBpbmNsdXNpb24gaW4gdGhlIFdvcmsKICAgICAgYnkgWW91IHRvIHRoZSBMaWNlbnNvciBzaGFsbCBiZSB1bmRlciB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YKICAgICAgdGhpcyBMaWNlbnNlLCB3aXRob3V0IGFueSBhZGRpdGlvbmFsIHRlcm1zIG9yIGNvbmRpdGlvbnMuCiAgICAgIE5vdHdpdGhzdGFuZGluZyB0aGUgYWJvdmUsIG5vdGhpbmcgaGVyZWluIHNoYWxsIHN1cGVyc2VkZSBvciBtb2RpZnkKICAgICAgdGhlIHRlcm1zIG9mIGFueSBzZXBhcmF0ZSBsaWNlbnNlIGFncmVlbWVudCB5b3UgbWF5IGhhdmUgZXhlY3V0ZWQKICAgICAgd2l0aCBMaWNlbnNvciByZWdhcmRpbmcgc3VjaCBDb250cmlidXRpb25zLgoKICAgNi4gVHJhZGVtYXJrcy4gVGhpcyBMaWNlbnNlIGRvZXMgbm90IGdyYW50IHBlcm1pc3Npb24gdG8gdXNlIHRoZSB0cmFkZQogICAgICBuYW1lcywgdHJhZGVtYXJrcywgc2VydmljZSBtYXJrcywgb3IgcHJvZHVjdCBuYW1lcyBvZiB0aGUgTGljZW5zb3IsCiAgICAgIGV4Y2VwdCBhcyByZXF1aXJlZCBmb3IgcmVhc29uYWJsZSBhbmQgY3VzdG9tYXJ5IHVzZSBpbiBkZXNjcmliaW5nIHRoZQogICAgICBvcmlnaW4gb2YgdGhlIFdvcmsgYW5kIHJlcHJvZHVjaW5nIHRoZSBjb250ZW50IG9mIHRoZSBOT1RJQ0UgZmlsZS4KCiAgIDcuIERpc2NsYWltZXIgb2YgV2FycmFudHkuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvcgogICAgICBhZ3JlZWQgdG8gaW4gd3JpdGluZywgTGljZW5zb3IgcHJvdmlkZXMgdGhlIFdvcmsgKGFuZCBlYWNoCiAgICAgIENvbnRyaWJ1dG9yIHByb3ZpZGVzIGl0cyBDb250cmlidXRpb25zKSBvbiBhbiAiQVMgSVMiIEJBU0lTLAogICAgICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IKICAgICAgaW1wbGllZCwgaW5jbHVkaW5nLCB3aXRob3V0IGxpbWl0YXRpb24sIGFueSB3YXJyYW50aWVzIG9yIGNvbmRpdGlvbnMKICAgICAgb2YgVElUTEUsIE5PTi1JTkZSSU5HRU1FTlQsIE1FUkNIQU5UQUJJTElUWSwgb3IgRklUTkVTUyBGT1IgQQogICAgICBQQVJUSUNVTEFSIFBVUlBPU0UuIFlvdSBhcmUgc29sZWx5IHJlc3BvbnNpYmxlIGZvciBkZXRlcm1pbmluZyB0aGUKICAgICAgYXBwcm9wcmlhdGVuZXNzIG9mIHVzaW5nIG9yIHJlZGlzdHJpYnV0aW5nIHRoZSBXb3JrIGFuZCBhc3N1bWUgYW55CiAgICAgIHJpc2tzIGFzc29jaWF0ZWQgd2l0aCBZb3VyIGV4ZXJjaXNlIG9mIHBlcm1pc3Npb25zIHVuZGVyIHRoaXMgTGljZW5zZS4KCiAgIDguIExpbWl0YXRpb24gb2YgTGlhYmlsaXR5LiBJbiBubyBldmVudCBhbmQgdW5kZXIgbm8gbGVnYWwgdGhlb3J5LAogICAgICB3aGV0aGVyIGluIHRvcnQgKGluY2x1ZGluZyBuZWdsaWdlbmNlKSwgY29udHJhY3QsIG9yIG90aGVyd2lzZSwKICAgICAgdW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IChzdWNoIGFzIGRlbGliZXJhdGUgYW5kIGdyb3NzbHkKICAgICAgbmVnbGlnZW50IGFjdHMpIG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzaGFsbCBhbnkgQ29udHJpYnV0b3IgYmUKICAgICAgbGlhYmxlIHRvIFlvdSBmb3IgZGFtYWdlcywgaW5jbHVkaW5nIGFueSBkaXJlY3QsIGluZGlyZWN0LCBzcGVjaWFsLAogICAgICBpbmNpZGVudGFsLCBvciBjb25zZXF1ZW50aWFsIGRhbWFnZXMgb2YgYW55IGNoYXJhY3RlciBhcmlzaW5nIGFzIGEKICAgICAgcmVzdWx0IG9mIHRoaXMgTGljZW5zZSBvciBvdXQgb2YgdGhlIHVzZSBvciBpbmFiaWxpdHkgdG8gdXNlIHRoZQogICAgICBXb3JrIChpbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkIHRvIGRhbWFnZXMgZm9yIGxvc3Mgb2YgZ29vZHdpbGwsCiAgICAgIHdvcmsgc3RvcHBhZ2UsIGNvbXB1dGVyIGZhaWx1cmUgb3IgbWFsZnVuY3Rpb24sIG9yIGFueSBhbmQgYWxsCiAgICAgIG90aGVyIGNvbW1lcmNpYWwgZGFtYWdlcyBvciBsb3NzZXMpLCBldmVuIGlmIHN1Y2ggQ29udHJpYnV0b3IKICAgICAgaGFzIGJlZW4gYWR2aXNlZCBvZiB0aGUgcG9zc2liaWxpdHkgb2Ygc3VjaCBkYW1hZ2VzLgoKICAgOS4gQWNjZXB0aW5nIFdhcnJhbnR5IG9yIEFkZGl0aW9uYWwgTGlhYmlsaXR5LiBXaGlsZSByZWRpc3RyaWJ1dGluZwogICAgICB0aGUgV29yayBvciBEZXJpdmF0aXZlIFdvcmtzIHRoZXJlb2YsIFlvdSBtYXkgY2hvb3NlIHRvIG9mZmVyLAogICAgICBhbmQgY2hhcmdlIGEgZmVlIGZvciwgYWNjZXB0YW5jZSBvZiBzdXBwb3J0LCB3YXJyYW50eSwgaW5kZW1uaXR5LAogICAgICBvciBvdGhlciBsaWFiaWxpdHkgb2JsaWdhdGlvbnMgYW5kL29yIHJpZ2h0cyBjb25zaXN0ZW50IHdpdGggdGhpcwogICAgICBMaWNlbnNlLiBIb3dldmVyLCBpbiBhY2NlcHRpbmcgc3VjaCBvYmxpZ2F0aW9ucywgWW91IG1heSBhY3Qgb25seQogICAgICBvbiBZb3VyIG93biBiZWhhbGYgYW5kIG9uIFlvdXIgc29sZSByZXNwb25zaWJpbGl0eSwgbm90IG9uIGJlaGFsZgogICAgICBvZiBhbnkgb3RoZXIgQ29udHJpYnV0b3IsIGFuZCBvbmx5IGlmIFlvdSBhZ3JlZSB0byBpbmRlbW5pZnksCiAgICAgIGRlZmVuZCwgYW5kIGhvbGQgZWFjaCBDb250cmlidXRvciBoYXJtbGVzcyBmb3IgYW55IGxpYWJpbGl0eQogICAgICBpbmN1cnJlZCBieSwgb3IgY2xhaW1zIGFzc2VydGVkIGFnYWluc3QsIHN1Y2ggQ29udHJpYnV0b3IgYnkgcmVhc29uCiAgICAgIG9mIHlvdXIgYWNjZXB0aW5nIGFueSBzdWNoIHdhcnJhbnR5IG9yIGFkZGl0aW9uYWwgbGlhYmlsaXR5LgoKICAgRU5EIE9GIFRFUk1TIEFORCBDT05ESVRJT05TCgogICBBUFBFTkRJWDogSG93IHRvIGFwcGx5IHRoZSBBcGFjaGUgTGljZW5zZSB0byB5b3VyIHdvcmsuCgogICAgICBUbyBhcHBseSB0aGUgQXBhY2hlIExpY2Vuc2UgdG8geW91ciB3b3JrLCBhdHRhY2ggdGhlIGZvbGxvd2luZwogICAgICBib2lsZXJwbGF0ZSBub3RpY2UsIHdpdGggdGhlIGZpZWxkcyBlbmNsb3NlZCBieSBicmFja2V0cyAiW10iCiAgICAgIHJlcGxhY2VkIHdpdGggeW91ciBvd24gaWRlbnRpZnlpbmcgaW5mb3JtYXRpb24uIChEb24ndCBpbmNsdWRlCiAgICAgIHRoZSBicmFja2V0cyEpICBUaGUgdGV4dCBzaG91bGQgYmUgZW5jbG9zZWQgaW4gdGhlIGFwcHJvcHJpYXRlCiAgICAgIGNvbW1lbnQgc3ludGF4IGZvciB0aGUgZmlsZSBmb3JtYXQuIFdlIGFsc28gcmVjb21tZW5kIHRoYXQgYQogICAgICBmaWxlIG9yIGNsYXNzIG5hbWUgYW5kIGRlc2NyaXB0aW9uIG9mIHB1cnBvc2UgYmUgaW5jbHVkZWQgb24gdGhlCiAgICAgIHNhbWUgInByaW50ZWQgcGFnZSIgYXMgdGhlIGNvcHlyaWdodCBub3RpY2UgZm9yIGVhc2llcgogICAgICBpZGVudGlmaWNhdGlvbiB3aXRoaW4gdGhpcmQtcGFydHkgYXJjaGl2ZXMuCgogICBDb3B5cmlnaHQgMjAyNCBJbnRlcm5hdGlvbmFsIERpZ2l0YWwgRWNvbm9teSBBY2FkZW15CgogICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCiAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCiAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAgIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2Uu"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/NOTICE.md"),Uint8Array.from(atob("IyBMSUNFTlNFCgojIyBMaWNlbnNlIGZvciB0aGUgbGlicmFyeQoKVGhlIGxpYnJhcnkgaXRzZWxmIGlzIHVuZGVyCltBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjBdKGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuaHRtbCkuCgojIyBPcmlnaW5hbCBMaWNlbnNlIGZvciB0aGUgZXhhbXBsZXMKCiMjIyBMaWNlbnNlIGZvciB0aGUgc25ha2UgYW5kIHNvbWUgY29tbWVudHMKClRoZSBleGFtcGxlIG9mIHNuYWtlIGFuZCBzb21lIGNvbW1lbnRzIGFyZSBhZGFwdGVkIGZyb20KW3RoZSB0dXRvcmlhbCBvZiBXQVNNLTRdKGh0dHBzOi8vZ2l0aHViLmNvbS9hZHVyb3Mvd2FzbTQvdHJlZS8zOWNjZGZiNTQxODJlMGMzYTcxZTU3MzU2ZGVmOWY2NmQwYTVjMGE4KToKCkNvcHlyaWdodCAoYykgQnJ1bm8gR2FyY2lhCgpQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZQp3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlCmFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEgKUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORApGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCwKSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NIExPU1MKT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SIE9USEVSClRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgT0YKVEhJUyBTT0ZUV0FSRS4K"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/README.md"),Uint8Array.from(atob("IyBXYXNtNCBCaW5kaW5nIGZvciBNb29uQml0CgpUaGlzIGlzIGFuIG9waW5pb25hdGVkIGJpbmRpbmcgZm9yIFtXYXNtNF0oaHR0cHM6Ly93YXNtNC5vcmcpIGluIE1vb25CaXQuCgojIyBQcmVyZXF1aXNpdGVzCgotIE1vb25CaXQgdG9vbGNoYWluCi0gW05vZGUuanNdKGh0dHBzOi8vbm9kZWpzLm9yZy9lbikKCiMjIFVzYWdlCgotIEFkZCB0aGlzIHBhY2thZ2U6IGBtb29uIGFkZCBtb29uYml0bGFuZy93YXNtNGAKLSBEZXZlbG9wIHdpdGggdGhpcyBwYWNrYWdlIGFzIG90aGVyIHBhY2thZ2VzCi0gT3B0aW9uYWxseSBleHBvcnQgYSBmdW5jdGlvbiBjYWxsZWQgYHN0YXJ0YCB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgb25jZSBvbgogIGluaXRpYWxpemF0aW9uIGFuZCBleHBvcnQgYSBmdW5jdGlvbiBjYWxsZWQgYHVwZGF0ZWAgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGF0CiAgNjBIeiBmb3IgdGhlIGV4cGVjdGVkIGJhY2tlbmQKLSBJbXBvcnQgYSBtZW1vcnkgd2l0aCB0aGUgbW9kdWxlIG9mIGBlbnZgIGFuZCBuYW1lIG9mIGBtZW1vcnlgCi0gQnVpbGQgd2l0aCBgbW9vbiBidWlsZCAtLXRhcmdldCA8d2FzbS1nYyBvciB3YXNtPmAgd2l0aCB0aGUgcmVzcGVjdGl2ZSBiYWNrZW5kCi0gRXhlY3V0ZSBgbnB4IHdhc200IHJ1biA8dGFyZ2V0Pi53YXNtYC4gVGhlIHRhcmdldCBzaG91bGQgYmUgbG9jYXRlZCBpbgogIGB0YXJnZXQvd2FzbS9yZWxlYXNlL2J1aWxkLzxwYWNrYWdlIHBhdGg+LzxwYWNrYWdlIG5hbWU+Lndhc21gIGZvciB3YXNtCiAgYmFja2VuZCwgb3IgYHRhcmdldC93YXNtLWdjL3JlbGVhc2UvYnVpbGQvPHBhY2thZ2UgcGF0aD4vPHBhY2thZ2UgbmFtZT4ud2FzbWAKICBmb3Igd2FzbS1nYyBiYWNrZW5kLiBUaGUgYnJvd3NlciBzaG91bGQgb3BlbiBhdXRvbWF0aWNhbGx5IGFuZCBkaXNwbGF5IHRoZQogIGdhbWUuIEVuam95CgojIyBFeGFtcGxlcwoKVGhlIHNuYWtlIGV4YW1wbGUgKGFkYXB0ZWQgZnJvbSB0aGUgV2FzbTQgZG9jdW1lbnRhdGlvbikgZGVtb25zdHJhdGVzIHRoZSB1c2FnZS4gWW91IG1heSBleGVjdXRlCgpgYGBiYXNoCm1vb24gYnVpbGQgLS1zb3VyY2UtZGlyIGV4YW1wbGUvc25ha2UgLS10YXJnZXQgd2FzbQpucHggd2FzbTQgcnVuIGV4YW1wbGUvc25ha2UvdGFyZ2V0L3dhc20vcmVsZWFzZS9idWlsZC9zbmFrZS53YXNtCmBgYAoKYW5kIGVuam95IHRoZSBnYW1lLgoKIyMgUmVmZXJlbmNlcwoKLSBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBNb29uQml0LCB2aXNpdDoKICBbTW9vbkJpdCBvZmZpY2lhbCB3ZWJzaXRlXShodHRwczovL3d3dy5tb29uYml0bGFuZy5jb20vZG9jcy9zeW50YXgpCi0gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgV2FzbTQgYW5kIGhvdyB0byBwbGF5LCB2aXNpdDoKICBbV0FTTS00IERvY3VtZW50YXRpb25dKGh0dHBzOi8vd2FzbTQub3JnL2RvY3MvKQo="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/moon.mod.json"),Uint8Array.from(atob("ewogICJuYW1lIjogIm1vb25iaXRsYW5nL3dhc200IiwKICAidmVyc2lvbiI6ICIwLjEuMSIsCiAgInJlYWRtZSI6ICJSRUFETUUubWQiLAogICJyZXBvc2l0b3J5IjogImh0dHBzOi8vZ2l0aHViLmNvbS9tb29uYml0bGFuZy93YXNtNCIsCiAgImxpY2Vuc2UiOiAiQXBhY2hlLTIuMCIsCiAgImtleXdvcmRzIjogWwogICAgImdhbWUiCiAgXSwKICAiZGVzY3JpcHRpb24iOiAiQW4gb3BpbmlvbmF0ZWQgYmluZGluZyBmb3IgV0FTTS00LCBhIHJldHJvIGdhbWUgZnJhbWV3b3JrIHVzaW5nIFdlYkFzc2VtYmx5Igp9"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/moon.db"),Uint8Array.from(atob("IQAAAAAAAAAwLjEuMjAyNDA3MjMgKDJjOGM2MmYgMjAyNC0wNy0yMykXAAAAAAAAAHYwLjEuMjAyNDA3MjMrOGYzNzcyNDNhAQAAAAAAAABDAAAAAAAAAC9Vc2Vycy93ZW55dXhpYW5nL1dvcmtzcGFjZS9tb29uZmlkZGxlLXdhc200L2FwcC9tYWluL21vb24ucGtnLmpzb268+/0peN51JQMAAAAAAAAAPgAAAAAAAAAvVXNlcnMvd2VueXV4aWFuZy9Xb3Jrc3BhY2UvbW9vbmZpZGRsZS13YXNtNC9hcHAvbWFpbi9tYWluLm1idD4AAAAAAAAAL1VzZXJzL3dlbnl1eGlhbmcvV29ya3NwYWNlL21vb25maWRkbGUtd2FzbTQvYXBwL21haW4vZ2FtZS5tYnQ/AAAAAAAAAC9Vc2Vycy93ZW55dXhpYW5nL1dvcmtzcGFjZS9tb29uZmlkZGxlLXdhc200L2FwcC9tYWluL3NuYWtlLm1idA=="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/lib/ffi.mbt"),Uint8Array.from(atob("Ly8gIENvcHlyaWdodCAyMDI0IEludGVybmF0aW9uYWwgRGlnaXRhbCBFY29ub215IEFjYWRlbXkKLy8gCi8vICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8gIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KLy8gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAovLyAKLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8gCi8vICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCi8vICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8vIEFkZHJlc3NlczogaHR0cHM6Ly93YXNtNC5vcmcvZG9jcy9yZWZlcmVuY2UvbWVtb3J5I21lbW9yeS1tYXAKbGV0IGFkZHJlc3NfUEFMRVRURSA9IDB4NAoKbGV0IGFkZHJlc3NfRFJBV19DT0xPUlMgPSAweDE0CgpsZXQgYWRkcmVzc19HQU1FUEFEUyA9IDB4MTYKCmxldCBhZGRyZXNzX01PVVNFX1ggPSAweDFhCgpsZXQgYWRkcmVzc19NT1VTRV9ZID0gMHgxYwoKbGV0IGFkZHJlc3NfTU9VU0VfQlVUVE9OUyA9IDB4MWUKCmxldCBhZGRyZXNzX1NZU1RFTV9GTEFHUyA9IDB4MWYKCmxldCBhZGRyZXNzX05FVFBMQVkgPSAweDIwCgpsZXQgYWRkcmVzc19GUkFNRUJVRkZFUiA9IDB4YTAKCmV4dGVybiAid2FzbSIgZm4gbG9hZF9ieXRlKG9mZnNldCA6IEludCkgLT4gQnl0ZSA9CiAgI3woZnVuYyAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikgKGkzMi5sb2FkOF91IChsb2NhbC5nZXQgMCkpKQoKZXh0ZXJuICJ3YXNtIiBmbiBzdG9yZV9ieXRlKG9mZnNldCA6IEludCwgYnl0ZSA6IEJ5dGUpID0KICAjfChmdW5jIChwYXJhbSBpMzIpIChwYXJhbSBpMzIpIChpMzIuc3RvcmU4IChsb2NhbC5nZXQgMCkgKGxvY2FsLmdldCAxKSkpCgpleHRlcm4gIndhc20iIGZuIGxvYWRfczE2KG9mZnNldCA6IEludCkgLT4gSW50ID0KICAjfChmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAoaTMyLmxvYWQxNl9zIChsb2NhbC5nZXQgMCkpKQoKZXh0ZXJuICJ3YXNtIiBmbiBsb2FkX3UxNihvZmZzZXQgOiBJbnQpIC0+IFVJbnQgPQogICN8KGZ1bmMgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpIChpMzIubG9hZDE2X3UgKGxvY2FsLmdldCAwKSkpCgpleHRlcm4gIndhc20iIGZuIHN0b3JlX2kxNihvZmZzZXQgOiBJbnQsIHZhbHVlIDogSW50KSA9CiAgI3woZnVuYyAocGFyYW0gaTMyKSAocGFyYW0gaTMyKSAoaTMyLnN0b3JlMTYgKGxvY2FsLmdldCAwKSAobG9jYWwuZ2V0IDEpKSkKCmV4dGVybiAid2FzbSIgZm4gbG9hZF9zMzIob2Zmc2V0IDogSW50KSAtPiBJbnQgPQogICN8KGZ1bmMgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpIChpMzIubG9hZCAobG9jYWwuZ2V0IDApKSkKCmV4dGVybiAid2FzbSIgZm4gc3RvcmVfaTMyKG9mZnNldCA6IEludCwgdmFsdWUgOiBJbnQpID0KICAjfChmdW5jIChwYXJhbSBpMzIpIChwYXJhbSBpMzIpIChpMzIuc3RvcmUgKGxvY2FsLmdldCAwKSAobG9jYWwuZ2V0IDEpKSkKCmZuIGJsaXRfZmZpKAogIHNwcml0ZVB0ciA6IEludCwKICB4IDogSW50LAogIHkgOiBJbnQsCiAgd2lkdGggOiBJbnQsCiAgaGVpZ2h0IDogSW50LAogIGZsYWdzIDogSW50CikgPSAiZW52IiAiYmxpdCIKCmZuIGJsaXRfc3ViX2ZmaSgKICBzcHJpdGVQdHIgOiBJbnQsCiAgeCA6IEludCwKICB5IDogSW50LAogIHdpZHRoIDogSW50LAogIGhlaWdodCA6IEludCwKICBzcmNfeCA6IEludCwKICBzcmNfeSA6IEludCwKICBzdHJpZGUgOiBJbnQsCiAgZmxhZ3MgOiBJbnQKKSA9ICJlbnYiICJibGl0U3ViIgoKZm4gdGV4dF9mZmkoc3RyIDogSW50LCB4IDogSW50LCB5IDogSW50KSA9ICJlbnYiICJ0ZXh0IgoKZm4gdG9uZV9mZmkoZnJlcXVlbmN5IDogVUludCwgZHVyYXRpb24gOiBVSW50LCB2b2x1bWUgOiBVSW50LCBmbGFncyA6IFVJbnQpID0gImVudiIgInRvbmUiCgpmbiB0cmFjZV9mZmkob2Zmc2V0IDogSW50KSA9ICJlbnYiICJ0cmFjZSIKCmZuIGRpc2tyX2ZmaShwdHIgOiBJbnQsIHNpemUgOiBJbnQpIC0+IEludCA9ICJlbnYiICJkaXNrciIKCmZuIGRpc2t3X2ZmaShwdHIgOiBJbnQsIHNpemUgOiBJbnQpIC0+IEludCA9ICJlbnYiICJkaXNrdyIK"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/lib/ffi.wasm-gc.mbt"),Uint8Array.from(atob("Ly8gIENvcHlyaWdodCAyMDI0IEludGVybmF0aW9uYWwgRGlnaXRhbCBFY29ub215IEFjYWRlbXkKLy8gCi8vICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8gIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KLy8gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAovLyAKLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8gCi8vICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCi8vICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCmZuIGdldF9hZGRyKGJ5dGVzIDogQnl0ZXMpIC0+IEludCB7CiAgZm9yIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoKCk7IGkgPSBpICsgMSB7CiAgICBzdG9yZV9ieXRlKGFkZHJlc3NfSEVBUCArIGksIGJ5dGVzW2ldKQogIH0KICBhZGRyZXNzX0hFQVAKfQoKbGV0IGFkZHJlc3NfSEVBUCA9IDB4MTlhMA=="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/lib/ffi.wasm.mbt"),Uint8Array.from(atob("Ly8gIENvcHlyaWdodCAyMDI0IEludGVybmF0aW9uYWwgRGlnaXRhbCBFY29ub215IEFjYWRlbXkKLy8gCi8vICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8gIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KLy8gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAovLyAKLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8gCi8vICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCi8vICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCmV4dGVybiAid2FzbSIgZm4gZ2V0X2FkZHIoYnl0ZXMgOiBCeXRlcykgLT4gSW50ID0KICAjfChmdW5jIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSAoY2FsbCAkcmFlbC5kZWNyZWYgKGxvY2FsLmdldCAwKSkgKGkzMi5hZGQgKGxvY2FsLmdldCAwKSAoaTMyLmNvbnN0IDgpKSkK"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/lib/function.mbt"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/lib/memory.mbt"),Uint8Array.from(atob("Ly8gIENvcHlyaWdodCAyMDI0IEludGVybmF0aW9uYWwgRGlnaXRhbCBFY29ub215IEFjYWRlbXkKLy8gCi8vICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8gIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KLy8gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAovLyAKLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8gCi8vICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCi8vICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCnR5cGUgQ29sb3IgVUludAoKcHViIGZuIHJnYihjb2xvciA6IFVJbnQpIC0+IENvbG9yIHsKICBjb2xvcgp9CgovLy8gU2V0cyB0aGUgY29sb3Igb2YgdGhlIHBhbGV0dGUgYXQgdGhlIGdpdmVuIGluZGV4LgovLy8gCi8vLyBAcGFyYW0gaW5kZXggdGhlIGluZGV4IG9mIHRoZSBwYWxldHRlIHRvIHNldCwgZnJvbSAxIHRvIDQgKGluY2x1c2l2ZSkgIAovLy8gQHBhcmFtIGNvbG9yIHRoZSBjb2xvciB0byBzZXQKcHViIGZuIHNldF9wYWxldHRlKGluZGV4IDogVUludCwgY29sb3IgOiBDb2xvcikgLT4gVW5pdCB7CiAgaWYgaW5kZXggPT0gMCB8fCBpbmRleCA+IDQgewogICAgdHJhY2UoIlBhbGV0dGUgaW5kZXggb3V0IG9mIHJhbmdlIikKICAgIHBhbmljKCkKICB9CiAgc3RvcmVfaTMyKGFkZHJlc3NfUEFMRVRURSArIChpbmRleC50b19pbnQoKSAtIDEpICogNCwgY29sb3IuMC50b19pbnQoKSkKfQoKLy8vIEdldHMgdGhlIGNvbG9yIG9mIHRoZSBwYWxldHRlIGF0IHRoZSBnaXZlbiBpbmRleC4KLy8vIAovLy8gQHBhcmFtIGluZGV4IHRoZSBpbmRleCBvZiB0aGUgcGFsZXR0ZSB0byBnZXQsIGZyb20gMSB0byA0IChpbmNsdXNpdmUpICAKLy8vIEByZXR1cm4gdGhlIGNvbG9yIGF0IHRoZSBnaXZlbiBpbmRleApwdWIgZm4gZ2V0X3BhbGV0dGUoaW5kZXggOiBVSW50KSAtPiBDb2xvciB7CiAgaWYgaW5kZXggPT0gMCB8fCBpbmRleCA+IDQgewogICAgdHJhY2UoIlBhbGV0dGUgaW5kZXggb3V0IG9mIHJhbmdlIikKICAgIHBhbmljKCkKICB9CiAgbG9hZF9zMzIoYWRkcmVzc19QQUxFVFRFICsgKGluZGV4LnRvX2ludCgpIC0gMSkgKiA0KS50b191aW50KCkKfQoKLy8vIFNldHMgdGhlIGRyYXcgY29sb3IgYXQgdGhlIGdpdmVuIGluZGV4LgovLy8gCi8vLyBAcGFyYW0gaW5kZXggdGhlIGluZGV4IG9mIHRoZSBkcmF3IGNvbG9yIHRvIHNldCwgZnJvbSAxIHRvIDQgKGluY2x1c2l2ZSkgIAovLy8gQHBhcmFtIHBhbGV0dGUgdGhlIGluZGV4IG9mIHRoZSBwYWxldHRlIHRvIHNldCB0aGUgZHJhdyBjb2xvciB0bywgZnJvbSAxIHRvIDQgKGluY2x1c2l2ZSksIG9yIDAgZm9yIHRyYW5zcGFyZW50CnB1YiBmbiBzZXRfZHJhd19jb2xvcnMocGFsZXR0ZSA6IFVJbnQsIH5pbmRleCA6IFVJbnQgPSAxKSAtPiBVbml0IHsKICBpZiBpbmRleCA9PSAwIHx8IGluZGV4ID4gNCB8fCBwYWxldHRlID4gNCB7CiAgICB0cmFjZSgiRHJhdyBjb2xvciBpbmRleCBvciBwYWxldHRlIGluZGV4IG91dCBvZiByYW5nZSIpCiAgICBwYW5pYygpCiAgfQogIGxldCBjdXJyZW50X2NvbG9yID0gZ2V0X2RyYXdfY29sb3JzKGluZGV4KQogIGxldCB1cGRhdGVkX2NvbG9yID0gYml0c2V0KGN1cnJlbnRfY29sb3IsIHBhbGV0dGUsIChpbmRleCAtIDFVKSAqIDRVLCA0VSkKICBzdG9yZV9pMTYoYWRkcmVzc19EUkFXX0NPTE9SUywgdXBkYXRlZF9jb2xvci50b19pbnQoKSkKfQoKLy8vIEdldHMgdGhlIGRyYXcgY29sb3IgYXQgdGhlIGdpdmVuIGluZGV4LgovLy8gCi8vLyBAcGFyYW0gaW5kZXggdGhlIGluZGV4IG9mIHRoZSBkcmF3IGNvbG9yIHRvIGdldCwgZnJvbSAxIHRvIDQgKGluY2x1c2l2ZSkgIAovLy8gQHJldHVybiB0aGUgaW5kZXggb2YgdGhlIHBhbGV0dGUgdGhhdCB0aGUgZHJhdyBjb2xvciBpcyBzZXQgdG8KcHViIGZuIGdldF9kcmF3X2NvbG9ycyhpbmRleCA6IFVJbnQpIC0+IFVJbnQgewogIGlmIGluZGV4ID09IDAgfHwgaW5kZXggPiA0IHsKICAgIHRyYWNlKCJEcmF3IGNvbG9yIGluZGV4IG91dCBvZiByYW5nZSIpCiAgICBwYW5pYygpCiAgfQogIGxvYWRfdTE2KGFkZHJlc3NfRFJBV19DT0xPUlMpCn0KCnB1YihyZWFkb25seSkgc3RydWN0IEdhbWVQYWQgewogIGJ1dHRvbl8xIDogQm9vbAogIGJ1dHRvbl8yIDogQm9vbAogIGJ1dHRvbl9sZWZ0IDogQm9vbAogIGJ1dHRvbl9yaWdodCA6IEJvb2wKICBidXR0b25fdXAgOiBCb29sCiAgYnV0dG9uX2Rvd24gOiBCb29sCn0gZGVyaXZlKEVxLCBEZWZhdWx0KQoKLy8vIEdldHMgdGhlIHN0YXRlIG9mIHRoZSBnYW1lcGFkcy4KLy8vIAovLy8gQHBhcmFtIGluZGV4IHRoZSBpbmRleCBvZiB0aGUgZ2FtZXBhZCB0byBnZXQsIGZyb20gMSB0byA0IChpbmNsdXNpdmUpICAKLy8vIEByZXR1cm4gdGhlIHN0YXRlIG9mIHRoZSBnYW1lcGFkcwpwdWIgZm4gZ2V0X2dhbWVwYWQofmluZGV4IDogVUludCA9IDEpIC0+IEdhbWVQYWQgewogIGlmIGluZGV4LnRvX2ludCgpID4gNCB7CiAgICB0cmFjZSgiR2FtZXBhZCBpbmRleCBvdXQgb2YgcmFuZ2UiKQogICAgcGFuaWMoKQogIH0KICBsZXQgc3RhdGUgPSBsb2FkX2J5dGUoYWRkcmVzc19HQU1FUEFEUyArIGluZGV4LnRvX2ludCgpIC0gMSkudG9faW50KCkKICBHYW1lUGFkOjp7CiAgICBidXR0b25fMTogKHN0YXRlICYgMSkgPT0gMSwKICAgIGJ1dHRvbl8yOiAoc3RhdGUgJiAyKSA9PSAyLAogICAgYnV0dG9uX2xlZnQ6IChzdGF0ZSAmIDE2KSA9PSAxNiwKICAgIGJ1dHRvbl9yaWdodDogKHN0YXRlICYgMzIpID09IDMyLAogICAgYnV0dG9uX3VwOiAoc3RhdGUgJiA2NCkgPT0gNjQsCiAgICBidXR0b25fZG93bjogKHN0YXRlICYgMTI4KSA9PSAxMjgsCiAgfQp9CgpwdWIocmVhZG9ubHkpIHN0cnVjdCBNb3VzZSB7CiAgeCA6IEludAogIHkgOiBJbnQKICBsZWZ0IDogQm9vbAogIG1pZGRsZSA6IEJvb2wKICByaWdodCA6IEJvb2wKfSBkZXJpdmUoRXEsIERlZmF1bHQpCgovLy8gR2V0cyB0aGUgc3RhdGUgb2YgdGhlIG1vdXNlLgovLy8gCi8vLyBAcmV0dXJuIHRoZSBzdGF0ZSBvZiB0aGUgbW91c2UKcHViIGZuIGdldF9tb3VzZSgpIC0+IE1vdXNlIHsKICBsZXQgYnV0dG9ucyA9IGxvYWRfYnl0ZShhZGRyZXNzX01PVVNFX0JVVFRPTlMpLnRvX2ludCgpLnRvX3VpbnQoKQogIE1vdXNlOjp7CiAgICB4OiBsb2FkX3MxNihhZGRyZXNzX01PVVNFX1gpLAogICAgeTogbG9hZF9zMTYoYWRkcmVzc19NT1VTRV9ZKSwKICAgIGxlZnQ6IChidXR0b25zICYgMVUpID09IDFVLAogICAgbWlkZGxlOiAoYnV0dG9ucyAmIDJVKSA9PSAyVSwKICAgIHJpZ2h0OiAoYnV0dG9ucyAmIDRVKSA9PSA0VSwKICB9Cn0KCi8vLyBNYW5pcHVsYXRlIHRoZSBmcmFtZWJ1ZmZlciBkaXJlY3RseS4KLy8vIAovLy8gQHBhcmFtIGluZGV4IHRoZSBpbmRleCBvZiB0aGUgcGl4ZWwgdG8gc2V0LCBmcm9tIDAgdG8gMTYwICogMTYwIChleGNsdXNpdmUpICAKLy8vIEBwYXJhbSBwYWxldHRlIHRoZSBpbmRleCBvZiB0aGUgcGFsZXR0ZSB0byBzZXQgdGhlIHBpeGVsIHRvLCBmcm9tIDEgdG8gNCAoaW5jbHVzaXZlKQpwdWIgZm4gc2V0X2ZyYW1lX2J1ZmZlcihpbmRleCA6IFVJbnQsIHBhbGV0dGUgOiBVSW50KSAtPiBVbml0IHsKICBpZiBpbmRleCA+PSAxNjBVICogMTYwVSB8fCBwYWxldHRlID09IDAgfHwgcGFsZXR0ZSA+IDQgewogICAgdHJhY2UoIkZyYW1lIGJ1ZmZlciBpbmRleCBvciBwYWxldHRlIGluZGV4IG91dCBvZiByYW5nZSIpCiAgICBwYW5pYygpCiAgfQogIGxldCBieXRlID0gbG9hZF9ieXRlKGFkZHJlc3NfRlJBTUVCVUZGRVIgKyBpbmRleC50b19pbnQoKSAvIDQpCiAgbGV0IG5ld19ieXRlID0gYml0c2V0KAogICAgYnl0ZS50b19pbnQoKS50b191aW50KCksCiAgICBwYWxldHRlIC0gMSwKICAgIGluZGV4ICUgNFUgKiAyVSwKICAgIDJVLAogICkKICBzdG9yZV9ieXRlKAogICAgYWRkcmVzc19GUkFNRUJVRkZFUiArIGluZGV4LnRvX2ludCgpIC8gNCwKICAgIG5ld19ieXRlLnRvX2ludCgpLnRvX2J5dGUoKSwKICApCn0KCi8vLyBTdGF0dXMgb2YgbmV0cGxheQovLy8gCi8vLyBUaGUgaW5kZXggaXMgZnJvbSAxIHRvIDQgKGluY2x1c2l2ZSkKcHViKHJlYWRvbmx5KSBzdHJ1Y3QgTmV0cGxheSB7CiAgaW5kZXggOiBVSW50CiAgYWN0aXZlIDogQm9vbAp9CgovLy8gR2V0cyB0aGUgc3RhdGUgb2YgdGhlIG5ldHBsYXkuCi8vLyAKLy8vIEByZXR1cm4gdGhlIHN0YXRlIG9mIHRoZSBuZXRwbGF5CnB1YiBmbiBnZXRfbmV0cGxheSgpIC0+IE5ldHBsYXkgewogIGxldCBmbGFncyA9IGxvYWRfYnl0ZShhZGRyZXNzX05FVFBMQVkpLnRvX2ludCgpLnRvX3VpbnQoKQogIE5ldHBsYXk6OnsgaW5kZXg6IChmbGFncyAmIDBiMTFVKSArIDEsIGFjdGl2ZTogKGZsYWdzICYgNFUpID09IDRVIH0KfQoKcHViIGZuIHNldF9zeXN0ZW1fcHJlc2VydmVfZnJhbWVidWZmZXIoYiA6IEJvb2wpIC0+IFVuaXQgewogIGxldCBmbGFncyA9IGxvYWRfYnl0ZShhZGRyZXNzX1NZU1RFTV9GTEFHUykKICBsZXQgbmV3X2ZsYWdzID0gYml0c2V0KAogICAgZmxhZ3MudG9faW50KCkudG9fdWludCgpLAogICAgaWYgYiB7CiAgICAgIDEKICAgIH0gZWxzZSB7CiAgICAgIDAKICAgIH0sCiAgICAwVSwKICAgIDFVLAogICkKICBzdG9yZV9ieXRlKGFkZHJlc3NfU1lTVEVNX0ZMQUdTLCBuZXdfZmxhZ3MudG9faW50KCkudG9fYnl0ZSgpKQp9CgpwdWIgZm4gZ2V0X3N5c3RlbV9wcmVzZXJ2ZV9mcmFtZWJ1ZmZlcigpIC0+IEJvb2wgewogIGxldCBmbGFncyA9IGxvYWRfYnl0ZShhZGRyZXNzX1NZU1RFTV9GTEFHUykKICAoZmxhZ3MudG9faW50KCkgJiAxKSA9PSAxCn0KCnB1YiBmbiBzZXRfc3lzdGVtX2hpZGVfZ2FtZXBhZF9vdmVybGF5KGIgOiBCb29sKSAtPiBVbml0IHsKICBsZXQgZmxhZ3MgPSBsb2FkX2J5dGUoYWRkcmVzc19TWVNURU1fRkxBR1MpCiAgbGV0IG5ld19mbGFncyA9IGJpdHNldCgKICAgIGZsYWdzLnRvX2ludCgpLnRvX3VpbnQoKSwKICAgIGlmIGIgewogICAgICAxCiAgICB9IGVsc2UgewogICAgICAwCiAgICB9LAogICAgMVUsCiAgICAxVSwKICApCiAgc3RvcmVfYnl0ZShhZGRyZXNzX1NZU1RFTV9GTEFHUywgbmV3X2ZsYWdzLnRvX2ludCgpLnRvX2J5dGUoKSkKfQoKcHViIGZuIGdldF9zeXN0ZW1faGlkZV9nYW1lcGFkX292ZXJsYXkoKSAtPiBCb29sIHsKICBsZXQgZmxhZ3MgPSBsb2FkX2J5dGUoYWRkcmVzc19TWVNURU1fRkxBR1MpCiAgKGZsYWdzLnRvX2ludCgpICYgMikgPT0gMgp9Cg=="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/lib/moon.pkg.json"),Uint8Array.from(atob("e30="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/lib/utils.mbt"),Uint8Array.from(atob("Ly8gIENvcHlyaWdodCAyMDI0IEludGVybmF0aW9uYWwgRGlnaXRhbCBFY29ub215IEFjYWRlbXkKLy8gCi8vICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8gIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KLy8gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAovLyAKLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8gCi8vICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCi8vICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8vLyAob3JpZ2luIGFuZCBub3QgbWFzaykgb3IgKHZhbHVlIHNoaWZ0IGxlZnQgYW5kIG1hc2spCmZuIGJpdHNldChvcmlnaW4gOiBVSW50LCB2YWx1ZSA6IFVJbnQsIG9mZnNldCA6IFVJbnQsIHdpZHRoIDogVUludCkgLT4gVUludCB7CiAgbGV0IG1hc2sgPSAoKDEgPDwgd2lkdGgudG9faW50KCkpIC0gMSkgPDwgb2Zmc2V0LnRvX2ludCgpCiAgKG9yaWdpbiAmIG1hc2sudG9fdWludCgpLmxub3QoKSkgfCAoKHZhbHVlIDw8IG9mZnNldC50b19pbnQoKSkgJiBtYXNrLnRvX3VpbnQoKSkKfQoKdGVzdCAiYml0c2V0IiB7CiAgQHRlc3QuZXEoYml0c2V0KDB4RkZGRlUsIDB4MFUsIDBVLCA0VSksIDB4RkZGMFUpIQogIEB0ZXN0LmVxKGJpdHNldCgweEZGRkZVLCAweDBVLCA0VSwgNFUpLCAweEZGMEZVKSEKICBAdGVzdC5lcShiaXRzZXQoMHhGRkZGVSwgMHgwVSwgOFUsIDRVKSwgMHhGMEZGVSkhCiAgQHRlc3QuZXEoYml0c2V0KDB4RkZGRlUsIDB4MFUsIDEyVSwgNFUpLCAweDBGRkZVKSEKfQo="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/.mooncakes/moonbitlang/wasm4/.github/workflows/publish.yml"),Uint8Array.from(atob("bmFtZTogcHVibGlzaC1wYWNha2dlCnJ1bi1uYW1lOiBwdWJsaXNoIHRvIG1vb25jYWtlcwpvbjogCiAgcmVsZWFzZTogCiAgICB0eXBlczogW3JlbGVhc2VkXQpqb2JzOgogIHB1Ymxpc2g6CiAgICBydW5zLW9uOiB1YnVudHUtbGF0ZXN0CiAgICBzdGVwczoKICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHY0CiAgICAgIC0gbmFtZTogaW5zdGFsbAogICAgICAgIHJ1bjogfAogICAgICAgICAgY3VybCAtZnNTTCBodHRwczovL2NsaS5tb29uYml0bGFuZy5jb20vaW5zdGFsbC91bml4LnNoIHwgYmFzaAogICAgICAgICAgZWNobyAiJEhPTUUvLm1vb24vYmluIiA+PiAkR0lUSFVCX1BBVEgKICAgICAgLSBuYW1lOiBtb29uIHZlcnNpb24KICAgICAgICBydW46IHwKICAgICAgICAgIG1vb24gdmVyc2lvbiAtLWFsbAogICAgICAgICAgbW9vbnJ1biAtLXZlcnNpb24KICAgICAgLSBuYW1lOiBtb29uIGNoZWNrCiAgICAgICAgcnVuOiB8CiAgICAgICAgICBtb29uIGNoZWNrCiAgICAgICAgICBtb29uIGNoZWNrIC0tdGFyZ2V0IHdhc20KICAgICAgICAgIG1vb24gY2hlY2sgLS1zb3VyY2UtZGlyIGV4YW1wbGUvc25ha2UKICAgICAgICAgIG1vb24gY2hlY2sgLS1zb3VyY2UtZGlyIGV4YW1wbGUvc25ha2UgLS10YXJnZXQgd2FzbQogICAgICAtIG5hbWU6IHB1Ymxpc2gKICAgICAgICBydW46IHwKICAgICAgICAgIHJtIC1yIGV4YW1wbGUKICAgICAgICAgIGVjaG8gJFNFQ1JFVCA+IH4vLm1vb24vY3JlZGVudGlhbHMuanNvbgogICAgICAgICAgbW9vbiBwdWJsaXNoCiAgICAgICAgICBybSB+Ly5tb29uL2NyZWRlbnRpYWxzLmpzb24KICAgICAgICBlbnY6CiAgICAgICAgICBTRUNSRVQ6ICR7eyBzZWNyZXRzLk1PT05DQUtFU19NT09OQklUTEFOR19UT0tFTiB9fQ=="),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/check/check.moon_db"),Uint8Array.from(atob("bjJkYgEAAAByAC9Vc2Vycy93ZW55dXhpYW5nL1dvcmtzcGFjZS9tb29uZmlkZGxlLXdhc200L2FwcC90YXJnZXQvd2FzbS9yZWxlYXNlL2NoZWNrLy5tb29uY2FrZXMvbW9vbmJpdGxhbmcvd2FzbTQvbGliL2xpYi5taQGAAAAAAADjTFJWNN1iUVcAL1VzZXJzL3dlbnl1eGlhbmcvV29ya3NwYWNlL21vb25maWRkbGUtd2FzbTQvYXBwL3RhcmdldC93YXNtL3JlbGVhc2UvY2hlY2svbWFpbi9tYWluLm1pAYABAAAAAHvdvf4TswpZ"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/check/check.output"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/check/packages.json"),Uint8Array.from(atob("ewogICJzb3VyY2VfZGlyIjogIm1lbWZzOi9hcHAiLAogICJuYW1lIjogInNuYWtlIiwKICAicGFja2FnZXMiOiBbCiAgICB7CiAgICAgICJpcy1tYWluIjogZmFsc2UsCiAgICAgICJpcy10aGlyZC1wYXJ0eSI6IGZhbHNlLAogICAgICAicm9vdCI6ICJzbmFrZSIsCiAgICAgICJyZWwiOiAibWFpbiIsCiAgICAgICJmaWxlcyI6IFsKICAgICAgICAibWVtZnM6L2FwcC9tYWluL21haW4ubWJ0IiwKICAgICAgICAibWVtZnM6L2FwcC9tYWluL2dhbWUubWJ0IiwKICAgICAgICAibWVtZnM6L2FwcC9tYWluL3NuYWtlLm1idCIKICAgICAgXSwKICAgICAgIndidGVzdC1maWxlcyI6IFtdLAogICAgICAidGVzdC1maWxlcyI6IFtdLAogICAgICAiZGVwcyI6IFsKICAgICAgICB7CiAgICAgICAgICAicGF0aCI6ICJtb29uYml0bGFuZy93YXNtNC9saWIiLAogICAgICAgICAgImFsaWFzIjogImxpYiIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ3YnRlc3QtZGVwcyI6IFtdLAogICAgICAidGVzdC1kZXBzIjogW10sCiAgICAgICJhcnRpZmFjdCI6ICJtZW1mczovYXBwL3RhcmdldC93YXNtL3JlbGVhc2UvY2hlY2svbWFpbi9tYWluLm1pIgogICAgfSwKICAgIHsKICAgICAgImlzLW1haW4iOiBmYWxzZSwKICAgICAgImlzLXRoaXJkLXBhcnR5IjogdHJ1ZSwKICAgICAgInJvb3QiOiAibW9vbmJpdGxhbmcvd2FzbTQiLAogICAgICAicmVsIjogImxpYiIsCiAgICAgICJmaWxlcyI6IFsKICAgICAgICAibWVtZnM6L2FwcC8ubW9vbmNha2VzL21vb25iaXRsYW5nL3dhc200L2xpYi9mZmkud2FzbS1nYy5tYnQiLAogICAgICAgICJtZW1mczovYXBwLy5tb29uY2FrZXMvbW9vbmJpdGxhbmcvd2FzbTQvbGliL2Z1bmN0aW9uLm1idCIsCiAgICAgICAgIm1lbWZzOi9hcHAvLm1vb25jYWtlcy9tb29uYml0bGFuZy93YXNtNC9saWIvZmZpLm1idCIsCiAgICAgICAgIm1lbWZzOi9hcHAvLm1vb25jYWtlcy9tb29uYml0bGFuZy93YXNtNC9saWIvZmZpLndhc20ubWJ0IiwKICAgICAgICAibWVtZnM6L2FwcC8ubW9vbmNha2VzL21vb25iaXRsYW5nL3dhc200L2xpYi9tZW1vcnkubWJ0IiwKICAgICAgICAibWVtZnM6L2FwcC8ubW9vbmNha2VzL21vb25iaXRsYW5nL3dhc200L2xpYi91dGlscy5tYnQiCiAgICAgIF0sCiAgICAgICJ3YnRlc3QtZmlsZXMiOiBbXSwKICAgICAgInRlc3QtZmlsZXMiOiBbXSwKICAgICAgImRlcHMiOiBbXSwKICAgICAgIndidGVzdC1kZXBzIjogW10sCiAgICAgICJ0ZXN0LWRlcHMiOiBbXSwKICAgICAgImFydGlmYWN0IjogIm1lbWZzOi9hcHAvdGFyZ2V0L3dhc20vcmVsZWFzZS9jaGVjay8ubW9vbmNha2VzL21vb25iaXRsYW5nL3dhc200L2xpYi9saWIubWkiCiAgICB9CiAgXSwKICAiZGVwcyI6IFsKICAgICJtb29uYml0bGFuZy93YXNtNCIKICBdLAogICJiYWNrZW5kIjogIndhc20iCn0K"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/build/build.moon_db"),Uint8Array.from(atob("bjJkYgEAAAB0AC9Vc2Vycy93ZW55dXhpYW5nL1dvcmtzcGFjZS9tb29uZmlkZGxlLXdhc200L2FwcC90YXJnZXQvd2FzbS9yZWxlYXNlL2J1aWxkLy5tb29uY2FrZXMvbW9vbmJpdGxhbmcvd2FzbTQvbGliL2xpYi5jb3JlcgAvVXNlcnMvd2VueXV4aWFuZy9Xb3Jrc3BhY2UvbW9vbmZpZGRsZS13YXNtNC9hcHAvdGFyZ2V0L3dhc20vcmVsZWFzZS9idWlsZC8ubW9vbmNha2VzL21vb25iaXRsYW5nL3dhc200L2xpYi9saWIubWkCgAAAAAEAAAAATuNShLruM1pZAC9Vc2Vycy93ZW55dXhpYW5nL1dvcmtzcGFjZS9tb29uZmlkZGxlLXdhc200L2FwcC90YXJnZXQvd2FzbS9yZWxlYXNlL2J1aWxkL21haW4vbWFpbi5jb3JlVwAvVXNlcnMvd2VueXV4aWFuZy9Xb3Jrc3BhY2UvbW9vbmZpZGRsZS13YXNtNC9hcHAvdGFyZ2V0L3dhc20vcmVsZWFzZS9idWlsZC9tYWluL21haW4ubWkCgAIAAAMAAAAAL4Q+fQtr+yBZAC9Vc2Vycy93ZW55dXhpYW5nL1dvcmtzcGFjZS9tb29uZmlkZGxlLXdhc200L2FwcC90YXJnZXQvd2FzbS9yZWxlYXNlL2J1aWxkL21haW4vbWFpbi53YXNtAYAEAAAAAKzm8xLqjqhw"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/build/build.output"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/check/main/main.mi"),Uint8Array.from(atob("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"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/build/main/main.core"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/build/main/main.mi"),Uint8Array.from(atob("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"),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/build/main/main.wasm"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/build/.mooncakes/moonbitlang/wasm4/lib/lib.core"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/build/.mooncakes/moonbitlang/wasm4/lib/lib.mi"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0}),I.writeFile(g.default.Uri.parse("memfs:/app/target/wasm/release/check/.mooncakes/moonbitlang/wasm4/lib/lib.mi"),Uint8Array.from(atob(""),A=>A.charCodeAt(0)),{create:!0,overwrite:!0})}var H=class{constructor(A,B){this.uri=A;Z(this,"type");Z(this,"ctime");Z(this,"mtime");Z(this,"size");Z(this,"name");Z(this,"data");this.type=F.FileType.File,this.ctime=Date.now(),this.mtime=Date.now(),this.size=0,this.name=B}},i=class{constructor(A,B){this.uri=A;Z(this,"type");Z(this,"ctime");Z(this,"mtime");Z(this,"size");Z(this,"name");Z(this,"entries");this.type=F.FileType.Directory,this.ctime=Date.now(),this.mtime=Date.now(),this.size=0,this.name=B,this.entries=new Map}},iI=new TextEncoder,N=class N{constructor(){Z(this,"disposable");Z(this,"root",new i(F.Uri.parse("memfs:/"),""));Z(this,"_emitter",new F.EventEmitter);Z(this,"_bufferedEvents",[]);Z(this,"_fireSoonHandle");Z(this,"onDidChangeFile",this._emitter.event);Z(this,"_textDecoder",new TextDecoder);this.disposable=F.Disposable.from(F.workspace.registerFileSystemProvider(N.scheme,this,{isCaseSensitive:!0}),F.workspace.registerFileSearchProvider(N.scheme,this),F.workspace.registerTextSearchProvider(N.scheme,this))}dispose(){this.disposable?.dispose()}initFolder(){console.log("create dir: sample-folder"),this.createDirectory(F.Uri.parse("memfs:/app/")),P(this)}stat(A){return this._lookup(A,!1)}readDirectory(A){let B=this._lookupAsDirectory(A,!1),Q=[];for(let[C,G]of B.entries)Q.push([C,G.type]);return Q}readFile(A){let B=this._lookupAsFile(A,!1).data;if(B)return B;throw F.FileSystemError.FileNotFound()}writeFile(A,B,Q){let C=this._basename(A.path),G=this._lookupParentDirectory(A),U=G.entries.get(C);if(U instanceof i)throw F.FileSystemError.FileIsADirectory(A);if(!U&&!Q.create)throw F.FileSystemError.FileNotFound(A);if(U&&Q.create&&!Q.overwrite)throw F.FileSystemError.FileExists(A);U||(U=new H(A,C),G.entries.set(C,U),this._fireSoon({type:F.FileChangeType.Created,uri:A})),U.mtime=Date.now(),U.size=B.byteLength,U.data=B,this._fireSoon({type:F.FileChangeType.Changed,uri:A})}rename(A,B,Q){if(!Q.overwrite&&this._lookup(B,!0))throw F.FileSystemError.FileExists(B);let C=this._lookup(A,!1),G=this._lookupParentDirectory(A),U=this._lookupParentDirectory(B),b=this._basename(B.path);G.entries.delete(C.name),C.name=b,U.entries.set(b,C),this._fireSoon({type:F.FileChangeType.Deleted,uri:A},{type:F.FileChangeType.Created,uri:B})}delete(A){let B=A.with({path:this._dirname(A.path)}),Q=this._basename(A.path),C=this._lookupAsDirectory(B,!1);if(!C.entries.has(Q))throw F.FileSystemError.FileNotFound(A);C.entries.delete(Q),C.mtime=Date.now(),C.size-=1,this._fireSoon({type:F.FileChangeType.Changed,uri:B},{uri:A,type:F.FileChangeType.Deleted})}createDirectory(A){let B=this._basename(A.path),Q=A.with({path:this._dirname(A.path)}),C=this._lookupAsDirectory(Q,!1),G=new i(A,B);C.entries.set(G.name,G),C.mtime=Date.now(),C.size+=1,this._fireSoon({type:F.FileChangeType.Changed,uri:Q},{type:F.FileChangeType.Created,uri:A})}_lookup(A,B){let Q=A.path.split("/"),C=this.root;for(let G of Q){if(!G)continue;let U;if(C instanceof i&&(U=C.entries.get(G)),!U){if(B)return;throw F.FileSystemError.FileNotFound(A)}C=U}return C}_lookupAsDirectory(A,B){let Q=this._lookup(A,B);if(Q instanceof i)return Q;throw F.FileSystemError.FileNotADirectory(A)}_lookupAsFile(A,B){let Q=this._lookup(A,B);if(Q instanceof H)return Q;throw F.FileSystemError.FileIsADirectory(A)}_lookupParentDirectory(A){let B=A.with({path:this._dirname(A.path)});return this._lookupAsDirectory(B,!1)}watch(A){return new F.Disposable(()=>{})}_fireSoon(...A){this._bufferedEvents.push(...A),this._fireSoonHandle&&clearTimeout(this._fireSoonHandle),this._fireSoonHandle=setTimeout(()=>{this._emitter.fire(this._bufferedEvents),this._bufferedEvents.length=0},5)}_basename(A){return A=this._rtrim(A,"/"),A?A.substr(A.lastIndexOf("/")+1):""}_dirname(A){return A=this._rtrim(A,"/"),A?A.substr(0,A.lastIndexOf("/")):"/"}_rtrim(A,B){if(!A||!B)return A;let Q=B.length,C=A.length;if(Q===0||C===0)return A;let G=C,U=-1;for(;U=A.lastIndexOf(B,G-1),!(U===-1||U+Q!==G);){if(U===0)return"";G=U}return A.substring(0,G)}_getFiles(){let A=new Set;return this._doGetFiles(this.root,A),A}_doGetFiles(A,B){A.entries.forEach(Q=>{Q instanceof H?B.add(Q):this._doGetFiles(Q,B)})}_convertSimple2RegExpPattern(A){return A.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g,"\\$&").replace(/[\*]/g,".*")}provideFileSearchResults(A,B,Q){return this._findFiles(A.pattern)}_findFiles(A){let B=this._getFiles(),Q=[],C=A?new RegExp(this._convertSimple2RegExpPattern(A)):null;for(let G of B)(!C||C.exec(G.name))&&Q.push(G.uri);return Q}provideTextSearchResults(A,B,Q,C){let G={limitHit:!1},U=this._findFiles(B.includes[0]);if(U)for(let b of U){let d=this._textDecoder.decode(this.readFile(b)).split(`
`);for(let c=0;c<d.length;c++){let R=d[c],X=R.indexOf(A.pattern);X!==-1&&Q.report({uri:b,ranges:new F.Range(new F.Position(c,X),new F.Position(c,X+A.pattern.length)),preview:{text:R,matches:new F.Range(new F.Position(0,X),new F.Position(0,X+A.pattern.length))}})}}return G}};Z(N,"scheme","memfs");var z=N,a=new z;var yA=typeof global=="object"&&global&&global.Object===Object&&global,f=yA;var YA=typeof self=="object"&&self&&self.Object===Object&&self,uA=f||YA||Function("return this")(),M=uA;var HA=M.Symbol,W=HA;var r=Object.prototype,JA=r.hasOwnProperty,hA=r.toString,J=W?W.toStringTag:void 0;function wA(I){var A=JA.call(I,J),B=I[J];try{I[J]=void 0;var Q=!0}catch{}var C=hA.call(I);return Q&&(A?I[J]=B:delete I[J]),C}var q=wA;var aA=Object.prototype,MA=aA.toString;function pA(I){return MA.call(I)}var _=pA;var oA="[object Null]",DA="[object Undefined]",$=W?W.toStringTag:void 0;function kA(I){return I==null?I===void 0?DA:oA:$&&$ in Object(I)?q(I):_(I)}var AA=kA;function tA(I){return I!=null&&typeof I=="object"}var IA=tA;var nA="[object Symbol]";function TA(I){return typeof I=="symbol"||IA(I)&&AA(I)==nA}var p=TA;function zA(I,A){for(var B=-1,Q=I==null?0:I.length,C=Array(Q);++B<Q;)C[B]=A(I[B],B,I);return C}var BA=zA;var vA=Array.isArray,gA=vA;var eA=1/0,QA=W?W.prototype:void 0,CA=QA?QA.toString:void 0;function FA(I){if(typeof I=="string")return I;if(gA(I))return BA(I,FA)+"";if(p(I))return CA?CA.call(I):"";var A=I+"";return A=="0"&&1/I==-eA?"-0":A}var UA=FA;var KA=/\s/;function jA(I){for(var A=I.length;A--&&KA.test(I.charAt(A)););return A}var GA=jA;var OA=/^\s+/;function PA(I){return I&&I.slice(0,GA(I)+1).replace(OA,"")}var lA=PA;function fA(I){var A=typeof I;return I!=null&&(A=="object"||A=="function")}var m=fA;var bA=NaN,rA=/^[-+]0x[0-9a-f]+$/i,qA=/^0b[01]+$/i,_A=/^0o[0-7]+$/i,$A=parseInt;function AI(I){if(typeof I=="number")return I;if(p(I))return bA;if(m(I)){var A=typeof I.valueOf=="function"?I.valueOf():I;I=m(A)?A+"":A}if(typeof I!="string")return I===0?I:+I;I=lA(I);var B=qA.test(I);return B||_A.test(I)?$A(I.slice(2),B?2:8):rA.test(I)?bA:+I}var v=AI;function II(I){return I==null?"":UA(I)}var o=II;function BI(I){return function(A){return I?.[A]}}var ZA=BI;var gI=function(){return M.Date.now()},D=gI;var QI="Expected a function",CI=Math.max,FI=Math.min;function UI(I,A,B){var Q,C,G,U,b,E,d=0,c=!1,R=!1,X=!0;if(typeof I!="function")throw new TypeError(QI);A=v(A)||0,m(B)&&(c=!!B.leading,R="maxWait"in B,G=R?CI(v(B.maxWait)||0,A):G,X="trailing"in B?!!B.trailing:X);function L(V){var s=Q,Y=C;return Q=C=void 0,d=V,U=I.apply(Y,s),U}function x(V){return d=V,b=setTimeout(w,A),c?L(V):U}function S(V){var s=V-E,Y=V-d,K=A-s;return R?FI(K,G-Y):K}function h(V){var s=V-E,Y=V-d;return E===void 0||s>=A||s<0||R&&Y>=G}function w(){var V=D();if(h(V))return e(V);b=setTimeout(w,S(V))}function e(V){return b=void 0,X&&Q?L(V):(Q=C=void 0,U)}function XA(){b!==void 0&&clearTimeout(b),d=0,Q=E=C=b=void 0}function EA(){return b===void 0?U:e(D())}function n(){var V=D(),s=h(V);if(Q=arguments,C=this,E=V,s){if(b===void 0)return x(E);if(R)return clearTimeout(b),b=setTimeout(w,A),L(E)}return b===void 0&&(b=setTimeout(w,A)),U}return n.cancel=XA,n.flush=EA,n}var cA=UI;var GI={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},lI=ZA(GI),VA=lI;var dA=/[&<>"']/g,bI=RegExp(dA.source);function ZI(I){return I=o(I),I&&bI.test(I)?I.replace(dA,VA):I}var k=ZI;var RA=/[\\^$.*+?()[\]{}|]/g,cI=RegExp(RA.source);function VI(I){return I=o(I),I&&cI.test(I)?I.replace(RA,"\\$&"):I}var y=VI;var dI="Expected a function";function RI(I,A,B){var Q=!0,C=!0;if(typeof I!="function")throw new TypeError(dI);return m(B)&&(Q="leading"in B?!!B.leading:Q,C="trailing"in B?!!B.trailing:C),cA(I,A,{leading:Q,maxWait:A,trailing:C})}var t=RI;async function EI(I){I.subscriptions.push(a),a.initFolder();let A=null,B=d=>{let c=Math.random(),R=l.Uri.parse("memfs:/app/index.html"),X=a.readFile(R),L=`"${k(d.asWebviewUri(l.Uri.parse("memfs:/app/main/moon.wasm")).toString(!0))}"`,x=new TextDecoder().decode(X);return x=x.replace(/<head>/,`<head><base href="${k(d.asWebviewUri(R).toString(!0))}" /><meta name="nonce" content="${c}" />`).replace(new RegExp(y('"target/wasm/debug/build/main/main.wasm"')),L).replace(new RegExp(y('"target/wasm/release/build/main/main.wasm"')),L).replace(new RegExp(y('"target/wasm-gc/debug/build/main/main.wasm"')),L).replace(new RegExp(y('"target/wasm-gc/release/build/main/main.wasm"')),L).replace(/\"(?:.*?)\/main::/g,'"'),x},Q=()=>{if(l.workspace.workspaceFolders?.[0]!=null){if(A==null){let c=l.window.createWebviewPanel("canvas","Preview",{viewColumn:l.ViewColumn.Two},{enableScripts:!0,localResourceRoots:[l.Uri.parse("memfs:/")]});c.webview.html=B(c.webview),c.onDidDispose(()=>{A===c&&(A=null)}),A=c}A.reveal(),l.commands.executeCommand("workbench.action.lockEditorGroup")}};I.subscriptions.push(l.commands.registerCommand("moonfiddle.open-preview",()=>{Q()})),Q();let C=!1,G=t(async()=>{if(C)return;C=!0;let d=performance.now(),c=l.workspace.workspaceFolders?.[0];if(c==null)return;let R=l.Uri.joinPath(c.uri,"main"),X=await l.workspace.fs.readDirectory(R),L=[];for(let[S,h]of X)h===l.FileType.File&&S.endsWith(".mbt")&&L.push(l.Uri.joinPath(R,S).toString(!1));if(A!=null)try{await l.commands.executeCommand("moonbit.compile-to-wasm",l.Uri.parse("memfs:/app/main/moon.pkg.json"),{silent:!0}),A.webview.html=B(A.webview)}catch(S){console.error(S)}let x=performance.now()-d;console.log(`live reload in ${x}ms`),C=!1},100),U=t(async()=>{C||A!=null&&(A.webview.html=B(A.webview))},100),b=l.workspace.createFileSystemWatcher("**/*.mbt");b.onDidCreate(G),b.onDidChange(G),I.subscriptions.push(b);let E=l.workspace.createFileSystemWatcher("**/*");E.onDidChange(U),I.subscriptions.push(E)}return NA(LI);})();
/*! Bundled license information:

lodash-es/lodash.js:
  (**
   * @license
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="es" -o ./`
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
