"use strict";var c={kind:"start",message:""},p={kind:"over",message:""},l=s=>({kind:"warn",message:s}),f=s=>({kind:"error",message:s}),b=s=>({kind:"internal",message:s}),u=[["spectest","print_char"],["js_string","new"],["js_string","log"],["js_string","append"],["js_string","empty"]];self.onmessage=async s=>{try{self.postMessage(c);let t=s.data.wasm,n=(await import(s.data.runtimeURL)).default;for(let[e,r]of u)e in n&&r in n[e]&&self.postMessage(l(`${e}.${r} is a reserved runtime, override it may break moonbit`));let a,m={spectest:{print_char:e=>{self.postMessage(e)}},js_string:{new:(e,r)=>{let o=new Uint8Array(a.buffer,e,r);return new TextDecoder("utf8").decode(o)},log:e=>{let r=new TextEncoder().encode(e);for(let o of r)self.postMessage(o)},append:(e,r)=>e+r,empty:()=>"",...n?.js_string},...(delete n?.js_string,n)},{instance:i}=await WebAssembly.instantiate(t,m);a=i.exports["moonbit.memory"];let g=i.exports._start;g(),self.postMessage(p)}catch(t){t instanceof WebAssembly.CompileError?self.postMessage(b(`${t.message}`)):t instanceof Error&&self.postMessage(f(`${t.message}`))}};
